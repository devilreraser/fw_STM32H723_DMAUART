
DMAUART2H723.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092d0  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800959c  0800959c  0000a59c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080095e4  080095e4  0000a5e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080095ec  080095ec  0000a5ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080095f0  080095f0  0000a5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  080095f4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000014  08009608  0000b014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000074  08009668  0000b074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000564  240000d4  080096c8  0000b0d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000638  080096c8  0000b638  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b0d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c6b  00000000  00000000  0000b102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023a7  00000000  00000000  0001fd6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00022118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a60  00000000  00000000  00022e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003247c  00000000  00000000  000238d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ba4  00000000  00000000  00055d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00146079  00000000  00000000  000688f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ae971  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037ec  00000000  00000000  001ae9b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001b21a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000d4 	.word	0x240000d4
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08009584 	.word	0x08009584

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000d8 	.word	0x240000d8
 8000308:	08009584 	.word	0x08009584

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <resetGreenLed>:
	yellowOn = 1;
	previousMillisLedYellow = HAL_GetTick();
}

void resetGreenLed(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000606:	4804      	ldr	r0, [pc, #16]	@ (8000618 <resetGreenLed+0x1c>)
 8000608:	f004 fc66 	bl	8004ed8 <HAL_GPIO_WritePin>
	greenOn = 0;
 800060c:	4b03      	ldr	r3, [pc, #12]	@ (800061c <resetGreenLed+0x20>)
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	58020400 	.word	0x58020400
 800061c:	240003f1 	.word	0x240003f1

08000620 <resetYellowLed>:

void resetYellowLed(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	2102      	movs	r1, #2
 8000628:	4803      	ldr	r0, [pc, #12]	@ (8000638 <resetYellowLed+0x18>)
 800062a:	f004 fc55 	bl	8004ed8 <HAL_GPIO_WritePin>
	yellowOn = 0;
 800062e:	4b03      	ldr	r3, [pc, #12]	@ (800063c <resetYellowLed+0x1c>)
 8000630:	2200      	movs	r2, #0
 8000632:	701a      	strb	r2, [r3, #0]
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	58021000 	.word	0x58021000
 800063c:	240003f2 	.word	0x240003f2

08000640 <modbusResponsePrepareTest>:

void modbusResponsePrepareTest(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
	uint8_t size;
	size = sizeof(messageTestSend);
 8000646:	2307      	movs	r3, #7
 8000648:	71fb      	strb	r3, [r7, #7]
	memcpy(modbusResponse, messageTestSend, size);
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	461a      	mov	r2, r3
 800064e:	4905      	ldr	r1, [pc, #20]	@ (8000664 <modbusResponsePrepareTest+0x24>)
 8000650:	4805      	ldr	r0, [pc, #20]	@ (8000668 <modbusResponsePrepareTest+0x28>)
 8000652:	f008 ff89 	bl	8009568 <memcpy>
	modbusResponseSize = size;
 8000656:	4a05      	ldr	r2, [pc, #20]	@ (800066c <modbusResponsePrepareTest+0x2c>)
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	7013      	strb	r3, [r2, #0]
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	0800959c 	.word	0x0800959c
 8000668:	24000418 	.word	0x24000418
 800066c:	24000518 	.word	0x24000518

08000670 <sendPreparedModbusResponse>:

void sendPreparedModbusResponse(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	if (sendingMessage)
 8000674:	4b10      	ldr	r3, [pc, #64]	@ (80006b8 <sendPreparedModbusResponse+0x48>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	b2db      	uxtb	r3, r3
 800067a:	2b00      	cmp	r3, #0
 800067c:	d006      	beq.n	800068c <sendPreparedModbusResponse+0x1c>
	{
		messagesTXSkipped++;
 800067e:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <sendPreparedModbusResponse+0x4c>)
 8000680:	881b      	ldrh	r3, [r3, #0]
 8000682:	3301      	adds	r3, #1
 8000684:	b29a      	uxth	r2, r3
 8000686:	4b0d      	ldr	r3, [pc, #52]	@ (80006bc <sendPreparedModbusResponse+0x4c>)
 8000688:	801a      	strh	r2, [r3, #0]
		return;
 800068a:	e014      	b.n	80006b6 <sendPreparedModbusResponse+0x46>
	}
	if (modbusResponseSize)
 800068c:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <sendPreparedModbusResponse+0x50>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d00a      	beq.n	80006aa <sendPreparedModbusResponse+0x3a>
	{
		/* Start UART transmission using DMA */
		HAL_UART_Transmit_DMA(&huart2, modbusResponse, modbusResponseSize);
 8000694:	4b0a      	ldr	r3, [pc, #40]	@ (80006c0 <sendPreparedModbusResponse+0x50>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	461a      	mov	r2, r3
 800069a:	490a      	ldr	r1, [pc, #40]	@ (80006c4 <sendPreparedModbusResponse+0x54>)
 800069c:	480a      	ldr	r0, [pc, #40]	@ (80006c8 <sendPreparedModbusResponse+0x58>)
 800069e:	f007 f9e7 	bl	8007a70 <HAL_UART_Transmit_DMA>
		sendingMessage = 1;
 80006a2:	4b05      	ldr	r3, [pc, #20]	@ (80006b8 <sendPreparedModbusResponse+0x48>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	701a      	strb	r2, [r3, #0]
 80006a8:	e005      	b.n	80006b6 <sendPreparedModbusResponse+0x46>
	}
	else
	{
		messagesTXIdle++;
 80006aa:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <sendPreparedModbusResponse+0x5c>)
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	3301      	adds	r3, #1
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	4b06      	ldr	r3, [pc, #24]	@ (80006cc <sendPreparedModbusResponse+0x5c>)
 80006b4:	801a      	strh	r2, [r3, #0]
	}

}
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	24000412 	.word	0x24000412
 80006bc:	240003f8 	.word	0x240003f8
 80006c0:	24000518 	.word	0x24000518
 80006c4:	24000418 	.word	0x24000418
 80006c8:	240001d8 	.word	0x240001d8
 80006cc:	240003fa 	.word	0x240003fa

080006d0 <modbusResponsePrepareForLastReceivedRequest>:

void modbusResponsePrepareForLastReceivedRequest(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
	/* evaluate modbusBytesReceived and modbusRequest */
	/* prepare modbusResponseSize and modbusResponse */
	uint8_t size;
	size = sizeof(messageTestSend);
 80006d6:	2307      	movs	r3, #7
 80006d8:	71fb      	strb	r3, [r7, #7]
	memcpy(modbusResponse, messageTestSend, size);
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	461a      	mov	r2, r3
 80006de:	4905      	ldr	r1, [pc, #20]	@ (80006f4 <modbusResponsePrepareForLastReceivedRequest+0x24>)
 80006e0:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <modbusResponsePrepareForLastReceivedRequest+0x28>)
 80006e2:	f008 ff41 	bl	8009568 <memcpy>
	modbusResponseSize = size;
 80006e6:	4a05      	ldr	r2, [pc, #20]	@ (80006fc <modbusResponsePrepareForLastReceivedRequest+0x2c>)
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	7013      	strb	r3, [r2, #0]
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	0800959c 	.word	0x0800959c
 80006f8:	24000418 	.word	0x24000418
 80006fc:	24000518 	.word	0x24000518

08000700 <configureDMAforUART2TX>:



void configureDMAforUART2TX(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
    /* Configure DMA for UART2 TX */
    hdma_usart2_tx.Instance = DMA1_Stream0;  /* Select appropriate stream for UART2 TX */
 8000704:	4b17      	ldr	r3, [pc, #92]	@ (8000764 <configureDMAforUART2TX+0x64>)
 8000706:	4a18      	ldr	r2, [pc, #96]	@ (8000768 <configureDMAforUART2TX+0x68>)
 8000708:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800070a:	4b16      	ldr	r3, [pc, #88]	@ (8000764 <configureDMAforUART2TX+0x64>)
 800070c:	222c      	movs	r2, #44	@ 0x2c
 800070e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000710:	4b14      	ldr	r3, [pc, #80]	@ (8000764 <configureDMAforUART2TX+0x64>)
 8000712:	2240      	movs	r2, #64	@ 0x40
 8000714:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000716:	4b13      	ldr	r3, [pc, #76]	@ (8000764 <configureDMAforUART2TX+0x64>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800071c:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <configureDMAforUART2TX+0x64>)
 800071e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000722:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000724:	4b0f      	ldr	r3, [pc, #60]	@ (8000764 <configureDMAforUART2TX+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800072a:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <configureDMAforUART2TX+0x64>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000730:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <configureDMAforUART2TX+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000736:	4b0b      	ldr	r3, [pc, #44]	@ (8000764 <configureDMAforUART2TX+0x64>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800073c:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <configureDMAforUART2TX+0x64>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000742:	4808      	ldr	r0, [pc, #32]	@ (8000764 <configureDMAforUART2TX+0x64>)
 8000744:	f001 f9ee 	bl	8001b24 <HAL_DMA_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <configureDMAforUART2TX+0x52>
    {
    	/* Initialization error */
        Error_Handler();
 800074e:	f000 fd15 	bl	800117c <Error_Handler>
    }

    /* Link DMA handle to UART handle */
    __HAL_LINKDMA(&huart2, hdmatx, hdma_usart2_tx);
 8000752:	4b06      	ldr	r3, [pc, #24]	@ (800076c <configureDMAforUART2TX+0x6c>)
 8000754:	4a03      	ldr	r2, [pc, #12]	@ (8000764 <configureDMAforUART2TX+0x64>)
 8000756:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000758:	4b02      	ldr	r3, [pc, #8]	@ (8000764 <configureDMAforUART2TX+0x64>)
 800075a:	4a04      	ldr	r2, [pc, #16]	@ (800076c <configureDMAforUART2TX+0x6c>)
 800075c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	24000300 	.word	0x24000300
 8000768:	40020010 	.word	0x40020010
 800076c:	240001d8 	.word	0x240001d8

08000770 <configureDMAforUART2RX>:

void configureDMAforUART2RX(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
    /* Configure DMA for UART2 RX */
    hdma_usart2_rx.Instance = DMA1_Stream1;  /* Select the correct stream for UART2 RX */
 8000774:	4b18      	ldr	r3, [pc, #96]	@ (80007d8 <configureDMAforUART2RX+0x68>)
 8000776:	4a19      	ldr	r2, [pc, #100]	@ (80007dc <configureDMAforUART2RX+0x6c>)
 8000778:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800077a:	4b17      	ldr	r3, [pc, #92]	@ (80007d8 <configureDMAforUART2RX+0x68>)
 800077c:	222b      	movs	r2, #43	@ 0x2b
 800077e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000780:	4b15      	ldr	r3, [pc, #84]	@ (80007d8 <configureDMAforUART2RX+0x68>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000786:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <configureDMAforUART2RX+0x68>)
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800078c:	4b12      	ldr	r3, [pc, #72]	@ (80007d8 <configureDMAforUART2RX+0x68>)
 800078e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000792:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000794:	4b10      	ldr	r3, [pc, #64]	@ (80007d8 <configureDMAforUART2RX+0x68>)
 8000796:	2200      	movs	r2, #0
 8000798:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800079a:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <configureDMAforUART2RX+0x68>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;  /* Circular mode for continuous reception */
 80007a0:	4b0d      	ldr	r3, [pc, #52]	@ (80007d8 <configureDMAforUART2RX+0x68>)
 80007a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007a6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80007a8:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <configureDMAforUART2RX+0x68>)
 80007aa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80007ae:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007b0:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <configureDMAforUART2RX+0x68>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80007b6:	4808      	ldr	r0, [pc, #32]	@ (80007d8 <configureDMAforUART2RX+0x68>)
 80007b8:	f001 f9b4 	bl	8001b24 <HAL_DMA_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <configureDMAforUART2RX+0x56>
    {
        /* Initialization error */
        Error_Handler();
 80007c2:	f000 fcdb 	bl	800117c <Error_Handler>
    }

    // Link DMA handle to UART handle
    __HAL_LINKDMA(&huart2, hdmarx, hdma_usart2_rx);
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <configureDMAforUART2RX+0x70>)
 80007c8:	4a03      	ldr	r2, [pc, #12]	@ (80007d8 <configureDMAforUART2RX+0x68>)
 80007ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80007ce:	4b02      	ldr	r3, [pc, #8]	@ (80007d8 <configureDMAforUART2RX+0x68>)
 80007d0:	4a03      	ldr	r2, [pc, #12]	@ (80007e0 <configureDMAforUART2RX+0x70>)
 80007d2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	24000378 	.word	0x24000378
 80007dc:	40020028 	.word	0x40020028
 80007e0:	240001d8 	.word	0x240001d8

080007e4 <HAL_UART_TxCpltCallback>:

/* Callback function to handle end of transmission */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a0e      	ldr	r2, [pc, #56]	@ (800082c <HAL_UART_TxCpltCallback+0x48>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d116      	bne.n	8000824 <HAL_UART_TxCpltCallback+0x40>
    {
        /* Transmission complete, handle post-transmission actions here */
    	messagesTXCompleted++;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <HAL_UART_TxCpltCallback+0x4c>)
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	3301      	adds	r3, #1
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <HAL_UART_TxCpltCallback+0x4c>)
 8000800:	801a      	strh	r2, [r3, #0]
    	if (sendingMessage)
 8000802:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <HAL_UART_TxCpltCallback+0x50>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	b2db      	uxtb	r3, r3
 8000808:	2b00      	cmp	r3, #0
 800080a:	d005      	beq.n	8000818 <HAL_UART_TxCpltCallback+0x34>
    	{
    		sendingMessage = 0;
 800080c:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <HAL_UART_TxCpltCallback+0x50>)
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
			enableReceiveMessage();
 8000812:	f000 f94d 	bl	8000ab0 <enableReceiveMessage>
    	{
    		messagesTXCompletedUnexpected++;
    	}

    }
}
 8000816:	e005      	b.n	8000824 <HAL_UART_TxCpltCallback+0x40>
    		messagesTXCompletedUnexpected++;
 8000818:	4b07      	ldr	r3, [pc, #28]	@ (8000838 <HAL_UART_TxCpltCallback+0x54>)
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	3301      	adds	r3, #1
 800081e:	b29a      	uxth	r2, r3
 8000820:	4b05      	ldr	r3, [pc, #20]	@ (8000838 <HAL_UART_TxCpltCallback+0x54>)
 8000822:	801a      	strh	r2, [r3, #0]
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40004400 	.word	0x40004400
 8000830:	240003f4 	.word	0x240003f4
 8000834:	24000412 	.word	0x24000412
 8000838:	240003f6 	.word	0x240003f6

0800083c <HAL_UART_RxCpltCallback>:

/* DMA reception complete callback (when buffer is filled) */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a17      	ldr	r2, [pc, #92]	@ (80008a8 <HAL_UART_RxCpltCallback+0x6c>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d126      	bne.n	800089c <HAL_UART_RxCpltCallback+0x60>
    {
        /* Reception complete, buffer is full, process the received message */

		uartRXFullBufferDetections++;
 800084e:	4b17      	ldr	r3, [pc, #92]	@ (80008ac <HAL_UART_RxCpltCallback+0x70>)
 8000850:	881b      	ldrh	r3, [r3, #0]
 8000852:	3301      	adds	r3, #1
 8000854:	b29a      	uxth	r2, r3
 8000856:	4b15      	ldr	r3, [pc, #84]	@ (80008ac <HAL_UART_RxCpltCallback+0x70>)
 8000858:	801a      	strh	r2, [r3, #0]

        if (uartRXDeny)
 800085a:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <HAL_UART_RxCpltCallback+0x74>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	2b00      	cmp	r3, #0
 8000862:	d006      	beq.n	8000872 <HAL_UART_RxCpltCallback+0x36>
        {
        	uartRXFullBufferNotExpected++;
 8000864:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <HAL_UART_RxCpltCallback+0x78>)
 8000866:	881b      	ldrh	r3, [r3, #0]
 8000868:	3301      	adds	r3, #1
 800086a:	b29a      	uxth	r2, r3
 800086c:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <HAL_UART_RxCpltCallback+0x78>)
 800086e:	801a      	strh	r2, [r3, #0]
			modbusBytesReceived = MODBUS_RX_BUFFER_SIZE;
			uartRXCompleteOnFullBuffer = 1;
			uartRXDeny = 1;
        }
    }
}
 8000870:	e014      	b.n	800089c <HAL_UART_RxCpltCallback+0x60>
			if (modbusBytesReceived)
 8000872:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <HAL_UART_RxCpltCallback+0x7c>)
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	b29b      	uxth	r3, r3
 8000878:	2b00      	cmp	r3, #0
 800087a:	d005      	beq.n	8000888 <HAL_UART_RxCpltCallback+0x4c>
				messagesRXNotProcessed++;
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <HAL_UART_RxCpltCallback+0x80>)
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	3301      	adds	r3, #1
 8000882:	b29a      	uxth	r2, r3
 8000884:	4b0d      	ldr	r3, [pc, #52]	@ (80008bc <HAL_UART_RxCpltCallback+0x80>)
 8000886:	801a      	strh	r2, [r3, #0]
			modbusBytesReceived = MODBUS_RX_BUFFER_SIZE;
 8000888:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <HAL_UART_RxCpltCallback+0x7c>)
 800088a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800088e:	801a      	strh	r2, [r3, #0]
			uartRXCompleteOnFullBuffer = 1;
 8000890:	4b0b      	ldr	r3, [pc, #44]	@ (80008c0 <HAL_UART_RxCpltCallback+0x84>)
 8000892:	2201      	movs	r2, #1
 8000894:	701a      	strb	r2, [r3, #0]
			uartRXDeny = 1;
 8000896:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <HAL_UART_RxCpltCallback+0x74>)
 8000898:	2201      	movs	r2, #1
 800089a:	701a      	strb	r2, [r3, #0]
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	40004400 	.word	0x40004400
 80008ac:	240003fe 	.word	0x240003fe
 80008b0:	24000413 	.word	0x24000413
 80008b4:	24000402 	.word	0x24000402
 80008b8:	2400061c 	.word	0x2400061c
 80008bc:	2400040a 	.word	0x2400040a
 80008c0:	24000414 	.word	0x24000414

080008c4 <USART2_IRQHandler>:



/* UART interrupt handler for idle line detection */
void USART2_IRQHandler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
    if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE))
 80008ca:	4b52      	ldr	r3, [pc, #328]	@ (8000a14 <USART2_IRQHandler+0x150>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	69db      	ldr	r3, [r3, #28]
 80008d0:	f003 0310 	and.w	r3, r3, #16
 80008d4:	2b10      	cmp	r3, #16
 80008d6:	f040 8098 	bne.w	8000a0a <USART2_IRQHandler+0x146>
    {
        // Clear the idle line flag by reading the status register and data register
        __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 80008da:	4b4e      	ldr	r3, [pc, #312]	@ (8000a14 <USART2_IRQHandler+0x150>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2210      	movs	r2, #16
 80008e0:	621a      	str	r2, [r3, #32]

		// Stop the DMA temporarily to process the received data
		HAL_UART_DMAStop(&huart2);
 80008e2:	484c      	ldr	r0, [pc, #304]	@ (8000a14 <USART2_IRQHandler+0x150>)
 80008e4:	f007 f990 	bl	8007c08 <HAL_UART_DMAStop>

		uartRXActiveToIdleDetections++;
 80008e8:	4b4b      	ldr	r3, [pc, #300]	@ (8000a18 <USART2_IRQHandler+0x154>)
 80008ea:	881b      	ldrh	r3, [r3, #0]
 80008ec:	3301      	adds	r3, #1
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	4b49      	ldr	r3, [pc, #292]	@ (8000a18 <USART2_IRQHandler+0x154>)
 80008f2:	801a      	strh	r2, [r3, #0]

        if (uartRXDeny)
 80008f4:	4b49      	ldr	r3, [pc, #292]	@ (8000a1c <USART2_IRQHandler+0x158>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d006      	beq.n	800090c <USART2_IRQHandler+0x48>
        {
        	uartRXActiveToIdleNotExpected++;
 80008fe:	4b48      	ldr	r3, [pc, #288]	@ (8000a20 <USART2_IRQHandler+0x15c>)
 8000900:	881b      	ldrh	r3, [r3, #0]
 8000902:	3301      	adds	r3, #1
 8000904:	b29a      	uxth	r2, r3
 8000906:	4b46      	ldr	r3, [pc, #280]	@ (8000a20 <USART2_IRQHandler+0x15c>)
 8000908:	801a      	strh	r2, [r3, #0]
			uartRXCompleteOnActiveToIdleLine = 1;

			uartRXDeny = 1;
        }
    }
}
 800090a:	e07e      	b.n	8000a0a <USART2_IRQHandler+0x146>
			if (modbusBytesReceived)
 800090c:	4b45      	ldr	r3, [pc, #276]	@ (8000a24 <USART2_IRQHandler+0x160>)
 800090e:	881b      	ldrh	r3, [r3, #0]
 8000910:	b29b      	uxth	r3, r3
 8000912:	2b00      	cmp	r3, #0
 8000914:	d005      	beq.n	8000922 <USART2_IRQHandler+0x5e>
				messagesRXNotProcessed++;
 8000916:	4b44      	ldr	r3, [pc, #272]	@ (8000a28 <USART2_IRQHandler+0x164>)
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	3301      	adds	r3, #1
 800091c:	b29a      	uxth	r2, r3
 800091e:	4b42      	ldr	r3, [pc, #264]	@ (8000a28 <USART2_IRQHandler+0x164>)
 8000920:	801a      	strh	r2, [r3, #0]
			uint32_t lastDMAUart2RXCounter = __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8000922:	4b42      	ldr	r3, [pc, #264]	@ (8000a2c <USART2_IRQHandler+0x168>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a42      	ldr	r2, [pc, #264]	@ (8000a30 <USART2_IRQHandler+0x16c>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d04a      	beq.n	80009c2 <USART2_IRQHandler+0xfe>
 800092c:	4b3f      	ldr	r3, [pc, #252]	@ (8000a2c <USART2_IRQHandler+0x168>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a40      	ldr	r2, [pc, #256]	@ (8000a34 <USART2_IRQHandler+0x170>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d045      	beq.n	80009c2 <USART2_IRQHandler+0xfe>
 8000936:	4b3d      	ldr	r3, [pc, #244]	@ (8000a2c <USART2_IRQHandler+0x168>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a3f      	ldr	r2, [pc, #252]	@ (8000a38 <USART2_IRQHandler+0x174>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d040      	beq.n	80009c2 <USART2_IRQHandler+0xfe>
 8000940:	4b3a      	ldr	r3, [pc, #232]	@ (8000a2c <USART2_IRQHandler+0x168>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a3d      	ldr	r2, [pc, #244]	@ (8000a3c <USART2_IRQHandler+0x178>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d03b      	beq.n	80009c2 <USART2_IRQHandler+0xfe>
 800094a:	4b38      	ldr	r3, [pc, #224]	@ (8000a2c <USART2_IRQHandler+0x168>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a3c      	ldr	r2, [pc, #240]	@ (8000a40 <USART2_IRQHandler+0x17c>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d036      	beq.n	80009c2 <USART2_IRQHandler+0xfe>
 8000954:	4b35      	ldr	r3, [pc, #212]	@ (8000a2c <USART2_IRQHandler+0x168>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a3a      	ldr	r2, [pc, #232]	@ (8000a44 <USART2_IRQHandler+0x180>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d031      	beq.n	80009c2 <USART2_IRQHandler+0xfe>
 800095e:	4b33      	ldr	r3, [pc, #204]	@ (8000a2c <USART2_IRQHandler+0x168>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a39      	ldr	r2, [pc, #228]	@ (8000a48 <USART2_IRQHandler+0x184>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d02c      	beq.n	80009c2 <USART2_IRQHandler+0xfe>
 8000968:	4b30      	ldr	r3, [pc, #192]	@ (8000a2c <USART2_IRQHandler+0x168>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a37      	ldr	r2, [pc, #220]	@ (8000a4c <USART2_IRQHandler+0x188>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d027      	beq.n	80009c2 <USART2_IRQHandler+0xfe>
 8000972:	4b2e      	ldr	r3, [pc, #184]	@ (8000a2c <USART2_IRQHandler+0x168>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a36      	ldr	r2, [pc, #216]	@ (8000a50 <USART2_IRQHandler+0x18c>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d022      	beq.n	80009c2 <USART2_IRQHandler+0xfe>
 800097c:	4b2b      	ldr	r3, [pc, #172]	@ (8000a2c <USART2_IRQHandler+0x168>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a34      	ldr	r2, [pc, #208]	@ (8000a54 <USART2_IRQHandler+0x190>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d01d      	beq.n	80009c2 <USART2_IRQHandler+0xfe>
 8000986:	4b29      	ldr	r3, [pc, #164]	@ (8000a2c <USART2_IRQHandler+0x168>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a33      	ldr	r2, [pc, #204]	@ (8000a58 <USART2_IRQHandler+0x194>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d018      	beq.n	80009c2 <USART2_IRQHandler+0xfe>
 8000990:	4b26      	ldr	r3, [pc, #152]	@ (8000a2c <USART2_IRQHandler+0x168>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a31      	ldr	r2, [pc, #196]	@ (8000a5c <USART2_IRQHandler+0x198>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d013      	beq.n	80009c2 <USART2_IRQHandler+0xfe>
 800099a:	4b24      	ldr	r3, [pc, #144]	@ (8000a2c <USART2_IRQHandler+0x168>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a30      	ldr	r2, [pc, #192]	@ (8000a60 <USART2_IRQHandler+0x19c>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d00e      	beq.n	80009c2 <USART2_IRQHandler+0xfe>
 80009a4:	4b21      	ldr	r3, [pc, #132]	@ (8000a2c <USART2_IRQHandler+0x168>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a2e      	ldr	r2, [pc, #184]	@ (8000a64 <USART2_IRQHandler+0x1a0>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d009      	beq.n	80009c2 <USART2_IRQHandler+0xfe>
 80009ae:	4b1f      	ldr	r3, [pc, #124]	@ (8000a2c <USART2_IRQHandler+0x168>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a2d      	ldr	r2, [pc, #180]	@ (8000a68 <USART2_IRQHandler+0x1a4>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d004      	beq.n	80009c2 <USART2_IRQHandler+0xfe>
 80009b8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a2c <USART2_IRQHandler+0x168>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a2b      	ldr	r2, [pc, #172]	@ (8000a6c <USART2_IRQHandler+0x1a8>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d103      	bne.n	80009ca <USART2_IRQHandler+0x106>
 80009c2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a2c <USART2_IRQHandler+0x168>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	e002      	b.n	80009d0 <USART2_IRQHandler+0x10c>
 80009ca:	4b18      	ldr	r3, [pc, #96]	@ (8000a2c <USART2_IRQHandler+0x168>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	607b      	str	r3, [r7, #4]
			if (lastDMAUart2RXCounter <= MODBUS_RX_BUFFER_SIZE)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80009d8:	d807      	bhi.n	80009ea <USART2_IRQHandler+0x126>
				modbusBytesReceived = MODBUS_RX_BUFFER_SIZE - lastDMAUart2RXCounter;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	b29b      	uxth	r3, r3
 80009de:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80009e2:	b29a      	uxth	r2, r3
 80009e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <USART2_IRQHandler+0x160>)
 80009e6:	801a      	strh	r2, [r3, #0]
 80009e8:	e009      	b.n	80009fe <USART2_IRQHandler+0x13a>
				modbusBytesReceived = MODBUS_RX_BUFFER_SIZE;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <USART2_IRQHandler+0x160>)
 80009ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009f0:	801a      	strh	r2, [r3, #0]
				lastDMAUart2RXCounterTooBig++;
 80009f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a70 <USART2_IRQHandler+0x1ac>)
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	3301      	adds	r3, #1
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000a70 <USART2_IRQHandler+0x1ac>)
 80009fc:	801a      	strh	r2, [r3, #0]
			uartRXCompleteOnActiveToIdleLine = 1;
 80009fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000a74 <USART2_IRQHandler+0x1b0>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	701a      	strb	r2, [r3, #0]
			uartRXDeny = 1;
 8000a04:	4b05      	ldr	r3, [pc, #20]	@ (8000a1c <USART2_IRQHandler+0x158>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	701a      	strb	r2, [r3, #0]
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	240001d8 	.word	0x240001d8
 8000a18:	240003fc 	.word	0x240003fc
 8000a1c:	24000413 	.word	0x24000413
 8000a20:	24000400 	.word	0x24000400
 8000a24:	2400061c 	.word	0x2400061c
 8000a28:	2400040a 	.word	0x2400040a
 8000a2c:	24000378 	.word	0x24000378
 8000a30:	40020010 	.word	0x40020010
 8000a34:	40020028 	.word	0x40020028
 8000a38:	40020040 	.word	0x40020040
 8000a3c:	40020058 	.word	0x40020058
 8000a40:	40020070 	.word	0x40020070
 8000a44:	40020088 	.word	0x40020088
 8000a48:	400200a0 	.word	0x400200a0
 8000a4c:	400200b8 	.word	0x400200b8
 8000a50:	40020410 	.word	0x40020410
 8000a54:	40020428 	.word	0x40020428
 8000a58:	40020440 	.word	0x40020440
 8000a5c:	40020458 	.word	0x40020458
 8000a60:	40020470 	.word	0x40020470
 8000a64:	40020488 	.word	0x40020488
 8000a68:	400204a0 	.word	0x400204a0
 8000a6c:	400204b8 	.word	0x400204b8
 8000a70:	24000410 	.word	0x24000410
 8000a74:	24000415 	.word	0x24000415

08000a78 <enableReceiveMessageOnInit>:

void enableReceiveMessageOnInit(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
    /* Start receiving data using UART and DMA in circular mode */
    uartRXDeny = 0;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <enableReceiveMessageOnInit+0x2c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart2, modbusRequest, sizeof(modbusRequest));
 8000a82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a86:	4908      	ldr	r1, [pc, #32]	@ (8000aa8 <enableReceiveMessageOnInit+0x30>)
 8000a88:	4808      	ldr	r0, [pc, #32]	@ (8000aac <enableReceiveMessageOnInit+0x34>)
 8000a8a:	f007 f871 	bl	8007b70 <HAL_UART_Receive_DMA>

    /* Enable UART idle line detection interrupt */
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 8000a8e:	4b07      	ldr	r3, [pc, #28]	@ (8000aac <enableReceiveMessageOnInit+0x34>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b05      	ldr	r3, [pc, #20]	@ (8000aac <enableReceiveMessageOnInit+0x34>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f042 0210 	orr.w	r2, r2, #16
 8000a9c:	601a      	str	r2, [r3, #0]
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	24000413 	.word	0x24000413
 8000aa8:	2400051c 	.word	0x2400051c
 8000aac:	240001d8 	.word	0x240001d8

08000ab0 <enableReceiveMessage>:

void enableReceiveMessage(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	/* Restart DMA reception for the next request */
	uartRXDeny = 0;
 8000ab4:	4b05      	ldr	r3, [pc, #20]	@ (8000acc <enableReceiveMessage+0x1c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart2, modbusRequest, sizeof(modbusRequest));
 8000aba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000abe:	4904      	ldr	r1, [pc, #16]	@ (8000ad0 <enableReceiveMessage+0x20>)
 8000ac0:	4804      	ldr	r0, [pc, #16]	@ (8000ad4 <enableReceiveMessage+0x24>)
 8000ac2:	f007 f855 	bl	8007b70 <HAL_UART_Receive_DMA>
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	24000413 	.word	0x24000413
 8000ad0:	2400051c 	.word	0x2400051c
 8000ad4:	240001d8 	.word	0x240001d8

08000ad8 <processReceivedModbusRequests>:

void processReceivedModbusRequests(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0

	if ((uartRXCompleteOnActiveToIdleLine) || (uartRXCompleteOnFullBuffer))
 8000adc:	4b26      	ldr	r3, [pc, #152]	@ (8000b78 <processReceivedModbusRequests+0xa0>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d104      	bne.n	8000af0 <processReceivedModbusRequests+0x18>
 8000ae6:	4b25      	ldr	r3, [pc, #148]	@ (8000b7c <processReceivedModbusRequests+0xa4>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d039      	beq.n	8000b64 <processReceivedModbusRequests+0x8c>
	{
		uartRXCompleteOnActiveToIdleLine = 0;
 8000af0:	4b21      	ldr	r3, [pc, #132]	@ (8000b78 <processReceivedModbusRequests+0xa0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
		uartRXCompleteOnFullBuffer = 0;
 8000af6:	4b21      	ldr	r3, [pc, #132]	@ (8000b7c <processReceivedModbusRequests+0xa4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]


		if (testSendingStopOnReceivedData)
 8000afc:	4b20      	ldr	r3, [pc, #128]	@ (8000b80 <processReceivedModbusRequests+0xa8>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d002      	beq.n	8000b0a <processReceivedModbusRequests+0x32>
		{
			testSending = 0;
 8000b04:	4b1f      	ldr	r3, [pc, #124]	@ (8000b84 <processReceivedModbusRequests+0xac>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
		}


		if (modbusBytesReceived)
 8000b0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000b88 <processReceivedModbusRequests+0xb0>)
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d020      	beq.n	8000b56 <processReceivedModbusRequests+0x7e>
		{
			messagesRXProcessed++;
 8000b14:	4b1d      	ldr	r3, [pc, #116]	@ (8000b8c <processReceivedModbusRequests+0xb4>)
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b8c <processReceivedModbusRequests+0xb4>)
 8000b1e:	801a      	strh	r2, [r3, #0]

			/* Prepare response to the received MODBUS request */
			modbusResponsePrepareForLastReceivedRequest();	/* modbusBytesReceived and modbusRequest used inside | modbusResponseSize and modbusResponse touched inside */
 8000b20:	f7ff fdd6 	bl	80006d0 <modbusResponsePrepareForLastReceivedRequest>
			modbusBytesReceived = 0;
 8000b24:	4b18      	ldr	r3, [pc, #96]	@ (8000b88 <processReceivedModbusRequests+0xb0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	801a      	strh	r2, [r3, #0]

			if (modbusResponseSize)
 8000b2a:	4b19      	ldr	r3, [pc, #100]	@ (8000b90 <processReceivedModbusRequests+0xb8>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d008      	beq.n	8000b44 <processReceivedModbusRequests+0x6c>
			{
				messagesTXResponsesToRXRequests++;
 8000b32:	4b18      	ldr	r3, [pc, #96]	@ (8000b94 <processReceivedModbusRequests+0xbc>)
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	3301      	adds	r3, #1
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	4b16      	ldr	r3, [pc, #88]	@ (8000b94 <processReceivedModbusRequests+0xbc>)
 8000b3c:	801a      	strh	r2, [r3, #0]
				sendPreparedModbusResponse();
 8000b3e:	f7ff fd97 	bl	8000670 <sendPreparedModbusResponse>
		if (modbusBytesReceived)
 8000b42:	e016      	b.n	8000b72 <processReceivedModbusRequests+0x9a>
			}
			else
			{
				messagesNOResponsesToRXRequests++;
 8000b44:	4b14      	ldr	r3, [pc, #80]	@ (8000b98 <processReceivedModbusRequests+0xc0>)
 8000b46:	881b      	ldrh	r3, [r3, #0]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	4b12      	ldr	r3, [pc, #72]	@ (8000b98 <processReceivedModbusRequests+0xc0>)
 8000b4e:	801a      	strh	r2, [r3, #0]
				enableReceiveMessage();
 8000b50:	f7ff ffae 	bl	8000ab0 <enableReceiveMessage>
		if (modbusBytesReceived)
 8000b54:	e00d      	b.n	8000b72 <processReceivedModbusRequests+0x9a>
			}
		}
		else
		{
			messageRXZeroBytes++;
 8000b56:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <processReceivedModbusRequests+0xc4>)
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b9c <processReceivedModbusRequests+0xc4>)
 8000b60:	801a      	strh	r2, [r3, #0]
		if (modbusBytesReceived)
 8000b62:	e006      	b.n	8000b72 <processReceivedModbusRequests+0x9a>
		}
	}
	else
	{
		messagesRXIdle++;
 8000b64:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <processReceivedModbusRequests+0xc8>)
 8000b66:	881b      	ldrh	r3, [r3, #0]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <processReceivedModbusRequests+0xc8>)
 8000b6e:	801a      	strh	r2, [r3, #0]
	}
}
 8000b70:	bf00      	nop
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	24000415 	.word	0x24000415
 8000b7c:	24000414 	.word	0x24000414
 8000b80:	24000001 	.word	0x24000001
 8000b84:	240003f0 	.word	0x240003f0
 8000b88:	2400061c 	.word	0x2400061c
 8000b8c:	24000404 	.word	0x24000404
 8000b90:	24000518 	.word	0x24000518
 8000b94:	24000406 	.word	0x24000406
 8000b98:	24000408 	.word	0x24000408
 8000b9c:	2400040e 	.word	0x2400040e
 8000ba0:	2400040c 	.word	0x2400040c

08000ba4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000baa:	f000 fe05 	bl	80017b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bae:	f000 f85d 	bl	8000c6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb2:	f000 f9e7 	bl	8000f84 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bb6:	f000 f9b5 	bl	8000f24 <MX_DMA_Init>
  MX_ETH_Init();
 8000bba:	f000 f8c7 	bl	8000d4c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000bbe:	f000 f95d 	bl	8000e7c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000bc2:	f000 f9a7 	bl	8000f14 <MX_USB_OTG_HS_USB_Init>
  MX_USART2_UART_Init();
 8000bc6:	f000 f90d 	bl	8000de4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  configureDMAforUART2TX();
 8000bca:	f7ff fd99 	bl	8000700 <configureDMAforUART2TX>
  configureDMAforUART2RX();
 8000bce:	f7ff fdcf 	bl	8000770 <configureDMAforUART2RX>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  enableReceiveMessageOnInit();
 8000bd2:	f7ff ff51 	bl	8000a78 <enableReceiveMessageOnInit>
  testSending = testSendingOnInit;
 8000bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c50 <main+0xac>)
 8000bd8:	781a      	ldrb	r2, [r3, #0]
 8000bda:	4b1e      	ldr	r3, [pc, #120]	@ (8000c54 <main+0xb0>)
 8000bdc:	701a      	strb	r2, [r3, #0]

  while (1)
  {
	  processReceivedModbusRequests();
 8000bde:	f7ff ff7b 	bl	8000ad8 <processReceivedModbusRequests>


	  uint32_t currrentMillis = HAL_GetTick();
 8000be2:	f000 fe6f 	bl	80018c4 <HAL_GetTick>
 8000be6:	6078      	str	r0, [r7, #4]

	  if (testSending)
 8000be8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c54 <main+0xb0>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d00e      	beq.n	8000c0e <main+0x6a>
	  {
		  /* Non-blocking Test ms delay */
		  if (currrentMillis - previousMillisTest >= intervalTest)
 8000bf0:	4b19      	ldr	r3, [pc, #100]	@ (8000c58 <main+0xb4>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d306      	bcc.n	8000c0e <main+0x6a>
		  {
			  previousMillisTest = currrentMillis;  /* Update the last tick */
 8000c00:	4a15      	ldr	r2, [pc, #84]	@ (8000c58 <main+0xb4>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6013      	str	r3, [r2, #0]
			  /* Perform an action every 500 ms */

			  modbusResponsePrepareTest();
 8000c06:	f7ff fd1b 	bl	8000640 <modbusResponsePrepareTest>
			  sendPreparedModbusResponse();
 8000c0a:	f7ff fd31 	bl	8000670 <sendPreparedModbusResponse>
		  }

	  }


	  if (greenOn)
 8000c0e:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <main+0xb8>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d00b      	beq.n	8000c2e <main+0x8a>
	  {
		  /* Non-blocking Led Green ms delay */
		  if (currrentMillis - previousMillisLedGreen >= intervalLed)
 8000c16:	4b12      	ldr	r3, [pc, #72]	@ (8000c60 <main+0xbc>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	220a      	movs	r2, #10
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d304      	bcc.n	8000c2e <main+0x8a>
		  {
			  previousMillisLedGreen = currrentMillis;  /* Update the last tick */
 8000c24:	4a0e      	ldr	r2, [pc, #56]	@ (8000c60 <main+0xbc>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6013      	str	r3, [r2, #0]
			  resetGreenLed(); /* turn off led  */
 8000c2a:	f7ff fce7 	bl	80005fc <resetGreenLed>
		  }
	  }

	  if (yellowOn)
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c64 <main+0xc0>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d0d3      	beq.n	8000bde <main+0x3a>
	  {
		  /* Non-blocking Led Yellow ms delay */
		  if (currrentMillis - previousMillisLedYellow >= intervalLed)
 8000c36:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <main+0xc4>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	220a      	movs	r2, #10
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d3cc      	bcc.n	8000bde <main+0x3a>
		  {
			  previousMillisLedYellow = currrentMillis;  /* Update the last tick */
 8000c44:	4a08      	ldr	r2, [pc, #32]	@ (8000c68 <main+0xc4>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6013      	str	r3, [r2, #0]
			  resetYellowLed();  /* turn off led  */
 8000c4a:	f7ff fce9 	bl	8000620 <resetYellowLed>
  {
 8000c4e:	e7c6      	b.n	8000bde <main+0x3a>
 8000c50:	24000000 	.word	0x24000000
 8000c54:	240003f0 	.word	0x240003f0
 8000c58:	24000620 	.word	0x24000620
 8000c5c:	240003f1 	.word	0x240003f1
 8000c60:	24000624 	.word	0x24000624
 8000c64:	240003f2 	.word	0x240003f2
 8000c68:	24000628 	.word	0x24000628

08000c6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b09c      	sub	sp, #112	@ 0x70
 8000c70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c76:	224c      	movs	r2, #76	@ 0x4c
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f008 fc48 	bl	8009510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	2220      	movs	r2, #32
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f008 fc42 	bl	8009510 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c8c:	2002      	movs	r0, #2
 8000c8e:	f004 f93d 	bl	8004f0c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c92:	2300      	movs	r3, #0
 8000c94:	603b      	str	r3, [r7, #0]
 8000c96:	4b2c      	ldr	r3, [pc, #176]	@ (8000d48 <SystemClock_Config+0xdc>)
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	4a2b      	ldr	r2, [pc, #172]	@ (8000d48 <SystemClock_Config+0xdc>)
 8000c9c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ca0:	6193      	str	r3, [r2, #24]
 8000ca2:	4b29      	ldr	r3, [pc, #164]	@ (8000d48 <SystemClock_Config+0xdc>)
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cae:	bf00      	nop
 8000cb0:	4b25      	ldr	r3, [pc, #148]	@ (8000d48 <SystemClock_Config+0xdc>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cbc:	d1f8      	bne.n	8000cb0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000cbe:	2321      	movs	r3, #33	@ 0x21
 8000cc0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cc2:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000cd8:	f240 1313 	movw	r3, #275	@ 0x113
 8000cdc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000cea:	2304      	movs	r3, #4
 8000cec:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f004 f940 	bl	8004f80 <HAL_RCC_OscConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000d06:	f000 fa39 	bl	800117c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0a:	233f      	movs	r3, #63	@ 0x3f
 8000d0c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d16:	2308      	movs	r3, #8
 8000d18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d1a:	2340      	movs	r3, #64	@ 0x40
 8000d1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d1e:	2340      	movs	r3, #64	@ 0x40
 8000d20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d26:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d28:	2340      	movs	r3, #64	@ 0x40
 8000d2a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	2103      	movs	r1, #3
 8000d30:	4618      	mov	r0, r3
 8000d32:	f004 fcff 	bl	8005734 <HAL_RCC_ClockConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000d3c:	f000 fa1e 	bl	800117c <Error_Handler>
  }
}
 8000d40:	bf00      	nop
 8000d42:	3770      	adds	r7, #112	@ 0x70
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	58024800 	.word	0x58024800

08000d4c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000d50:	4b1e      	ldr	r3, [pc, #120]	@ (8000dcc <MX_ETH_Init+0x80>)
 8000d52:	4a1f      	ldr	r2, [pc, #124]	@ (8000dd0 <MX_ETH_Init+0x84>)
 8000d54:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000d56:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd4 <MX_ETH_Init+0x88>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd4 <MX_ETH_Init+0x88>)
 8000d5e:	2280      	movs	r2, #128	@ 0x80
 8000d60:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000d62:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd4 <MX_ETH_Init+0x88>)
 8000d64:	22e1      	movs	r2, #225	@ 0xe1
 8000d66:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000d68:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd4 <MX_ETH_Init+0x88>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000d6e:	4b19      	ldr	r3, [pc, #100]	@ (8000dd4 <MX_ETH_Init+0x88>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000d74:	4b17      	ldr	r3, [pc, #92]	@ (8000dd4 <MX_ETH_Init+0x88>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000d7a:	4b14      	ldr	r3, [pc, #80]	@ (8000dcc <MX_ETH_Init+0x80>)
 8000d7c:	4a15      	ldr	r2, [pc, #84]	@ (8000dd4 <MX_ETH_Init+0x88>)
 8000d7e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d80:	4b12      	ldr	r3, [pc, #72]	@ (8000dcc <MX_ETH_Init+0x80>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d86:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <MX_ETH_Init+0x80>)
 8000d88:	4a13      	ldr	r2, [pc, #76]	@ (8000dd8 <MX_ETH_Init+0x8c>)
 8000d8a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dcc <MX_ETH_Init+0x80>)
 8000d8e:	4a13      	ldr	r2, [pc, #76]	@ (8000ddc <MX_ETH_Init+0x90>)
 8000d90:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d92:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <MX_ETH_Init+0x80>)
 8000d94:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000d98:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d9a:	480c      	ldr	r0, [pc, #48]	@ (8000dcc <MX_ETH_Init+0x80>)
 8000d9c:	f003 fac0 	bl	8004320 <HAL_ETH_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000da6:	f000 f9e9 	bl	800117c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000daa:	2238      	movs	r2, #56	@ 0x38
 8000dac:	2100      	movs	r1, #0
 8000dae:	480c      	ldr	r0, [pc, #48]	@ (8000de0 <MX_ETH_Init+0x94>)
 8000db0:	f008 fbae 	bl	8009510 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000db4:	4b0a      	ldr	r3, [pc, #40]	@ (8000de0 <MX_ETH_Init+0x94>)
 8000db6:	2221      	movs	r2, #33	@ 0x21
 8000db8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000dba:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <MX_ETH_Init+0x94>)
 8000dbc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000dc0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000dc2:	4b07      	ldr	r3, [pc, #28]	@ (8000de0 <MX_ETH_Init+0x94>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	24000128 	.word	0x24000128
 8000dd0:	40028000 	.word	0x40028000
 8000dd4:	2400062c 	.word	0x2400062c
 8000dd8:	24000074 	.word	0x24000074
 8000ddc:	24000014 	.word	0x24000014
 8000de0:	240000f0 	.word	0x240000f0

08000de4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000de8:	4b22      	ldr	r3, [pc, #136]	@ (8000e74 <MX_USART2_UART_Init+0x90>)
 8000dea:	4a23      	ldr	r2, [pc, #140]	@ (8000e78 <MX_USART2_UART_Init+0x94>)
 8000dec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dee:	4b21      	ldr	r3, [pc, #132]	@ (8000e74 <MX_USART2_UART_Init+0x90>)
 8000df0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000df4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000df6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e74 <MX_USART2_UART_Init+0x90>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e74 <MX_USART2_UART_Init+0x90>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e02:	4b1c      	ldr	r3, [pc, #112]	@ (8000e74 <MX_USART2_UART_Init+0x90>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e08:	4b1a      	ldr	r3, [pc, #104]	@ (8000e74 <MX_USART2_UART_Init+0x90>)
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0e:	4b19      	ldr	r3, [pc, #100]	@ (8000e74 <MX_USART2_UART_Init+0x90>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e14:	4b17      	ldr	r3, [pc, #92]	@ (8000e74 <MX_USART2_UART_Init+0x90>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e1a:	4b16      	ldr	r3, [pc, #88]	@ (8000e74 <MX_USART2_UART_Init+0x90>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e20:	4b14      	ldr	r3, [pc, #80]	@ (8000e74 <MX_USART2_UART_Init+0x90>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e26:	4b13      	ldr	r3, [pc, #76]	@ (8000e74 <MX_USART2_UART_Init+0x90>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e2c:	4811      	ldr	r0, [pc, #68]	@ (8000e74 <MX_USART2_UART_Init+0x90>)
 8000e2e:	f006 fdcf 	bl	80079d0 <HAL_UART_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e38:	f000 f9a0 	bl	800117c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	480d      	ldr	r0, [pc, #52]	@ (8000e74 <MX_USART2_UART_Init+0x90>)
 8000e40:	f008 fa9b 	bl	800937a <HAL_UARTEx_SetTxFifoThreshold>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e4a:	f000 f997 	bl	800117c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4808      	ldr	r0, [pc, #32]	@ (8000e74 <MX_USART2_UART_Init+0x90>)
 8000e52:	f008 fad0 	bl	80093f6 <HAL_UARTEx_SetRxFifoThreshold>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000e5c:	f000 f98e 	bl	800117c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e60:	4804      	ldr	r0, [pc, #16]	@ (8000e74 <MX_USART2_UART_Init+0x90>)
 8000e62:	f008 fa51 	bl	8009308 <HAL_UARTEx_DisableFifoMode>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000e6c:	f000 f986 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	240001d8 	.word	0x240001d8
 8000e78:	40004400 	.word	0x40004400

08000e7c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e80:	4b22      	ldr	r3, [pc, #136]	@ (8000f0c <MX_USART3_UART_Init+0x90>)
 8000e82:	4a23      	ldr	r2, [pc, #140]	@ (8000f10 <MX_USART3_UART_Init+0x94>)
 8000e84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e86:	4b21      	ldr	r3, [pc, #132]	@ (8000f0c <MX_USART3_UART_Init+0x90>)
 8000e88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000f0c <MX_USART3_UART_Init+0x90>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e94:	4b1d      	ldr	r3, [pc, #116]	@ (8000f0c <MX_USART3_UART_Init+0x90>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000f0c <MX_USART3_UART_Init+0x90>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ea0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f0c <MX_USART3_UART_Init+0x90>)
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ea6:	4b19      	ldr	r3, [pc, #100]	@ (8000f0c <MX_USART3_UART_Init+0x90>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eac:	4b17      	ldr	r3, [pc, #92]	@ (8000f0c <MX_USART3_UART_Init+0x90>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eb2:	4b16      	ldr	r3, [pc, #88]	@ (8000f0c <MX_USART3_UART_Init+0x90>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000eb8:	4b14      	ldr	r3, [pc, #80]	@ (8000f0c <MX_USART3_UART_Init+0x90>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ebe:	4b13      	ldr	r3, [pc, #76]	@ (8000f0c <MX_USART3_UART_Init+0x90>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ec4:	4811      	ldr	r0, [pc, #68]	@ (8000f0c <MX_USART3_UART_Init+0x90>)
 8000ec6:	f006 fd83 	bl	80079d0 <HAL_UART_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ed0:	f000 f954 	bl	800117c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	480d      	ldr	r0, [pc, #52]	@ (8000f0c <MX_USART3_UART_Init+0x90>)
 8000ed8:	f008 fa4f 	bl	800937a <HAL_UARTEx_SetTxFifoThreshold>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ee2:	f000 f94b 	bl	800117c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4808      	ldr	r0, [pc, #32]	@ (8000f0c <MX_USART3_UART_Init+0x90>)
 8000eea:	f008 fa84 	bl	80093f6 <HAL_UARTEx_SetRxFifoThreshold>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ef4:	f000 f942 	bl	800117c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ef8:	4804      	ldr	r0, [pc, #16]	@ (8000f0c <MX_USART3_UART_Init+0x90>)
 8000efa:	f008 fa05 	bl	8009308 <HAL_UARTEx_DisableFifoMode>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f04:	f000 f93a 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	2400026c 	.word	0x2400026c
 8000f10:	40004800 	.word	0x40004800

08000f14 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
	...

08000f24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f2a:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <MX_DMA_Init+0x5c>)
 8000f2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f30:	4a13      	ldr	r2, [pc, #76]	@ (8000f80 <MX_DMA_Init+0x5c>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f3a:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <MX_DMA_Init+0x5c>)
 8000f3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	200b      	movs	r0, #11
 8000f4e:	f000 fdb4 	bl	8001aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f52:	200b      	movs	r0, #11
 8000f54:	f000 fdcb 	bl	8001aee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	200c      	movs	r0, #12
 8000f5e:	f000 fdac 	bl	8001aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f62:	200c      	movs	r0, #12
 8000f64:	f000 fdc3 	bl	8001aee <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	2066      	movs	r0, #102	@ 0x66
 8000f6e:	f000 fda4 	bl	8001aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8000f72:	2066      	movs	r0, #102	@ 0x66
 8000f74:	f000 fdbb 	bl	8001aee <HAL_NVIC_EnableIRQ>

}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	58024400 	.word	0x58024400

08000f84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08c      	sub	sp, #48	@ 0x30
 8000f88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	f107 031c 	add.w	r3, r7, #28
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9a:	4b71      	ldr	r3, [pc, #452]	@ (8001160 <MX_GPIO_Init+0x1dc>)
 8000f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa0:	4a6f      	ldr	r2, [pc, #444]	@ (8001160 <MX_GPIO_Init+0x1dc>)
 8000fa2:	f043 0304 	orr.w	r3, r3, #4
 8000fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000faa:	4b6d      	ldr	r3, [pc, #436]	@ (8001160 <MX_GPIO_Init+0x1dc>)
 8000fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb0:	f003 0304 	and.w	r3, r3, #4
 8000fb4:	61bb      	str	r3, [r7, #24]
 8000fb6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fb8:	4b69      	ldr	r3, [pc, #420]	@ (8001160 <MX_GPIO_Init+0x1dc>)
 8000fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fbe:	4a68      	ldr	r2, [pc, #416]	@ (8001160 <MX_GPIO_Init+0x1dc>)
 8000fc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fc8:	4b65      	ldr	r3, [pc, #404]	@ (8001160 <MX_GPIO_Init+0x1dc>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	4b62      	ldr	r3, [pc, #392]	@ (8001160 <MX_GPIO_Init+0x1dc>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fdc:	4a60      	ldr	r2, [pc, #384]	@ (8001160 <MX_GPIO_Init+0x1dc>)
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fe6:	4b5e      	ldr	r3, [pc, #376]	@ (8001160 <MX_GPIO_Init+0x1dc>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff4:	4b5a      	ldr	r3, [pc, #360]	@ (8001160 <MX_GPIO_Init+0x1dc>)
 8000ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ffa:	4a59      	ldr	r2, [pc, #356]	@ (8001160 <MX_GPIO_Init+0x1dc>)
 8000ffc:	f043 0302 	orr.w	r3, r3, #2
 8001000:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001004:	4b56      	ldr	r3, [pc, #344]	@ (8001160 <MX_GPIO_Init+0x1dc>)
 8001006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001012:	4b53      	ldr	r3, [pc, #332]	@ (8001160 <MX_GPIO_Init+0x1dc>)
 8001014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001018:	4a51      	ldr	r2, [pc, #324]	@ (8001160 <MX_GPIO_Init+0x1dc>)
 800101a:	f043 0308 	orr.w	r3, r3, #8
 800101e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001022:	4b4f      	ldr	r3, [pc, #316]	@ (8001160 <MX_GPIO_Init+0x1dc>)
 8001024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001028:	f003 0308 	and.w	r3, r3, #8
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001030:	4b4b      	ldr	r3, [pc, #300]	@ (8001160 <MX_GPIO_Init+0x1dc>)
 8001032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001036:	4a4a      	ldr	r2, [pc, #296]	@ (8001160 <MX_GPIO_Init+0x1dc>)
 8001038:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800103c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001040:	4b47      	ldr	r3, [pc, #284]	@ (8001160 <MX_GPIO_Init+0x1dc>)
 8001042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800104e:	4b44      	ldr	r3, [pc, #272]	@ (8001160 <MX_GPIO_Init+0x1dc>)
 8001050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001054:	4a42      	ldr	r2, [pc, #264]	@ (8001160 <MX_GPIO_Init+0x1dc>)
 8001056:	f043 0310 	orr.w	r3, r3, #16
 800105a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800105e:	4b40      	ldr	r3, [pc, #256]	@ (8001160 <MX_GPIO_Init+0x1dc>)
 8001060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001064:	f003 0310 	and.w	r3, r3, #16
 8001068:	603b      	str	r3, [r7, #0]
 800106a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	f244 0101 	movw	r1, #16385	@ 0x4001
 8001072:	483c      	ldr	r0, [pc, #240]	@ (8001164 <MX_GPIO_Init+0x1e0>)
 8001074:	f003 ff30 	bl	8004ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800107e:	483a      	ldr	r0, [pc, #232]	@ (8001168 <MX_GPIO_Init+0x1e4>)
 8001080:	f003 ff2a 	bl	8004ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	2102      	movs	r1, #2
 8001088:	4838      	ldr	r0, [pc, #224]	@ (800116c <MX_GPIO_Init+0x1e8>)
 800108a:	f003 ff25 	bl	8004ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800108e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001094:	2300      	movs	r3, #0
 8001096:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	4619      	mov	r1, r3
 80010a2:	4833      	ldr	r0, [pc, #204]	@ (8001170 <MX_GPIO_Init+0x1ec>)
 80010a4:	f003 fd70 	bl	8004b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80010a8:	f244 0301 	movw	r3, #16385	@ 0x4001
 80010ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ba:	f107 031c 	add.w	r3, r7, #28
 80010be:	4619      	mov	r1, r3
 80010c0:	4828      	ldr	r0, [pc, #160]	@ (8001164 <MX_GPIO_Init+0x1e0>)
 80010c2:	f003 fd61 	bl	8004b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80010c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 031c 	add.w	r3, r7, #28
 80010dc:	4619      	mov	r1, r3
 80010de:	4822      	ldr	r0, [pc, #136]	@ (8001168 <MX_GPIO_Init+0x1e4>)
 80010e0:	f003 fd52 	bl	8004b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80010e4:	2380      	movs	r3, #128	@ 0x80
 80010e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010e8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	4619      	mov	r1, r3
 80010f8:	481e      	ldr	r0, [pc, #120]	@ (8001174 <MX_GPIO_Init+0x1f0>)
 80010fa:	f003 fd45 	bl	8004b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80010fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001102:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	4619      	mov	r1, r3
 8001112:	4819      	ldr	r0, [pc, #100]	@ (8001178 <MX_GPIO_Init+0x1f4>)
 8001114:	f003 fd38 	bl	8004b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001118:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800111c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800112a:	230a      	movs	r3, #10
 800112c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	4619      	mov	r1, r3
 8001134:	4810      	ldr	r0, [pc, #64]	@ (8001178 <MX_GPIO_Init+0x1f4>)
 8001136:	f003 fd27 	bl	8004b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 800113a:	2302      	movs	r3, #2
 800113c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113e:	2301      	movs	r3, #1
 8001140:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 800114a:	f107 031c 	add.w	r3, r7, #28
 800114e:	4619      	mov	r1, r3
 8001150:	4806      	ldr	r0, [pc, #24]	@ (800116c <MX_GPIO_Init+0x1e8>)
 8001152:	f003 fd19 	bl	8004b88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001156:	bf00      	nop
 8001158:	3730      	adds	r7, #48	@ 0x30
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	58024400 	.word	0x58024400
 8001164:	58020400 	.word	0x58020400
 8001168:	58020c00 	.word	0x58020c00
 800116c:	58021000 	.word	0x58021000
 8001170:	58020800 	.word	0x58020800
 8001174:	58021800 	.word	0x58021800
 8001178:	58020000 	.word	0x58020000

0800117c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001180:	b672      	cpsid	i
}
 8001182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <Error_Handler+0x8>

08001188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118e:	4b0a      	ldr	r3, [pc, #40]	@ (80011b8 <HAL_MspInit+0x30>)
 8001190:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001194:	4a08      	ldr	r2, [pc, #32]	@ (80011b8 <HAL_MspInit+0x30>)
 8001196:	f043 0302 	orr.w	r3, r3, #2
 800119a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800119e:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <HAL_MspInit+0x30>)
 80011a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	58024400 	.word	0x58024400

080011bc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08e      	sub	sp, #56	@ 0x38
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a59      	ldr	r2, [pc, #356]	@ (8001340 <HAL_ETH_MspInit+0x184>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	f040 80ab 	bne.w	8001336 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80011e0:	4b58      	ldr	r3, [pc, #352]	@ (8001344 <HAL_ETH_MspInit+0x188>)
 80011e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011e6:	4a57      	ldr	r2, [pc, #348]	@ (8001344 <HAL_ETH_MspInit+0x188>)
 80011e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011ec:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80011f0:	4b54      	ldr	r3, [pc, #336]	@ (8001344 <HAL_ETH_MspInit+0x188>)
 80011f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011fa:	623b      	str	r3, [r7, #32]
 80011fc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80011fe:	4b51      	ldr	r3, [pc, #324]	@ (8001344 <HAL_ETH_MspInit+0x188>)
 8001200:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001204:	4a4f      	ldr	r2, [pc, #316]	@ (8001344 <HAL_ETH_MspInit+0x188>)
 8001206:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800120a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800120e:	4b4d      	ldr	r3, [pc, #308]	@ (8001344 <HAL_ETH_MspInit+0x188>)
 8001210:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001214:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001218:	61fb      	str	r3, [r7, #28]
 800121a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800121c:	4b49      	ldr	r3, [pc, #292]	@ (8001344 <HAL_ETH_MspInit+0x188>)
 800121e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001222:	4a48      	ldr	r2, [pc, #288]	@ (8001344 <HAL_ETH_MspInit+0x188>)
 8001224:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001228:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800122c:	4b45      	ldr	r3, [pc, #276]	@ (8001344 <HAL_ETH_MspInit+0x188>)
 800122e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001236:	61bb      	str	r3, [r7, #24]
 8001238:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800123a:	4b42      	ldr	r3, [pc, #264]	@ (8001344 <HAL_ETH_MspInit+0x188>)
 800123c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001240:	4a40      	ldr	r2, [pc, #256]	@ (8001344 <HAL_ETH_MspInit+0x188>)
 8001242:	f043 0304 	orr.w	r3, r3, #4
 8001246:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800124a:	4b3e      	ldr	r3, [pc, #248]	@ (8001344 <HAL_ETH_MspInit+0x188>)
 800124c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001258:	4b3a      	ldr	r3, [pc, #232]	@ (8001344 <HAL_ETH_MspInit+0x188>)
 800125a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800125e:	4a39      	ldr	r2, [pc, #228]	@ (8001344 <HAL_ETH_MspInit+0x188>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001268:	4b36      	ldr	r3, [pc, #216]	@ (8001344 <HAL_ETH_MspInit+0x188>)
 800126a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001276:	4b33      	ldr	r3, [pc, #204]	@ (8001344 <HAL_ETH_MspInit+0x188>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800127c:	4a31      	ldr	r2, [pc, #196]	@ (8001344 <HAL_ETH_MspInit+0x188>)
 800127e:	f043 0302 	orr.w	r3, r3, #2
 8001282:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001286:	4b2f      	ldr	r3, [pc, #188]	@ (8001344 <HAL_ETH_MspInit+0x188>)
 8001288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001294:	4b2b      	ldr	r3, [pc, #172]	@ (8001344 <HAL_ETH_MspInit+0x188>)
 8001296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800129a:	4a2a      	ldr	r2, [pc, #168]	@ (8001344 <HAL_ETH_MspInit+0x188>)
 800129c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012a4:	4b27      	ldr	r3, [pc, #156]	@ (8001344 <HAL_ETH_MspInit+0x188>)
 80012a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80012b2:	2332      	movs	r3, #50	@ 0x32
 80012b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012c2:	230b      	movs	r3, #11
 80012c4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ca:	4619      	mov	r1, r3
 80012cc:	481e      	ldr	r0, [pc, #120]	@ (8001348 <HAL_ETH_MspInit+0x18c>)
 80012ce:	f003 fc5b 	bl	8004b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80012d2:	2386      	movs	r3, #134	@ 0x86
 80012d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012e2:	230b      	movs	r3, #11
 80012e4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ea:	4619      	mov	r1, r3
 80012ec:	4817      	ldr	r0, [pc, #92]	@ (800134c <HAL_ETH_MspInit+0x190>)
 80012ee:	f003 fc4b 	bl	8004b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80012f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001304:	230b      	movs	r3, #11
 8001306:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001308:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800130c:	4619      	mov	r1, r3
 800130e:	4810      	ldr	r0, [pc, #64]	@ (8001350 <HAL_ETH_MspInit+0x194>)
 8001310:	f003 fc3a 	bl	8004b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001314:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001318:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001326:	230b      	movs	r3, #11
 8001328:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800132a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800132e:	4619      	mov	r1, r3
 8001330:	4808      	ldr	r0, [pc, #32]	@ (8001354 <HAL_ETH_MspInit+0x198>)
 8001332:	f003 fc29 	bl	8004b88 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8001336:	bf00      	nop
 8001338:	3738      	adds	r7, #56	@ 0x38
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40028000 	.word	0x40028000
 8001344:	58024400 	.word	0x58024400
 8001348:	58020800 	.word	0x58020800
 800134c:	58020000 	.word	0x58020000
 8001350:	58020400 	.word	0x58020400
 8001354:	58021800 	.word	0x58021800

08001358 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b0bc      	sub	sp, #240	@ 0xf0
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001370:	f107 0320 	add.w	r3, r7, #32
 8001374:	22b8      	movs	r2, #184	@ 0xb8
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f008 f8c9 	bl	8009510 <memset>
  if(huart->Instance==USART2)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a8d      	ldr	r2, [pc, #564]	@ (80015b8 <HAL_UART_MspInit+0x260>)
 8001384:	4293      	cmp	r3, r2
 8001386:	f040 80c6 	bne.w	8001516 <HAL_UART_MspInit+0x1be>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800138a:	f04f 0202 	mov.w	r2, #2
 800138e:	f04f 0300 	mov.w	r3, #0
 8001392:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001396:	2300      	movs	r3, #0
 8001398:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800139c:	f107 0320 	add.w	r3, r7, #32
 80013a0:	4618      	mov	r0, r3
 80013a2:	f004 fd53 	bl	8005e4c <HAL_RCCEx_PeriphCLKConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80013ac:	f7ff fee6 	bl	800117c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013b0:	4b82      	ldr	r3, [pc, #520]	@ (80015bc <HAL_UART_MspInit+0x264>)
 80013b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013b6:	4a81      	ldr	r2, [pc, #516]	@ (80015bc <HAL_UART_MspInit+0x264>)
 80013b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013c0:	4b7e      	ldr	r3, [pc, #504]	@ (80015bc <HAL_UART_MspInit+0x264>)
 80013c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ca:	61fb      	str	r3, [r7, #28]
 80013cc:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	4b7b      	ldr	r3, [pc, #492]	@ (80015bc <HAL_UART_MspInit+0x264>)
 80013d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d4:	4a79      	ldr	r2, [pc, #484]	@ (80015bc <HAL_UART_MspInit+0x264>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013de:	4b77      	ldr	r3, [pc, #476]	@ (80015bc <HAL_UART_MspInit+0x264>)
 80013e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	61bb      	str	r3, [r7, #24]
 80013ea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ec:	4b73      	ldr	r3, [pc, #460]	@ (80015bc <HAL_UART_MspInit+0x264>)
 80013ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f2:	4a72      	ldr	r2, [pc, #456]	@ (80015bc <HAL_UART_MspInit+0x264>)
 80013f4:	f043 0308 	orr.w	r3, r3, #8
 80013f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013fc:	4b6f      	ldr	r3, [pc, #444]	@ (80015bc <HAL_UART_MspInit+0x264>)
 80013fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001402:	f003 0308 	and.w	r3, r3, #8
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800140a:	2308      	movs	r3, #8
 800140c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	2302      	movs	r3, #2
 8001412:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001422:	2307      	movs	r3, #7
 8001424:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001428:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800142c:	4619      	mov	r1, r3
 800142e:	4864      	ldr	r0, [pc, #400]	@ (80015c0 <HAL_UART_MspInit+0x268>)
 8001430:	f003 fbaa 	bl	8004b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001434:	2320      	movs	r3, #32
 8001436:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001446:	2300      	movs	r3, #0
 8001448:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800144c:	2307      	movs	r3, #7
 800144e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001452:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001456:	4619      	mov	r1, r3
 8001458:	485a      	ldr	r0, [pc, #360]	@ (80015c4 <HAL_UART_MspInit+0x26c>)
 800145a:	f003 fb95 	bl	8004b88 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream0;
 800145e:	4b5a      	ldr	r3, [pc, #360]	@ (80015c8 <HAL_UART_MspInit+0x270>)
 8001460:	4a5a      	ldr	r2, [pc, #360]	@ (80015cc <HAL_UART_MspInit+0x274>)
 8001462:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001464:	4b58      	ldr	r3, [pc, #352]	@ (80015c8 <HAL_UART_MspInit+0x270>)
 8001466:	222c      	movs	r2, #44	@ 0x2c
 8001468:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800146a:	4b57      	ldr	r3, [pc, #348]	@ (80015c8 <HAL_UART_MspInit+0x270>)
 800146c:	2240      	movs	r2, #64	@ 0x40
 800146e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001470:	4b55      	ldr	r3, [pc, #340]	@ (80015c8 <HAL_UART_MspInit+0x270>)
 8001472:	2200      	movs	r2, #0
 8001474:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001476:	4b54      	ldr	r3, [pc, #336]	@ (80015c8 <HAL_UART_MspInit+0x270>)
 8001478:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800147c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800147e:	4b52      	ldr	r3, [pc, #328]	@ (80015c8 <HAL_UART_MspInit+0x270>)
 8001480:	2200      	movs	r2, #0
 8001482:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001484:	4b50      	ldr	r3, [pc, #320]	@ (80015c8 <HAL_UART_MspInit+0x270>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800148a:	4b4f      	ldr	r3, [pc, #316]	@ (80015c8 <HAL_UART_MspInit+0x270>)
 800148c:	2200      	movs	r2, #0
 800148e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001490:	4b4d      	ldr	r3, [pc, #308]	@ (80015c8 <HAL_UART_MspInit+0x270>)
 8001492:	2200      	movs	r2, #0
 8001494:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001496:	4b4c      	ldr	r3, [pc, #304]	@ (80015c8 <HAL_UART_MspInit+0x270>)
 8001498:	2200      	movs	r2, #0
 800149a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800149c:	484a      	ldr	r0, [pc, #296]	@ (80015c8 <HAL_UART_MspInit+0x270>)
 800149e:	f000 fb41 	bl	8001b24 <HAL_DMA_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 80014a8:	f7ff fe68 	bl	800117c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a46      	ldr	r2, [pc, #280]	@ (80015c8 <HAL_UART_MspInit+0x270>)
 80014b0:	67da      	str	r2, [r3, #124]	@ 0x7c
 80014b2:	4a45      	ldr	r2, [pc, #276]	@ (80015c8 <HAL_UART_MspInit+0x270>)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream1;
 80014b8:	4b45      	ldr	r3, [pc, #276]	@ (80015d0 <HAL_UART_MspInit+0x278>)
 80014ba:	4a46      	ldr	r2, [pc, #280]	@ (80015d4 <HAL_UART_MspInit+0x27c>)
 80014bc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80014be:	4b44      	ldr	r3, [pc, #272]	@ (80015d0 <HAL_UART_MspInit+0x278>)
 80014c0:	222b      	movs	r2, #43	@ 0x2b
 80014c2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014c4:	4b42      	ldr	r3, [pc, #264]	@ (80015d0 <HAL_UART_MspInit+0x278>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ca:	4b41      	ldr	r3, [pc, #260]	@ (80015d0 <HAL_UART_MspInit+0x278>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014d0:	4b3f      	ldr	r3, [pc, #252]	@ (80015d0 <HAL_UART_MspInit+0x278>)
 80014d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014d6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014d8:	4b3d      	ldr	r3, [pc, #244]	@ (80015d0 <HAL_UART_MspInit+0x278>)
 80014da:	2200      	movs	r2, #0
 80014dc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014de:	4b3c      	ldr	r3, [pc, #240]	@ (80015d0 <HAL_UART_MspInit+0x278>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80014e4:	4b3a      	ldr	r3, [pc, #232]	@ (80015d0 <HAL_UART_MspInit+0x278>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014ea:	4b39      	ldr	r3, [pc, #228]	@ (80015d0 <HAL_UART_MspInit+0x278>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014f0:	4b37      	ldr	r3, [pc, #220]	@ (80015d0 <HAL_UART_MspInit+0x278>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80014f6:	4836      	ldr	r0, [pc, #216]	@ (80015d0 <HAL_UART_MspInit+0x278>)
 80014f8:	f000 fb14 	bl	8001b24 <HAL_DMA_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <HAL_UART_MspInit+0x1ae>
    {
      Error_Handler();
 8001502:	f7ff fe3b 	bl	800117c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a31      	ldr	r2, [pc, #196]	@ (80015d0 <HAL_UART_MspInit+0x278>)
 800150a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800150e:	4a30      	ldr	r2, [pc, #192]	@ (80015d0 <HAL_UART_MspInit+0x278>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001514:	e04b      	b.n	80015ae <HAL_UART_MspInit+0x256>
  else if(huart->Instance==USART3)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a2f      	ldr	r2, [pc, #188]	@ (80015d8 <HAL_UART_MspInit+0x280>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d146      	bne.n	80015ae <HAL_UART_MspInit+0x256>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001520:	f04f 0202 	mov.w	r2, #2
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800152c:	2300      	movs	r3, #0
 800152e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001532:	f107 0320 	add.w	r3, r7, #32
 8001536:	4618      	mov	r0, r3
 8001538:	f004 fc88 	bl	8005e4c <HAL_RCCEx_PeriphCLKConfig>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_UART_MspInit+0x1ee>
      Error_Handler();
 8001542:	f7ff fe1b 	bl	800117c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001546:	4b1d      	ldr	r3, [pc, #116]	@ (80015bc <HAL_UART_MspInit+0x264>)
 8001548:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800154c:	4a1b      	ldr	r2, [pc, #108]	@ (80015bc <HAL_UART_MspInit+0x264>)
 800154e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001552:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001556:	4b19      	ldr	r3, [pc, #100]	@ (80015bc <HAL_UART_MspInit+0x264>)
 8001558:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800155c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001564:	4b15      	ldr	r3, [pc, #84]	@ (80015bc <HAL_UART_MspInit+0x264>)
 8001566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800156a:	4a14      	ldr	r2, [pc, #80]	@ (80015bc <HAL_UART_MspInit+0x264>)
 800156c:	f043 0308 	orr.w	r3, r3, #8
 8001570:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001574:	4b11      	ldr	r3, [pc, #68]	@ (80015bc <HAL_UART_MspInit+0x264>)
 8001576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001582:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001586:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800159c:	2307      	movs	r3, #7
 800159e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015a6:	4619      	mov	r1, r3
 80015a8:	4806      	ldr	r0, [pc, #24]	@ (80015c4 <HAL_UART_MspInit+0x26c>)
 80015aa:	f003 faed 	bl	8004b88 <HAL_GPIO_Init>
}
 80015ae:	bf00      	nop
 80015b0:	37f0      	adds	r7, #240	@ 0xf0
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40004400 	.word	0x40004400
 80015bc:	58024400 	.word	0x58024400
 80015c0:	58020000 	.word	0x58020000
 80015c4:	58020c00 	.word	0x58020c00
 80015c8:	24000300 	.word	0x24000300
 80015cc:	40020010 	.word	0x40020010
 80015d0:	24000378 	.word	0x24000378
 80015d4:	40020028 	.word	0x40020028
 80015d8:	40004800 	.word	0x40004800

080015dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <NMI_Handler+0x4>

080015e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <HardFault_Handler+0x4>

080015ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <MemManage_Handler+0x4>

080015f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <BusFault_Handler+0x4>

080015fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <UsageFault_Handler+0x4>

08001604 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001632:	f000 f933 	bl	800189c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001640:	4802      	ldr	r0, [pc, #8]	@ (800164c <DMA1_Stream0_IRQHandler+0x10>)
 8001642:	f001 fb4f 	bl	8002ce4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	24000300 	.word	0x24000300

08001650 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001654:	4802      	ldr	r0, [pc, #8]	@ (8001660 <DMA1_Stream1_IRQHandler+0x10>)
 8001656:	f001 fb45 	bl	8002ce4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	24000378 	.word	0x24000378

08001664 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX1_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
	...

08001674 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001678:	4b32      	ldr	r3, [pc, #200]	@ (8001744 <SystemInit+0xd0>)
 800167a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800167e:	4a31      	ldr	r2, [pc, #196]	@ (8001744 <SystemInit+0xd0>)
 8001680:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001684:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001688:	4b2f      	ldr	r3, [pc, #188]	@ (8001748 <SystemInit+0xd4>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 030f 	and.w	r3, r3, #15
 8001690:	2b06      	cmp	r3, #6
 8001692:	d807      	bhi.n	80016a4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001694:	4b2c      	ldr	r3, [pc, #176]	@ (8001748 <SystemInit+0xd4>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f023 030f 	bic.w	r3, r3, #15
 800169c:	4a2a      	ldr	r2, [pc, #168]	@ (8001748 <SystemInit+0xd4>)
 800169e:	f043 0307 	orr.w	r3, r3, #7
 80016a2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016a4:	4b29      	ldr	r3, [pc, #164]	@ (800174c <SystemInit+0xd8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a28      	ldr	r2, [pc, #160]	@ (800174c <SystemInit+0xd8>)
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016b0:	4b26      	ldr	r3, [pc, #152]	@ (800174c <SystemInit+0xd8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80016b6:	4b25      	ldr	r3, [pc, #148]	@ (800174c <SystemInit+0xd8>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	4924      	ldr	r1, [pc, #144]	@ (800174c <SystemInit+0xd8>)
 80016bc:	4b24      	ldr	r3, [pc, #144]	@ (8001750 <SystemInit+0xdc>)
 80016be:	4013      	ands	r3, r2
 80016c0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016c2:	4b21      	ldr	r3, [pc, #132]	@ (8001748 <SystemInit+0xd4>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d007      	beq.n	80016de <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001748 <SystemInit+0xd4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f023 030f 	bic.w	r3, r3, #15
 80016d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001748 <SystemInit+0xd4>)
 80016d8:	f043 0307 	orr.w	r3, r3, #7
 80016dc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80016de:	4b1b      	ldr	r3, [pc, #108]	@ (800174c <SystemInit+0xd8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80016e4:	4b19      	ldr	r3, [pc, #100]	@ (800174c <SystemInit+0xd8>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80016ea:	4b18      	ldr	r3, [pc, #96]	@ (800174c <SystemInit+0xd8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80016f0:	4b16      	ldr	r3, [pc, #88]	@ (800174c <SystemInit+0xd8>)
 80016f2:	4a18      	ldr	r2, [pc, #96]	@ (8001754 <SystemInit+0xe0>)
 80016f4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80016f6:	4b15      	ldr	r3, [pc, #84]	@ (800174c <SystemInit+0xd8>)
 80016f8:	4a17      	ldr	r2, [pc, #92]	@ (8001758 <SystemInit+0xe4>)
 80016fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80016fc:	4b13      	ldr	r3, [pc, #76]	@ (800174c <SystemInit+0xd8>)
 80016fe:	4a17      	ldr	r2, [pc, #92]	@ (800175c <SystemInit+0xe8>)
 8001700:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001702:	4b12      	ldr	r3, [pc, #72]	@ (800174c <SystemInit+0xd8>)
 8001704:	2200      	movs	r2, #0
 8001706:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001708:	4b10      	ldr	r3, [pc, #64]	@ (800174c <SystemInit+0xd8>)
 800170a:	4a14      	ldr	r2, [pc, #80]	@ (800175c <SystemInit+0xe8>)
 800170c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800170e:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <SystemInit+0xd8>)
 8001710:	2200      	movs	r2, #0
 8001712:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001714:	4b0d      	ldr	r3, [pc, #52]	@ (800174c <SystemInit+0xd8>)
 8001716:	4a11      	ldr	r2, [pc, #68]	@ (800175c <SystemInit+0xe8>)
 8001718:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800171a:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <SystemInit+0xd8>)
 800171c:	2200      	movs	r2, #0
 800171e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001720:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <SystemInit+0xd8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a09      	ldr	r2, [pc, #36]	@ (800174c <SystemInit+0xd8>)
 8001726:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800172a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800172c:	4b07      	ldr	r3, [pc, #28]	@ (800174c <SystemInit+0xd8>)
 800172e:	2200      	movs	r2, #0
 8001730:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001732:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <SystemInit+0xec>)
 8001734:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001738:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000ed00 	.word	0xe000ed00
 8001748:	52002000 	.word	0x52002000
 800174c:	58024400 	.word	0x58024400
 8001750:	eaf6ed7f 	.word	0xeaf6ed7f
 8001754:	02020200 	.word	0x02020200
 8001758:	01ff0000 	.word	0x01ff0000
 800175c:	01010280 	.word	0x01010280
 8001760:	52004000 	.word	0x52004000

08001764 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001764:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800179c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001768:	f7ff ff84 	bl	8001674 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800176c:	480c      	ldr	r0, [pc, #48]	@ (80017a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800176e:	490d      	ldr	r1, [pc, #52]	@ (80017a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001770:	4a0d      	ldr	r2, [pc, #52]	@ (80017a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001774:	e002      	b.n	800177c <LoopCopyDataInit>

08001776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800177a:	3304      	adds	r3, #4

0800177c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800177c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800177e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001780:	d3f9      	bcc.n	8001776 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001782:	4a0a      	ldr	r2, [pc, #40]	@ (80017ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001784:	4c0a      	ldr	r4, [pc, #40]	@ (80017b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001788:	e001      	b.n	800178e <LoopFillZerobss>

0800178a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800178a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800178c:	3204      	adds	r2, #4

0800178e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800178e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001790:	d3fb      	bcc.n	800178a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001792:	f007 fec5 	bl	8009520 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001796:	f7ff fa05 	bl	8000ba4 <main>
  bx  lr
 800179a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800179c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80017a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017a4:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80017a8:	080095f4 	.word	0x080095f4
  ldr r2, =_sbss
 80017ac:	240000d4 	.word	0x240000d4
  ldr r4, =_ebss
 80017b0:	24000638 	.word	0x24000638

080017b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017b4:	e7fe      	b.n	80017b4 <ADC3_IRQHandler>
	...

080017b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017be:	2003      	movs	r0, #3
 80017c0:	f000 f970 	bl	8001aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017c4:	f004 f96c 	bl	8005aa0 <HAL_RCC_GetSysClockFreq>
 80017c8:	4602      	mov	r2, r0
 80017ca:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <HAL_Init+0x68>)
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	0a1b      	lsrs	r3, r3, #8
 80017d0:	f003 030f 	and.w	r3, r3, #15
 80017d4:	4913      	ldr	r1, [pc, #76]	@ (8001824 <HAL_Init+0x6c>)
 80017d6:	5ccb      	ldrb	r3, [r1, r3]
 80017d8:	f003 031f 	and.w	r3, r3, #31
 80017dc:	fa22 f303 	lsr.w	r3, r2, r3
 80017e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001820 <HAL_Init+0x68>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001824 <HAL_Init+0x6c>)
 80017ec:	5cd3      	ldrb	r3, [r2, r3]
 80017ee:	f003 031f 	and.w	r3, r3, #31
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	fa22 f303 	lsr.w	r3, r2, r3
 80017f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001828 <HAL_Init+0x70>)
 80017fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017fc:	4a0b      	ldr	r2, [pc, #44]	@ (800182c <HAL_Init+0x74>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001802:	2000      	movs	r0, #0
 8001804:	f000 f814 	bl	8001830 <HAL_InitTick>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e002      	b.n	8001818 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001812:	f7ff fcb9 	bl	8001188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	58024400 	.word	0x58024400
 8001824:	080095a4 	.word	0x080095a4
 8001828:	24000008 	.word	0x24000008
 800182c:	24000004 	.word	0x24000004

08001830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001838:	4b15      	ldr	r3, [pc, #84]	@ (8001890 <HAL_InitTick+0x60>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e021      	b.n	8001888 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001844:	4b13      	ldr	r3, [pc, #76]	@ (8001894 <HAL_InitTick+0x64>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <HAL_InitTick+0x60>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001852:	fbb3 f3f1 	udiv	r3, r3, r1
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f955 	bl	8001b0a <HAL_SYSTICK_Config>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e00e      	b.n	8001888 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b0f      	cmp	r3, #15
 800186e:	d80a      	bhi.n	8001886 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001870:	2200      	movs	r2, #0
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	f04f 30ff 	mov.w	r0, #4294967295
 8001878:	f000 f91f 	bl	8001aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800187c:	4a06      	ldr	r2, [pc, #24]	@ (8001898 <HAL_InitTick+0x68>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	e000      	b.n	8001888 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	24000010 	.word	0x24000010
 8001894:	24000004 	.word	0x24000004
 8001898:	2400000c 	.word	0x2400000c

0800189c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018a0:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <HAL_IncTick+0x20>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_IncTick+0x24>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	4a04      	ldr	r2, [pc, #16]	@ (80018c0 <HAL_IncTick+0x24>)
 80018ae:	6013      	str	r3, [r2, #0]
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	24000010 	.word	0x24000010
 80018c0:	24000634 	.word	0x24000634

080018c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return uwTick;
 80018c8:	4b03      	ldr	r3, [pc, #12]	@ (80018d8 <HAL_GetTick+0x14>)
 80018ca:	681b      	ldr	r3, [r3, #0]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	24000634 	.word	0x24000634

080018dc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80018e4:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80018ec:	4904      	ldr	r1, [pc, #16]	@ (8001900 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	604b      	str	r3, [r1, #4]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	58000400 	.word	0x58000400

08001904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001914:	4b0b      	ldr	r3, [pc, #44]	@ (8001944 <__NVIC_SetPriorityGrouping+0x40>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001920:	4013      	ands	r3, r2
 8001922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800192c:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <__NVIC_SetPriorityGrouping+0x44>)
 800192e:	4313      	orrs	r3, r2
 8001930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001932:	4a04      	ldr	r2, [pc, #16]	@ (8001944 <__NVIC_SetPriorityGrouping+0x40>)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	60d3      	str	r3, [r2, #12]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00
 8001948:	05fa0000 	.word	0x05fa0000

0800194c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001950:	4b04      	ldr	r3, [pc, #16]	@ (8001964 <__NVIC_GetPriorityGrouping+0x18>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	0a1b      	lsrs	r3, r3, #8
 8001956:	f003 0307 	and.w	r3, r3, #7
}
 800195a:	4618      	mov	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001976:	2b00      	cmp	r3, #0
 8001978:	db0b      	blt.n	8001992 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	f003 021f 	and.w	r2, r3, #31
 8001980:	4907      	ldr	r1, [pc, #28]	@ (80019a0 <__NVIC_EnableIRQ+0x38>)
 8001982:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001986:	095b      	lsrs	r3, r3, #5
 8001988:	2001      	movs	r0, #1
 800198a:	fa00 f202 	lsl.w	r2, r0, r2
 800198e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	e000e100 	.word	0xe000e100

080019a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	6039      	str	r1, [r7, #0]
 80019ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	db0a      	blt.n	80019ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	490c      	ldr	r1, [pc, #48]	@ (80019f0 <__NVIC_SetPriority+0x4c>)
 80019be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c2:	0112      	lsls	r2, r2, #4
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	440b      	add	r3, r1
 80019c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019cc:	e00a      	b.n	80019e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4908      	ldr	r1, [pc, #32]	@ (80019f4 <__NVIC_SetPriority+0x50>)
 80019d4:	88fb      	ldrh	r3, [r7, #6]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	3b04      	subs	r3, #4
 80019dc:	0112      	lsls	r2, r2, #4
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	440b      	add	r3, r1
 80019e2:	761a      	strb	r2, [r3, #24]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000e100 	.word	0xe000e100
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	@ 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f1c3 0307 	rsb	r3, r3, #7
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	bf28      	it	cs
 8001a16:	2304      	movcs	r3, #4
 8001a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	2b06      	cmp	r3, #6
 8001a20:	d902      	bls.n	8001a28 <NVIC_EncodePriority+0x30>
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3b03      	subs	r3, #3
 8001a26:	e000      	b.n	8001a2a <NVIC_EncodePriority+0x32>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43da      	mvns	r2, r3
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a40:	f04f 31ff 	mov.w	r1, #4294967295
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4a:	43d9      	mvns	r1, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	4313      	orrs	r3, r2
         );
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3724      	adds	r7, #36	@ 0x24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a70:	d301      	bcc.n	8001a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a72:	2301      	movs	r3, #1
 8001a74:	e00f      	b.n	8001a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a76:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa0 <SysTick_Config+0x40>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7e:	210f      	movs	r1, #15
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295
 8001a84:	f7ff ff8e 	bl	80019a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a88:	4b05      	ldr	r3, [pc, #20]	@ (8001aa0 <SysTick_Config+0x40>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8e:	4b04      	ldr	r3, [pc, #16]	@ (8001aa0 <SysTick_Config+0x40>)
 8001a90:	2207      	movs	r2, #7
 8001a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	e000e010 	.word	0xe000e010

08001aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff ff29 	bl	8001904 <__NVIC_SetPriorityGrouping>
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b086      	sub	sp, #24
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac8:	f7ff ff40 	bl	800194c <__NVIC_GetPriorityGrouping>
 8001acc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	f7ff ff90 	bl	80019f8 <NVIC_EncodePriority>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff5f 	bl	80019a4 <__NVIC_SetPriority>
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff33 	bl	8001968 <__NVIC_EnableIRQ>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ffa4 	bl	8001a60 <SysTick_Config>
 8001b18:	4603      	mov	r3, r0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001b2c:	f7ff feca 	bl	80018c4 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e312      	b.n	8002162 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a66      	ldr	r2, [pc, #408]	@ (8001cdc <HAL_DMA_Init+0x1b8>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d04a      	beq.n	8001bdc <HAL_DMA_Init+0xb8>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a65      	ldr	r2, [pc, #404]	@ (8001ce0 <HAL_DMA_Init+0x1bc>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d045      	beq.n	8001bdc <HAL_DMA_Init+0xb8>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a63      	ldr	r2, [pc, #396]	@ (8001ce4 <HAL_DMA_Init+0x1c0>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d040      	beq.n	8001bdc <HAL_DMA_Init+0xb8>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a62      	ldr	r2, [pc, #392]	@ (8001ce8 <HAL_DMA_Init+0x1c4>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d03b      	beq.n	8001bdc <HAL_DMA_Init+0xb8>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a60      	ldr	r2, [pc, #384]	@ (8001cec <HAL_DMA_Init+0x1c8>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d036      	beq.n	8001bdc <HAL_DMA_Init+0xb8>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a5f      	ldr	r2, [pc, #380]	@ (8001cf0 <HAL_DMA_Init+0x1cc>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d031      	beq.n	8001bdc <HAL_DMA_Init+0xb8>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a5d      	ldr	r2, [pc, #372]	@ (8001cf4 <HAL_DMA_Init+0x1d0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d02c      	beq.n	8001bdc <HAL_DMA_Init+0xb8>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a5c      	ldr	r2, [pc, #368]	@ (8001cf8 <HAL_DMA_Init+0x1d4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d027      	beq.n	8001bdc <HAL_DMA_Init+0xb8>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a5a      	ldr	r2, [pc, #360]	@ (8001cfc <HAL_DMA_Init+0x1d8>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d022      	beq.n	8001bdc <HAL_DMA_Init+0xb8>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a59      	ldr	r2, [pc, #356]	@ (8001d00 <HAL_DMA_Init+0x1dc>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d01d      	beq.n	8001bdc <HAL_DMA_Init+0xb8>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a57      	ldr	r2, [pc, #348]	@ (8001d04 <HAL_DMA_Init+0x1e0>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d018      	beq.n	8001bdc <HAL_DMA_Init+0xb8>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a56      	ldr	r2, [pc, #344]	@ (8001d08 <HAL_DMA_Init+0x1e4>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d013      	beq.n	8001bdc <HAL_DMA_Init+0xb8>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a54      	ldr	r2, [pc, #336]	@ (8001d0c <HAL_DMA_Init+0x1e8>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d00e      	beq.n	8001bdc <HAL_DMA_Init+0xb8>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a53      	ldr	r2, [pc, #332]	@ (8001d10 <HAL_DMA_Init+0x1ec>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d009      	beq.n	8001bdc <HAL_DMA_Init+0xb8>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a51      	ldr	r2, [pc, #324]	@ (8001d14 <HAL_DMA_Init+0x1f0>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d004      	beq.n	8001bdc <HAL_DMA_Init+0xb8>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a50      	ldr	r2, [pc, #320]	@ (8001d18 <HAL_DMA_Init+0x1f4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d101      	bne.n	8001be0 <HAL_DMA_Init+0xbc>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <HAL_DMA_Init+0xbe>
 8001be0:	2300      	movs	r3, #0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 813c 	beq.w	8001e60 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2202      	movs	r2, #2
 8001bec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a37      	ldr	r2, [pc, #220]	@ (8001cdc <HAL_DMA_Init+0x1b8>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d04a      	beq.n	8001c98 <HAL_DMA_Init+0x174>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a36      	ldr	r2, [pc, #216]	@ (8001ce0 <HAL_DMA_Init+0x1bc>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d045      	beq.n	8001c98 <HAL_DMA_Init+0x174>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a34      	ldr	r2, [pc, #208]	@ (8001ce4 <HAL_DMA_Init+0x1c0>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d040      	beq.n	8001c98 <HAL_DMA_Init+0x174>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a33      	ldr	r2, [pc, #204]	@ (8001ce8 <HAL_DMA_Init+0x1c4>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d03b      	beq.n	8001c98 <HAL_DMA_Init+0x174>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a31      	ldr	r2, [pc, #196]	@ (8001cec <HAL_DMA_Init+0x1c8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d036      	beq.n	8001c98 <HAL_DMA_Init+0x174>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a30      	ldr	r2, [pc, #192]	@ (8001cf0 <HAL_DMA_Init+0x1cc>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d031      	beq.n	8001c98 <HAL_DMA_Init+0x174>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a2e      	ldr	r2, [pc, #184]	@ (8001cf4 <HAL_DMA_Init+0x1d0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d02c      	beq.n	8001c98 <HAL_DMA_Init+0x174>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a2d      	ldr	r2, [pc, #180]	@ (8001cf8 <HAL_DMA_Init+0x1d4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d027      	beq.n	8001c98 <HAL_DMA_Init+0x174>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a2b      	ldr	r2, [pc, #172]	@ (8001cfc <HAL_DMA_Init+0x1d8>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d022      	beq.n	8001c98 <HAL_DMA_Init+0x174>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a2a      	ldr	r2, [pc, #168]	@ (8001d00 <HAL_DMA_Init+0x1dc>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d01d      	beq.n	8001c98 <HAL_DMA_Init+0x174>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a28      	ldr	r2, [pc, #160]	@ (8001d04 <HAL_DMA_Init+0x1e0>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d018      	beq.n	8001c98 <HAL_DMA_Init+0x174>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a27      	ldr	r2, [pc, #156]	@ (8001d08 <HAL_DMA_Init+0x1e4>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d013      	beq.n	8001c98 <HAL_DMA_Init+0x174>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a25      	ldr	r2, [pc, #148]	@ (8001d0c <HAL_DMA_Init+0x1e8>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d00e      	beq.n	8001c98 <HAL_DMA_Init+0x174>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a24      	ldr	r2, [pc, #144]	@ (8001d10 <HAL_DMA_Init+0x1ec>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d009      	beq.n	8001c98 <HAL_DMA_Init+0x174>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a22      	ldr	r2, [pc, #136]	@ (8001d14 <HAL_DMA_Init+0x1f0>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d004      	beq.n	8001c98 <HAL_DMA_Init+0x174>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a21      	ldr	r2, [pc, #132]	@ (8001d18 <HAL_DMA_Init+0x1f4>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d108      	bne.n	8001caa <HAL_DMA_Init+0x186>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0201 	bic.w	r2, r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	e007      	b.n	8001cba <HAL_DMA_Init+0x196>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 0201 	bic.w	r2, r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001cba:	e02f      	b.n	8001d1c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cbc:	f7ff fe02 	bl	80018c4 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b05      	cmp	r3, #5
 8001cc8:	d928      	bls.n	8001d1c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2220      	movs	r2, #32
 8001cce:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e242      	b.n	8002162 <HAL_DMA_Init+0x63e>
 8001cdc:	40020010 	.word	0x40020010
 8001ce0:	40020028 	.word	0x40020028
 8001ce4:	40020040 	.word	0x40020040
 8001ce8:	40020058 	.word	0x40020058
 8001cec:	40020070 	.word	0x40020070
 8001cf0:	40020088 	.word	0x40020088
 8001cf4:	400200a0 	.word	0x400200a0
 8001cf8:	400200b8 	.word	0x400200b8
 8001cfc:	40020410 	.word	0x40020410
 8001d00:	40020428 	.word	0x40020428
 8001d04:	40020440 	.word	0x40020440
 8001d08:	40020458 	.word	0x40020458
 8001d0c:	40020470 	.word	0x40020470
 8001d10:	40020488 	.word	0x40020488
 8001d14:	400204a0 	.word	0x400204a0
 8001d18:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1c8      	bne.n	8001cbc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	4b83      	ldr	r3, [pc, #524]	@ (8001f44 <HAL_DMA_Init+0x420>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001d42:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d4e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d5a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d107      	bne.n	8001d80 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b28      	cmp	r3, #40	@ 0x28
 8001d86:	d903      	bls.n	8001d90 <HAL_DMA_Init+0x26c>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8001d8e:	d91f      	bls.n	8001dd0 <HAL_DMA_Init+0x2ac>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b3e      	cmp	r3, #62	@ 0x3e
 8001d96:	d903      	bls.n	8001da0 <HAL_DMA_Init+0x27c>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b42      	cmp	r3, #66	@ 0x42
 8001d9e:	d917      	bls.n	8001dd0 <HAL_DMA_Init+0x2ac>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b46      	cmp	r3, #70	@ 0x46
 8001da6:	d903      	bls.n	8001db0 <HAL_DMA_Init+0x28c>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b48      	cmp	r3, #72	@ 0x48
 8001dae:	d90f      	bls.n	8001dd0 <HAL_DMA_Init+0x2ac>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b4e      	cmp	r3, #78	@ 0x4e
 8001db6:	d903      	bls.n	8001dc0 <HAL_DMA_Init+0x29c>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b52      	cmp	r3, #82	@ 0x52
 8001dbe:	d907      	bls.n	8001dd0 <HAL_DMA_Init+0x2ac>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b73      	cmp	r3, #115	@ 0x73
 8001dc6:	d905      	bls.n	8001dd4 <HAL_DMA_Init+0x2b0>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b77      	cmp	r3, #119	@ 0x77
 8001dce:	d801      	bhi.n	8001dd4 <HAL_DMA_Init+0x2b0>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e000      	b.n	8001dd6 <HAL_DMA_Init+0x2b2>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001de0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	f023 0307 	bic.w	r3, r3, #7
 8001df8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e08:	2b04      	cmp	r3, #4
 8001e0a:	d117      	bne.n	8001e3c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00e      	beq.n	8001e3c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f002 f8f4 	bl	800400c <DMA_CheckFifoParam>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d008      	beq.n	8001e3c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2240      	movs	r2, #64	@ 0x40
 8001e2e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e192      	b.n	8002162 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f002 f82f 	bl	8003ea8 <DMA_CalcBaseAndBitshift>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e52:	f003 031f 	and.w	r3, r3, #31
 8001e56:	223f      	movs	r2, #63	@ 0x3f
 8001e58:	409a      	lsls	r2, r3
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	609a      	str	r2, [r3, #8]
 8001e5e:	e0c8      	b.n	8001ff2 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a38      	ldr	r2, [pc, #224]	@ (8001f48 <HAL_DMA_Init+0x424>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d022      	beq.n	8001eb0 <HAL_DMA_Init+0x38c>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a37      	ldr	r2, [pc, #220]	@ (8001f4c <HAL_DMA_Init+0x428>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d01d      	beq.n	8001eb0 <HAL_DMA_Init+0x38c>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a35      	ldr	r2, [pc, #212]	@ (8001f50 <HAL_DMA_Init+0x42c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d018      	beq.n	8001eb0 <HAL_DMA_Init+0x38c>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a34      	ldr	r2, [pc, #208]	@ (8001f54 <HAL_DMA_Init+0x430>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d013      	beq.n	8001eb0 <HAL_DMA_Init+0x38c>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a32      	ldr	r2, [pc, #200]	@ (8001f58 <HAL_DMA_Init+0x434>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d00e      	beq.n	8001eb0 <HAL_DMA_Init+0x38c>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a31      	ldr	r2, [pc, #196]	@ (8001f5c <HAL_DMA_Init+0x438>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d009      	beq.n	8001eb0 <HAL_DMA_Init+0x38c>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a2f      	ldr	r2, [pc, #188]	@ (8001f60 <HAL_DMA_Init+0x43c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d004      	beq.n	8001eb0 <HAL_DMA_Init+0x38c>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a2e      	ldr	r2, [pc, #184]	@ (8001f64 <HAL_DMA_Init+0x440>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d101      	bne.n	8001eb4 <HAL_DMA_Init+0x390>
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e000      	b.n	8001eb6 <HAL_DMA_Init+0x392>
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 8092 	beq.w	8001fe0 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a21      	ldr	r2, [pc, #132]	@ (8001f48 <HAL_DMA_Init+0x424>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d021      	beq.n	8001f0a <HAL_DMA_Init+0x3e6>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a20      	ldr	r2, [pc, #128]	@ (8001f4c <HAL_DMA_Init+0x428>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d01c      	beq.n	8001f0a <HAL_DMA_Init+0x3e6>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a1e      	ldr	r2, [pc, #120]	@ (8001f50 <HAL_DMA_Init+0x42c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d017      	beq.n	8001f0a <HAL_DMA_Init+0x3e6>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a1d      	ldr	r2, [pc, #116]	@ (8001f54 <HAL_DMA_Init+0x430>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d012      	beq.n	8001f0a <HAL_DMA_Init+0x3e6>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a1b      	ldr	r2, [pc, #108]	@ (8001f58 <HAL_DMA_Init+0x434>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d00d      	beq.n	8001f0a <HAL_DMA_Init+0x3e6>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a1a      	ldr	r2, [pc, #104]	@ (8001f5c <HAL_DMA_Init+0x438>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d008      	beq.n	8001f0a <HAL_DMA_Init+0x3e6>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a18      	ldr	r2, [pc, #96]	@ (8001f60 <HAL_DMA_Init+0x43c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d003      	beq.n	8001f0a <HAL_DMA_Init+0x3e6>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a17      	ldr	r2, [pc, #92]	@ (8001f64 <HAL_DMA_Init+0x440>)
 8001f08:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	4b10      	ldr	r3, [pc, #64]	@ (8001f68 <HAL_DMA_Init+0x444>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b40      	cmp	r3, #64	@ 0x40
 8001f30:	d01c      	beq.n	8001f6c <HAL_DMA_Init+0x448>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b80      	cmp	r3, #128	@ 0x80
 8001f38:	d102      	bne.n	8001f40 <HAL_DMA_Init+0x41c>
 8001f3a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f3e:	e016      	b.n	8001f6e <HAL_DMA_Init+0x44a>
 8001f40:	2300      	movs	r3, #0
 8001f42:	e014      	b.n	8001f6e <HAL_DMA_Init+0x44a>
 8001f44:	fe10803f 	.word	0xfe10803f
 8001f48:	58025408 	.word	0x58025408
 8001f4c:	5802541c 	.word	0x5802541c
 8001f50:	58025430 	.word	0x58025430
 8001f54:	58025444 	.word	0x58025444
 8001f58:	58025458 	.word	0x58025458
 8001f5c:	5802546c 	.word	0x5802546c
 8001f60:	58025480 	.word	0x58025480
 8001f64:	58025494 	.word	0x58025494
 8001f68:	fffe000f 	.word	0xfffe000f
 8001f6c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	68d2      	ldr	r2, [r2, #12]
 8001f72:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f9c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4b6e      	ldr	r3, [pc, #440]	@ (800216c <HAL_DMA_Init+0x648>)
 8001fb4:	4413      	add	r3, r2
 8001fb6:	4a6e      	ldr	r2, [pc, #440]	@ (8002170 <HAL_DMA_Init+0x64c>)
 8001fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbc:	091b      	lsrs	r3, r3, #4
 8001fbe:	009a      	lsls	r2, r3, #2
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f001 ff6f 	bl	8003ea8 <DMA_CalcBaseAndBitshift>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd2:	f003 031f 	and.w	r3, r3, #31
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	e008      	b.n	8001ff2 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2240      	movs	r2, #64	@ 0x40
 8001fe4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2203      	movs	r2, #3
 8001fea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e0b7      	b.n	8002162 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a5f      	ldr	r2, [pc, #380]	@ (8002174 <HAL_DMA_Init+0x650>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d072      	beq.n	80020e2 <HAL_DMA_Init+0x5be>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a5d      	ldr	r2, [pc, #372]	@ (8002178 <HAL_DMA_Init+0x654>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d06d      	beq.n	80020e2 <HAL_DMA_Init+0x5be>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a5c      	ldr	r2, [pc, #368]	@ (800217c <HAL_DMA_Init+0x658>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d068      	beq.n	80020e2 <HAL_DMA_Init+0x5be>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a5a      	ldr	r2, [pc, #360]	@ (8002180 <HAL_DMA_Init+0x65c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d063      	beq.n	80020e2 <HAL_DMA_Init+0x5be>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a59      	ldr	r2, [pc, #356]	@ (8002184 <HAL_DMA_Init+0x660>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d05e      	beq.n	80020e2 <HAL_DMA_Init+0x5be>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a57      	ldr	r2, [pc, #348]	@ (8002188 <HAL_DMA_Init+0x664>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d059      	beq.n	80020e2 <HAL_DMA_Init+0x5be>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a56      	ldr	r2, [pc, #344]	@ (800218c <HAL_DMA_Init+0x668>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d054      	beq.n	80020e2 <HAL_DMA_Init+0x5be>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a54      	ldr	r2, [pc, #336]	@ (8002190 <HAL_DMA_Init+0x66c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d04f      	beq.n	80020e2 <HAL_DMA_Init+0x5be>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a53      	ldr	r2, [pc, #332]	@ (8002194 <HAL_DMA_Init+0x670>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d04a      	beq.n	80020e2 <HAL_DMA_Init+0x5be>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a51      	ldr	r2, [pc, #324]	@ (8002198 <HAL_DMA_Init+0x674>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d045      	beq.n	80020e2 <HAL_DMA_Init+0x5be>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a50      	ldr	r2, [pc, #320]	@ (800219c <HAL_DMA_Init+0x678>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d040      	beq.n	80020e2 <HAL_DMA_Init+0x5be>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a4e      	ldr	r2, [pc, #312]	@ (80021a0 <HAL_DMA_Init+0x67c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d03b      	beq.n	80020e2 <HAL_DMA_Init+0x5be>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a4d      	ldr	r2, [pc, #308]	@ (80021a4 <HAL_DMA_Init+0x680>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d036      	beq.n	80020e2 <HAL_DMA_Init+0x5be>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a4b      	ldr	r2, [pc, #300]	@ (80021a8 <HAL_DMA_Init+0x684>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d031      	beq.n	80020e2 <HAL_DMA_Init+0x5be>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a4a      	ldr	r2, [pc, #296]	@ (80021ac <HAL_DMA_Init+0x688>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d02c      	beq.n	80020e2 <HAL_DMA_Init+0x5be>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a48      	ldr	r2, [pc, #288]	@ (80021b0 <HAL_DMA_Init+0x68c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d027      	beq.n	80020e2 <HAL_DMA_Init+0x5be>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a47      	ldr	r2, [pc, #284]	@ (80021b4 <HAL_DMA_Init+0x690>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d022      	beq.n	80020e2 <HAL_DMA_Init+0x5be>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a45      	ldr	r2, [pc, #276]	@ (80021b8 <HAL_DMA_Init+0x694>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d01d      	beq.n	80020e2 <HAL_DMA_Init+0x5be>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a44      	ldr	r2, [pc, #272]	@ (80021bc <HAL_DMA_Init+0x698>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d018      	beq.n	80020e2 <HAL_DMA_Init+0x5be>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a42      	ldr	r2, [pc, #264]	@ (80021c0 <HAL_DMA_Init+0x69c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d013      	beq.n	80020e2 <HAL_DMA_Init+0x5be>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a41      	ldr	r2, [pc, #260]	@ (80021c4 <HAL_DMA_Init+0x6a0>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d00e      	beq.n	80020e2 <HAL_DMA_Init+0x5be>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a3f      	ldr	r2, [pc, #252]	@ (80021c8 <HAL_DMA_Init+0x6a4>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d009      	beq.n	80020e2 <HAL_DMA_Init+0x5be>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a3e      	ldr	r2, [pc, #248]	@ (80021cc <HAL_DMA_Init+0x6a8>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d004      	beq.n	80020e2 <HAL_DMA_Init+0x5be>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a3c      	ldr	r2, [pc, #240]	@ (80021d0 <HAL_DMA_Init+0x6ac>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d101      	bne.n	80020e6 <HAL_DMA_Init+0x5c2>
 80020e2:	2301      	movs	r3, #1
 80020e4:	e000      	b.n	80020e8 <HAL_DMA_Init+0x5c4>
 80020e6:	2300      	movs	r3, #0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d032      	beq.n	8002152 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f002 f809 	bl	8004104 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b80      	cmp	r3, #128	@ 0x80
 80020f8:	d102      	bne.n	8002100 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002114:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d010      	beq.n	8002140 <HAL_DMA_Init+0x61c>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b08      	cmp	r3, #8
 8002124:	d80c      	bhi.n	8002140 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f002 f886 	bl	8004238 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	e008      	b.n	8002152 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	a7fdabf8 	.word	0xa7fdabf8
 8002170:	cccccccd 	.word	0xcccccccd
 8002174:	40020010 	.word	0x40020010
 8002178:	40020028 	.word	0x40020028
 800217c:	40020040 	.word	0x40020040
 8002180:	40020058 	.word	0x40020058
 8002184:	40020070 	.word	0x40020070
 8002188:	40020088 	.word	0x40020088
 800218c:	400200a0 	.word	0x400200a0
 8002190:	400200b8 	.word	0x400200b8
 8002194:	40020410 	.word	0x40020410
 8002198:	40020428 	.word	0x40020428
 800219c:	40020440 	.word	0x40020440
 80021a0:	40020458 	.word	0x40020458
 80021a4:	40020470 	.word	0x40020470
 80021a8:	40020488 	.word	0x40020488
 80021ac:	400204a0 	.word	0x400204a0
 80021b0:	400204b8 	.word	0x400204b8
 80021b4:	58025408 	.word	0x58025408
 80021b8:	5802541c 	.word	0x5802541c
 80021bc:	58025430 	.word	0x58025430
 80021c0:	58025444 	.word	0x58025444
 80021c4:	58025458 	.word	0x58025458
 80021c8:	5802546c 	.word	0x5802546c
 80021cc:	58025480 	.word	0x58025480
 80021d0:	58025494 	.word	0x58025494

080021d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
 80021e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e226      	b.n	800263e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <HAL_DMA_Start_IT+0x2a>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e21f      	b.n	800263e <HAL_DMA_Start_IT+0x46a>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b01      	cmp	r3, #1
 8002210:	f040 820a 	bne.w	8002628 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2202      	movs	r2, #2
 8002218:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a68      	ldr	r2, [pc, #416]	@ (80023c8 <HAL_DMA_Start_IT+0x1f4>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d04a      	beq.n	80022c2 <HAL_DMA_Start_IT+0xee>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a66      	ldr	r2, [pc, #408]	@ (80023cc <HAL_DMA_Start_IT+0x1f8>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d045      	beq.n	80022c2 <HAL_DMA_Start_IT+0xee>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a65      	ldr	r2, [pc, #404]	@ (80023d0 <HAL_DMA_Start_IT+0x1fc>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d040      	beq.n	80022c2 <HAL_DMA_Start_IT+0xee>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a63      	ldr	r2, [pc, #396]	@ (80023d4 <HAL_DMA_Start_IT+0x200>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d03b      	beq.n	80022c2 <HAL_DMA_Start_IT+0xee>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a62      	ldr	r2, [pc, #392]	@ (80023d8 <HAL_DMA_Start_IT+0x204>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d036      	beq.n	80022c2 <HAL_DMA_Start_IT+0xee>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a60      	ldr	r2, [pc, #384]	@ (80023dc <HAL_DMA_Start_IT+0x208>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d031      	beq.n	80022c2 <HAL_DMA_Start_IT+0xee>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a5f      	ldr	r2, [pc, #380]	@ (80023e0 <HAL_DMA_Start_IT+0x20c>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d02c      	beq.n	80022c2 <HAL_DMA_Start_IT+0xee>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a5d      	ldr	r2, [pc, #372]	@ (80023e4 <HAL_DMA_Start_IT+0x210>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d027      	beq.n	80022c2 <HAL_DMA_Start_IT+0xee>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a5c      	ldr	r2, [pc, #368]	@ (80023e8 <HAL_DMA_Start_IT+0x214>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d022      	beq.n	80022c2 <HAL_DMA_Start_IT+0xee>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a5a      	ldr	r2, [pc, #360]	@ (80023ec <HAL_DMA_Start_IT+0x218>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d01d      	beq.n	80022c2 <HAL_DMA_Start_IT+0xee>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a59      	ldr	r2, [pc, #356]	@ (80023f0 <HAL_DMA_Start_IT+0x21c>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d018      	beq.n	80022c2 <HAL_DMA_Start_IT+0xee>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a57      	ldr	r2, [pc, #348]	@ (80023f4 <HAL_DMA_Start_IT+0x220>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d013      	beq.n	80022c2 <HAL_DMA_Start_IT+0xee>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a56      	ldr	r2, [pc, #344]	@ (80023f8 <HAL_DMA_Start_IT+0x224>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d00e      	beq.n	80022c2 <HAL_DMA_Start_IT+0xee>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a54      	ldr	r2, [pc, #336]	@ (80023fc <HAL_DMA_Start_IT+0x228>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d009      	beq.n	80022c2 <HAL_DMA_Start_IT+0xee>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a53      	ldr	r2, [pc, #332]	@ (8002400 <HAL_DMA_Start_IT+0x22c>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d004      	beq.n	80022c2 <HAL_DMA_Start_IT+0xee>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a51      	ldr	r2, [pc, #324]	@ (8002404 <HAL_DMA_Start_IT+0x230>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d108      	bne.n	80022d4 <HAL_DMA_Start_IT+0x100>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0201 	bic.w	r2, r2, #1
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	e007      	b.n	80022e4 <HAL_DMA_Start_IT+0x110>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0201 	bic.w	r2, r2, #1
 80022e2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f001 fc30 	bl	8003b50 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a34      	ldr	r2, [pc, #208]	@ (80023c8 <HAL_DMA_Start_IT+0x1f4>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d04a      	beq.n	8002390 <HAL_DMA_Start_IT+0x1bc>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a33      	ldr	r2, [pc, #204]	@ (80023cc <HAL_DMA_Start_IT+0x1f8>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d045      	beq.n	8002390 <HAL_DMA_Start_IT+0x1bc>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a31      	ldr	r2, [pc, #196]	@ (80023d0 <HAL_DMA_Start_IT+0x1fc>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d040      	beq.n	8002390 <HAL_DMA_Start_IT+0x1bc>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a30      	ldr	r2, [pc, #192]	@ (80023d4 <HAL_DMA_Start_IT+0x200>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d03b      	beq.n	8002390 <HAL_DMA_Start_IT+0x1bc>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a2e      	ldr	r2, [pc, #184]	@ (80023d8 <HAL_DMA_Start_IT+0x204>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d036      	beq.n	8002390 <HAL_DMA_Start_IT+0x1bc>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a2d      	ldr	r2, [pc, #180]	@ (80023dc <HAL_DMA_Start_IT+0x208>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d031      	beq.n	8002390 <HAL_DMA_Start_IT+0x1bc>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a2b      	ldr	r2, [pc, #172]	@ (80023e0 <HAL_DMA_Start_IT+0x20c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d02c      	beq.n	8002390 <HAL_DMA_Start_IT+0x1bc>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a2a      	ldr	r2, [pc, #168]	@ (80023e4 <HAL_DMA_Start_IT+0x210>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d027      	beq.n	8002390 <HAL_DMA_Start_IT+0x1bc>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a28      	ldr	r2, [pc, #160]	@ (80023e8 <HAL_DMA_Start_IT+0x214>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d022      	beq.n	8002390 <HAL_DMA_Start_IT+0x1bc>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a27      	ldr	r2, [pc, #156]	@ (80023ec <HAL_DMA_Start_IT+0x218>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d01d      	beq.n	8002390 <HAL_DMA_Start_IT+0x1bc>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a25      	ldr	r2, [pc, #148]	@ (80023f0 <HAL_DMA_Start_IT+0x21c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d018      	beq.n	8002390 <HAL_DMA_Start_IT+0x1bc>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a24      	ldr	r2, [pc, #144]	@ (80023f4 <HAL_DMA_Start_IT+0x220>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d013      	beq.n	8002390 <HAL_DMA_Start_IT+0x1bc>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a22      	ldr	r2, [pc, #136]	@ (80023f8 <HAL_DMA_Start_IT+0x224>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d00e      	beq.n	8002390 <HAL_DMA_Start_IT+0x1bc>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a21      	ldr	r2, [pc, #132]	@ (80023fc <HAL_DMA_Start_IT+0x228>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d009      	beq.n	8002390 <HAL_DMA_Start_IT+0x1bc>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a1f      	ldr	r2, [pc, #124]	@ (8002400 <HAL_DMA_Start_IT+0x22c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d004      	beq.n	8002390 <HAL_DMA_Start_IT+0x1bc>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a1e      	ldr	r2, [pc, #120]	@ (8002404 <HAL_DMA_Start_IT+0x230>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d101      	bne.n	8002394 <HAL_DMA_Start_IT+0x1c0>
 8002390:	2301      	movs	r3, #1
 8002392:	e000      	b.n	8002396 <HAL_DMA_Start_IT+0x1c2>
 8002394:	2300      	movs	r3, #0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d036      	beq.n	8002408 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f023 021e 	bic.w	r2, r3, #30
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f042 0216 	orr.w	r2, r2, #22
 80023ac:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d03e      	beq.n	8002434 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f042 0208 	orr.w	r2, r2, #8
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	e035      	b.n	8002434 <HAL_DMA_Start_IT+0x260>
 80023c8:	40020010 	.word	0x40020010
 80023cc:	40020028 	.word	0x40020028
 80023d0:	40020040 	.word	0x40020040
 80023d4:	40020058 	.word	0x40020058
 80023d8:	40020070 	.word	0x40020070
 80023dc:	40020088 	.word	0x40020088
 80023e0:	400200a0 	.word	0x400200a0
 80023e4:	400200b8 	.word	0x400200b8
 80023e8:	40020410 	.word	0x40020410
 80023ec:	40020428 	.word	0x40020428
 80023f0:	40020440 	.word	0x40020440
 80023f4:	40020458 	.word	0x40020458
 80023f8:	40020470 	.word	0x40020470
 80023fc:	40020488 	.word	0x40020488
 8002400:	400204a0 	.word	0x400204a0
 8002404:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f023 020e 	bic.w	r2, r3, #14
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 020a 	orr.w	r2, r2, #10
 800241a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002420:	2b00      	cmp	r3, #0
 8002422:	d007      	beq.n	8002434 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0204 	orr.w	r2, r2, #4
 8002432:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a83      	ldr	r2, [pc, #524]	@ (8002648 <HAL_DMA_Start_IT+0x474>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d072      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a82      	ldr	r2, [pc, #520]	@ (800264c <HAL_DMA_Start_IT+0x478>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d06d      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a80      	ldr	r2, [pc, #512]	@ (8002650 <HAL_DMA_Start_IT+0x47c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d068      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a7f      	ldr	r2, [pc, #508]	@ (8002654 <HAL_DMA_Start_IT+0x480>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d063      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a7d      	ldr	r2, [pc, #500]	@ (8002658 <HAL_DMA_Start_IT+0x484>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d05e      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a7c      	ldr	r2, [pc, #496]	@ (800265c <HAL_DMA_Start_IT+0x488>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d059      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a7a      	ldr	r2, [pc, #488]	@ (8002660 <HAL_DMA_Start_IT+0x48c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d054      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a79      	ldr	r2, [pc, #484]	@ (8002664 <HAL_DMA_Start_IT+0x490>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d04f      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a77      	ldr	r2, [pc, #476]	@ (8002668 <HAL_DMA_Start_IT+0x494>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d04a      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a76      	ldr	r2, [pc, #472]	@ (800266c <HAL_DMA_Start_IT+0x498>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d045      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a74      	ldr	r2, [pc, #464]	@ (8002670 <HAL_DMA_Start_IT+0x49c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d040      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a73      	ldr	r2, [pc, #460]	@ (8002674 <HAL_DMA_Start_IT+0x4a0>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d03b      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a71      	ldr	r2, [pc, #452]	@ (8002678 <HAL_DMA_Start_IT+0x4a4>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d036      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a70      	ldr	r2, [pc, #448]	@ (800267c <HAL_DMA_Start_IT+0x4a8>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d031      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a6e      	ldr	r2, [pc, #440]	@ (8002680 <HAL_DMA_Start_IT+0x4ac>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d02c      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a6d      	ldr	r2, [pc, #436]	@ (8002684 <HAL_DMA_Start_IT+0x4b0>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d027      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a6b      	ldr	r2, [pc, #428]	@ (8002688 <HAL_DMA_Start_IT+0x4b4>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d022      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a6a      	ldr	r2, [pc, #424]	@ (800268c <HAL_DMA_Start_IT+0x4b8>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d01d      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a68      	ldr	r2, [pc, #416]	@ (8002690 <HAL_DMA_Start_IT+0x4bc>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d018      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a67      	ldr	r2, [pc, #412]	@ (8002694 <HAL_DMA_Start_IT+0x4c0>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d013      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a65      	ldr	r2, [pc, #404]	@ (8002698 <HAL_DMA_Start_IT+0x4c4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d00e      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a64      	ldr	r2, [pc, #400]	@ (800269c <HAL_DMA_Start_IT+0x4c8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d009      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a62      	ldr	r2, [pc, #392]	@ (80026a0 <HAL_DMA_Start_IT+0x4cc>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d004      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a61      	ldr	r2, [pc, #388]	@ (80026a4 <HAL_DMA_Start_IT+0x4d0>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d101      	bne.n	8002528 <HAL_DMA_Start_IT+0x354>
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <HAL_DMA_Start_IT+0x356>
 8002528:	2300      	movs	r3, #0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d01a      	beq.n	8002564 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d007      	beq.n	800254c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002546:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800254a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002550:	2b00      	cmp	r3, #0
 8002552:	d007      	beq.n	8002564 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800255e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002562:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a37      	ldr	r2, [pc, #220]	@ (8002648 <HAL_DMA_Start_IT+0x474>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d04a      	beq.n	8002604 <HAL_DMA_Start_IT+0x430>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a36      	ldr	r2, [pc, #216]	@ (800264c <HAL_DMA_Start_IT+0x478>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d045      	beq.n	8002604 <HAL_DMA_Start_IT+0x430>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a34      	ldr	r2, [pc, #208]	@ (8002650 <HAL_DMA_Start_IT+0x47c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d040      	beq.n	8002604 <HAL_DMA_Start_IT+0x430>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a33      	ldr	r2, [pc, #204]	@ (8002654 <HAL_DMA_Start_IT+0x480>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d03b      	beq.n	8002604 <HAL_DMA_Start_IT+0x430>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a31      	ldr	r2, [pc, #196]	@ (8002658 <HAL_DMA_Start_IT+0x484>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d036      	beq.n	8002604 <HAL_DMA_Start_IT+0x430>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a30      	ldr	r2, [pc, #192]	@ (800265c <HAL_DMA_Start_IT+0x488>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d031      	beq.n	8002604 <HAL_DMA_Start_IT+0x430>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a2e      	ldr	r2, [pc, #184]	@ (8002660 <HAL_DMA_Start_IT+0x48c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d02c      	beq.n	8002604 <HAL_DMA_Start_IT+0x430>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a2d      	ldr	r2, [pc, #180]	@ (8002664 <HAL_DMA_Start_IT+0x490>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d027      	beq.n	8002604 <HAL_DMA_Start_IT+0x430>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002668 <HAL_DMA_Start_IT+0x494>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d022      	beq.n	8002604 <HAL_DMA_Start_IT+0x430>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a2a      	ldr	r2, [pc, #168]	@ (800266c <HAL_DMA_Start_IT+0x498>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d01d      	beq.n	8002604 <HAL_DMA_Start_IT+0x430>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a28      	ldr	r2, [pc, #160]	@ (8002670 <HAL_DMA_Start_IT+0x49c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d018      	beq.n	8002604 <HAL_DMA_Start_IT+0x430>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a27      	ldr	r2, [pc, #156]	@ (8002674 <HAL_DMA_Start_IT+0x4a0>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d013      	beq.n	8002604 <HAL_DMA_Start_IT+0x430>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a25      	ldr	r2, [pc, #148]	@ (8002678 <HAL_DMA_Start_IT+0x4a4>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00e      	beq.n	8002604 <HAL_DMA_Start_IT+0x430>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a24      	ldr	r2, [pc, #144]	@ (800267c <HAL_DMA_Start_IT+0x4a8>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d009      	beq.n	8002604 <HAL_DMA_Start_IT+0x430>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a22      	ldr	r2, [pc, #136]	@ (8002680 <HAL_DMA_Start_IT+0x4ac>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d004      	beq.n	8002604 <HAL_DMA_Start_IT+0x430>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a21      	ldr	r2, [pc, #132]	@ (8002684 <HAL_DMA_Start_IT+0x4b0>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d108      	bne.n	8002616 <HAL_DMA_Start_IT+0x442>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0201 	orr.w	r2, r2, #1
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	e012      	b.n	800263c <HAL_DMA_Start_IT+0x468>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0201 	orr.w	r2, r2, #1
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	e009      	b.n	800263c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800262e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800263c:	7dfb      	ldrb	r3, [r7, #23]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40020010 	.word	0x40020010
 800264c:	40020028 	.word	0x40020028
 8002650:	40020040 	.word	0x40020040
 8002654:	40020058 	.word	0x40020058
 8002658:	40020070 	.word	0x40020070
 800265c:	40020088 	.word	0x40020088
 8002660:	400200a0 	.word	0x400200a0
 8002664:	400200b8 	.word	0x400200b8
 8002668:	40020410 	.word	0x40020410
 800266c:	40020428 	.word	0x40020428
 8002670:	40020440 	.word	0x40020440
 8002674:	40020458 	.word	0x40020458
 8002678:	40020470 	.word	0x40020470
 800267c:	40020488 	.word	0x40020488
 8002680:	400204a0 	.word	0x400204a0
 8002684:	400204b8 	.word	0x400204b8
 8002688:	58025408 	.word	0x58025408
 800268c:	5802541c 	.word	0x5802541c
 8002690:	58025430 	.word	0x58025430
 8002694:	58025444 	.word	0x58025444
 8002698:	58025458 	.word	0x58025458
 800269c:	5802546c 	.word	0x5802546c
 80026a0:	58025480 	.word	0x58025480
 80026a4:	58025494 	.word	0x58025494

080026a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80026b0:	f7ff f908 	bl	80018c4 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e2dc      	b.n	8002c7a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d008      	beq.n	80026de <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2280      	movs	r2, #128	@ 0x80
 80026d0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e2cd      	b.n	8002c7a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a76      	ldr	r2, [pc, #472]	@ (80028bc <HAL_DMA_Abort+0x214>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d04a      	beq.n	800277e <HAL_DMA_Abort+0xd6>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a74      	ldr	r2, [pc, #464]	@ (80028c0 <HAL_DMA_Abort+0x218>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d045      	beq.n	800277e <HAL_DMA_Abort+0xd6>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a73      	ldr	r2, [pc, #460]	@ (80028c4 <HAL_DMA_Abort+0x21c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d040      	beq.n	800277e <HAL_DMA_Abort+0xd6>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a71      	ldr	r2, [pc, #452]	@ (80028c8 <HAL_DMA_Abort+0x220>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d03b      	beq.n	800277e <HAL_DMA_Abort+0xd6>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a70      	ldr	r2, [pc, #448]	@ (80028cc <HAL_DMA_Abort+0x224>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d036      	beq.n	800277e <HAL_DMA_Abort+0xd6>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a6e      	ldr	r2, [pc, #440]	@ (80028d0 <HAL_DMA_Abort+0x228>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d031      	beq.n	800277e <HAL_DMA_Abort+0xd6>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a6d      	ldr	r2, [pc, #436]	@ (80028d4 <HAL_DMA_Abort+0x22c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d02c      	beq.n	800277e <HAL_DMA_Abort+0xd6>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a6b      	ldr	r2, [pc, #428]	@ (80028d8 <HAL_DMA_Abort+0x230>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d027      	beq.n	800277e <HAL_DMA_Abort+0xd6>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a6a      	ldr	r2, [pc, #424]	@ (80028dc <HAL_DMA_Abort+0x234>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d022      	beq.n	800277e <HAL_DMA_Abort+0xd6>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a68      	ldr	r2, [pc, #416]	@ (80028e0 <HAL_DMA_Abort+0x238>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d01d      	beq.n	800277e <HAL_DMA_Abort+0xd6>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a67      	ldr	r2, [pc, #412]	@ (80028e4 <HAL_DMA_Abort+0x23c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d018      	beq.n	800277e <HAL_DMA_Abort+0xd6>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a65      	ldr	r2, [pc, #404]	@ (80028e8 <HAL_DMA_Abort+0x240>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d013      	beq.n	800277e <HAL_DMA_Abort+0xd6>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a64      	ldr	r2, [pc, #400]	@ (80028ec <HAL_DMA_Abort+0x244>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d00e      	beq.n	800277e <HAL_DMA_Abort+0xd6>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a62      	ldr	r2, [pc, #392]	@ (80028f0 <HAL_DMA_Abort+0x248>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d009      	beq.n	800277e <HAL_DMA_Abort+0xd6>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a61      	ldr	r2, [pc, #388]	@ (80028f4 <HAL_DMA_Abort+0x24c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d004      	beq.n	800277e <HAL_DMA_Abort+0xd6>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a5f      	ldr	r2, [pc, #380]	@ (80028f8 <HAL_DMA_Abort+0x250>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d101      	bne.n	8002782 <HAL_DMA_Abort+0xda>
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <HAL_DMA_Abort+0xdc>
 8002782:	2300      	movs	r3, #0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d013      	beq.n	80027b0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 021e 	bic.w	r2, r2, #30
 8002796:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027a6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	e00a      	b.n	80027c6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 020e 	bic.w	r2, r2, #14
 80027be:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a3c      	ldr	r2, [pc, #240]	@ (80028bc <HAL_DMA_Abort+0x214>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d072      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a3a      	ldr	r2, [pc, #232]	@ (80028c0 <HAL_DMA_Abort+0x218>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d06d      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a39      	ldr	r2, [pc, #228]	@ (80028c4 <HAL_DMA_Abort+0x21c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d068      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a37      	ldr	r2, [pc, #220]	@ (80028c8 <HAL_DMA_Abort+0x220>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d063      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a36      	ldr	r2, [pc, #216]	@ (80028cc <HAL_DMA_Abort+0x224>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d05e      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a34      	ldr	r2, [pc, #208]	@ (80028d0 <HAL_DMA_Abort+0x228>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d059      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a33      	ldr	r2, [pc, #204]	@ (80028d4 <HAL_DMA_Abort+0x22c>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d054      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a31      	ldr	r2, [pc, #196]	@ (80028d8 <HAL_DMA_Abort+0x230>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d04f      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a30      	ldr	r2, [pc, #192]	@ (80028dc <HAL_DMA_Abort+0x234>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d04a      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a2e      	ldr	r2, [pc, #184]	@ (80028e0 <HAL_DMA_Abort+0x238>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d045      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a2d      	ldr	r2, [pc, #180]	@ (80028e4 <HAL_DMA_Abort+0x23c>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d040      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a2b      	ldr	r2, [pc, #172]	@ (80028e8 <HAL_DMA_Abort+0x240>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d03b      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a2a      	ldr	r2, [pc, #168]	@ (80028ec <HAL_DMA_Abort+0x244>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d036      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a28      	ldr	r2, [pc, #160]	@ (80028f0 <HAL_DMA_Abort+0x248>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d031      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a27      	ldr	r2, [pc, #156]	@ (80028f4 <HAL_DMA_Abort+0x24c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d02c      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a25      	ldr	r2, [pc, #148]	@ (80028f8 <HAL_DMA_Abort+0x250>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d027      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a24      	ldr	r2, [pc, #144]	@ (80028fc <HAL_DMA_Abort+0x254>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d022      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a22      	ldr	r2, [pc, #136]	@ (8002900 <HAL_DMA_Abort+0x258>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d01d      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a21      	ldr	r2, [pc, #132]	@ (8002904 <HAL_DMA_Abort+0x25c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d018      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a1f      	ldr	r2, [pc, #124]	@ (8002908 <HAL_DMA_Abort+0x260>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d013      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a1e      	ldr	r2, [pc, #120]	@ (800290c <HAL_DMA_Abort+0x264>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d00e      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a1c      	ldr	r2, [pc, #112]	@ (8002910 <HAL_DMA_Abort+0x268>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d009      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a1b      	ldr	r2, [pc, #108]	@ (8002914 <HAL_DMA_Abort+0x26c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d004      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a19      	ldr	r2, [pc, #100]	@ (8002918 <HAL_DMA_Abort+0x270>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d132      	bne.n	800291c <HAL_DMA_Abort+0x274>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e031      	b.n	800291e <HAL_DMA_Abort+0x276>
 80028ba:	bf00      	nop
 80028bc:	40020010 	.word	0x40020010
 80028c0:	40020028 	.word	0x40020028
 80028c4:	40020040 	.word	0x40020040
 80028c8:	40020058 	.word	0x40020058
 80028cc:	40020070 	.word	0x40020070
 80028d0:	40020088 	.word	0x40020088
 80028d4:	400200a0 	.word	0x400200a0
 80028d8:	400200b8 	.word	0x400200b8
 80028dc:	40020410 	.word	0x40020410
 80028e0:	40020428 	.word	0x40020428
 80028e4:	40020440 	.word	0x40020440
 80028e8:	40020458 	.word	0x40020458
 80028ec:	40020470 	.word	0x40020470
 80028f0:	40020488 	.word	0x40020488
 80028f4:	400204a0 	.word	0x400204a0
 80028f8:	400204b8 	.word	0x400204b8
 80028fc:	58025408 	.word	0x58025408
 8002900:	5802541c 	.word	0x5802541c
 8002904:	58025430 	.word	0x58025430
 8002908:	58025444 	.word	0x58025444
 800290c:	58025458 	.word	0x58025458
 8002910:	5802546c 	.word	0x5802546c
 8002914:	58025480 	.word	0x58025480
 8002918:	58025494 	.word	0x58025494
 800291c:	2300      	movs	r3, #0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d007      	beq.n	8002932 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800292c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002930:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a6d      	ldr	r2, [pc, #436]	@ (8002aec <HAL_DMA_Abort+0x444>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d04a      	beq.n	80029d2 <HAL_DMA_Abort+0x32a>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a6b      	ldr	r2, [pc, #428]	@ (8002af0 <HAL_DMA_Abort+0x448>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d045      	beq.n	80029d2 <HAL_DMA_Abort+0x32a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a6a      	ldr	r2, [pc, #424]	@ (8002af4 <HAL_DMA_Abort+0x44c>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d040      	beq.n	80029d2 <HAL_DMA_Abort+0x32a>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a68      	ldr	r2, [pc, #416]	@ (8002af8 <HAL_DMA_Abort+0x450>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d03b      	beq.n	80029d2 <HAL_DMA_Abort+0x32a>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a67      	ldr	r2, [pc, #412]	@ (8002afc <HAL_DMA_Abort+0x454>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d036      	beq.n	80029d2 <HAL_DMA_Abort+0x32a>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a65      	ldr	r2, [pc, #404]	@ (8002b00 <HAL_DMA_Abort+0x458>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d031      	beq.n	80029d2 <HAL_DMA_Abort+0x32a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a64      	ldr	r2, [pc, #400]	@ (8002b04 <HAL_DMA_Abort+0x45c>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d02c      	beq.n	80029d2 <HAL_DMA_Abort+0x32a>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a62      	ldr	r2, [pc, #392]	@ (8002b08 <HAL_DMA_Abort+0x460>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d027      	beq.n	80029d2 <HAL_DMA_Abort+0x32a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a61      	ldr	r2, [pc, #388]	@ (8002b0c <HAL_DMA_Abort+0x464>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d022      	beq.n	80029d2 <HAL_DMA_Abort+0x32a>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a5f      	ldr	r2, [pc, #380]	@ (8002b10 <HAL_DMA_Abort+0x468>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d01d      	beq.n	80029d2 <HAL_DMA_Abort+0x32a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a5e      	ldr	r2, [pc, #376]	@ (8002b14 <HAL_DMA_Abort+0x46c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d018      	beq.n	80029d2 <HAL_DMA_Abort+0x32a>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a5c      	ldr	r2, [pc, #368]	@ (8002b18 <HAL_DMA_Abort+0x470>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d013      	beq.n	80029d2 <HAL_DMA_Abort+0x32a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a5b      	ldr	r2, [pc, #364]	@ (8002b1c <HAL_DMA_Abort+0x474>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d00e      	beq.n	80029d2 <HAL_DMA_Abort+0x32a>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a59      	ldr	r2, [pc, #356]	@ (8002b20 <HAL_DMA_Abort+0x478>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d009      	beq.n	80029d2 <HAL_DMA_Abort+0x32a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a58      	ldr	r2, [pc, #352]	@ (8002b24 <HAL_DMA_Abort+0x47c>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d004      	beq.n	80029d2 <HAL_DMA_Abort+0x32a>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a56      	ldr	r2, [pc, #344]	@ (8002b28 <HAL_DMA_Abort+0x480>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d108      	bne.n	80029e4 <HAL_DMA_Abort+0x33c>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0201 	bic.w	r2, r2, #1
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	e007      	b.n	80029f4 <HAL_DMA_Abort+0x34c>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0201 	bic.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80029f4:	e013      	b.n	8002a1e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029f6:	f7fe ff65 	bl	80018c4 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b05      	cmp	r3, #5
 8002a02:	d90c      	bls.n	8002a1e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2220      	movs	r2, #32
 8002a08:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e12d      	b.n	8002c7a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1e5      	bne.n	80029f6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a2f      	ldr	r2, [pc, #188]	@ (8002aec <HAL_DMA_Abort+0x444>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d04a      	beq.n	8002aca <HAL_DMA_Abort+0x422>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a2d      	ldr	r2, [pc, #180]	@ (8002af0 <HAL_DMA_Abort+0x448>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d045      	beq.n	8002aca <HAL_DMA_Abort+0x422>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a2c      	ldr	r2, [pc, #176]	@ (8002af4 <HAL_DMA_Abort+0x44c>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d040      	beq.n	8002aca <HAL_DMA_Abort+0x422>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a2a      	ldr	r2, [pc, #168]	@ (8002af8 <HAL_DMA_Abort+0x450>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d03b      	beq.n	8002aca <HAL_DMA_Abort+0x422>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a29      	ldr	r2, [pc, #164]	@ (8002afc <HAL_DMA_Abort+0x454>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d036      	beq.n	8002aca <HAL_DMA_Abort+0x422>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a27      	ldr	r2, [pc, #156]	@ (8002b00 <HAL_DMA_Abort+0x458>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d031      	beq.n	8002aca <HAL_DMA_Abort+0x422>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a26      	ldr	r2, [pc, #152]	@ (8002b04 <HAL_DMA_Abort+0x45c>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d02c      	beq.n	8002aca <HAL_DMA_Abort+0x422>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a24      	ldr	r2, [pc, #144]	@ (8002b08 <HAL_DMA_Abort+0x460>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d027      	beq.n	8002aca <HAL_DMA_Abort+0x422>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a23      	ldr	r2, [pc, #140]	@ (8002b0c <HAL_DMA_Abort+0x464>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d022      	beq.n	8002aca <HAL_DMA_Abort+0x422>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a21      	ldr	r2, [pc, #132]	@ (8002b10 <HAL_DMA_Abort+0x468>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d01d      	beq.n	8002aca <HAL_DMA_Abort+0x422>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a20      	ldr	r2, [pc, #128]	@ (8002b14 <HAL_DMA_Abort+0x46c>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d018      	beq.n	8002aca <HAL_DMA_Abort+0x422>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a1e      	ldr	r2, [pc, #120]	@ (8002b18 <HAL_DMA_Abort+0x470>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d013      	beq.n	8002aca <HAL_DMA_Abort+0x422>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a1d      	ldr	r2, [pc, #116]	@ (8002b1c <HAL_DMA_Abort+0x474>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d00e      	beq.n	8002aca <HAL_DMA_Abort+0x422>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8002b20 <HAL_DMA_Abort+0x478>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d009      	beq.n	8002aca <HAL_DMA_Abort+0x422>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a1a      	ldr	r2, [pc, #104]	@ (8002b24 <HAL_DMA_Abort+0x47c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d004      	beq.n	8002aca <HAL_DMA_Abort+0x422>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a18      	ldr	r2, [pc, #96]	@ (8002b28 <HAL_DMA_Abort+0x480>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d101      	bne.n	8002ace <HAL_DMA_Abort+0x426>
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <HAL_DMA_Abort+0x428>
 8002ace:	2300      	movs	r3, #0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d02b      	beq.n	8002b2c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ade:	f003 031f 	and.w	r3, r3, #31
 8002ae2:	223f      	movs	r2, #63	@ 0x3f
 8002ae4:	409a      	lsls	r2, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	609a      	str	r2, [r3, #8]
 8002aea:	e02a      	b.n	8002b42 <HAL_DMA_Abort+0x49a>
 8002aec:	40020010 	.word	0x40020010
 8002af0:	40020028 	.word	0x40020028
 8002af4:	40020040 	.word	0x40020040
 8002af8:	40020058 	.word	0x40020058
 8002afc:	40020070 	.word	0x40020070
 8002b00:	40020088 	.word	0x40020088
 8002b04:	400200a0 	.word	0x400200a0
 8002b08:	400200b8 	.word	0x400200b8
 8002b0c:	40020410 	.word	0x40020410
 8002b10:	40020428 	.word	0x40020428
 8002b14:	40020440 	.word	0x40020440
 8002b18:	40020458 	.word	0x40020458
 8002b1c:	40020470 	.word	0x40020470
 8002b20:	40020488 	.word	0x40020488
 8002b24:	400204a0 	.word	0x400204a0
 8002b28:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b30:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b36:	f003 031f 	and.w	r3, r3, #31
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	409a      	lsls	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a4f      	ldr	r2, [pc, #316]	@ (8002c84 <HAL_DMA_Abort+0x5dc>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d072      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a4d      	ldr	r2, [pc, #308]	@ (8002c88 <HAL_DMA_Abort+0x5e0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d06d      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a4c      	ldr	r2, [pc, #304]	@ (8002c8c <HAL_DMA_Abort+0x5e4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d068      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a4a      	ldr	r2, [pc, #296]	@ (8002c90 <HAL_DMA_Abort+0x5e8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d063      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a49      	ldr	r2, [pc, #292]	@ (8002c94 <HAL_DMA_Abort+0x5ec>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d05e      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a47      	ldr	r2, [pc, #284]	@ (8002c98 <HAL_DMA_Abort+0x5f0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d059      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a46      	ldr	r2, [pc, #280]	@ (8002c9c <HAL_DMA_Abort+0x5f4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d054      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a44      	ldr	r2, [pc, #272]	@ (8002ca0 <HAL_DMA_Abort+0x5f8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d04f      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a43      	ldr	r2, [pc, #268]	@ (8002ca4 <HAL_DMA_Abort+0x5fc>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d04a      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a41      	ldr	r2, [pc, #260]	@ (8002ca8 <HAL_DMA_Abort+0x600>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d045      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a40      	ldr	r2, [pc, #256]	@ (8002cac <HAL_DMA_Abort+0x604>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d040      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a3e      	ldr	r2, [pc, #248]	@ (8002cb0 <HAL_DMA_Abort+0x608>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d03b      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a3d      	ldr	r2, [pc, #244]	@ (8002cb4 <HAL_DMA_Abort+0x60c>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d036      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a3b      	ldr	r2, [pc, #236]	@ (8002cb8 <HAL_DMA_Abort+0x610>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d031      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a3a      	ldr	r2, [pc, #232]	@ (8002cbc <HAL_DMA_Abort+0x614>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d02c      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a38      	ldr	r2, [pc, #224]	@ (8002cc0 <HAL_DMA_Abort+0x618>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d027      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a37      	ldr	r2, [pc, #220]	@ (8002cc4 <HAL_DMA_Abort+0x61c>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d022      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a35      	ldr	r2, [pc, #212]	@ (8002cc8 <HAL_DMA_Abort+0x620>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d01d      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a34      	ldr	r2, [pc, #208]	@ (8002ccc <HAL_DMA_Abort+0x624>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d018      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a32      	ldr	r2, [pc, #200]	@ (8002cd0 <HAL_DMA_Abort+0x628>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d013      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a31      	ldr	r2, [pc, #196]	@ (8002cd4 <HAL_DMA_Abort+0x62c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d00e      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a2f      	ldr	r2, [pc, #188]	@ (8002cd8 <HAL_DMA_Abort+0x630>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d009      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a2e      	ldr	r2, [pc, #184]	@ (8002cdc <HAL_DMA_Abort+0x634>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d004      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a2c      	ldr	r2, [pc, #176]	@ (8002ce0 <HAL_DMA_Abort+0x638>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d101      	bne.n	8002c36 <HAL_DMA_Abort+0x58e>
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <HAL_DMA_Abort+0x590>
 8002c36:	2300      	movs	r3, #0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d015      	beq.n	8002c68 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002c44:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00c      	beq.n	8002c68 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c5c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002c66:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40020010 	.word	0x40020010
 8002c88:	40020028 	.word	0x40020028
 8002c8c:	40020040 	.word	0x40020040
 8002c90:	40020058 	.word	0x40020058
 8002c94:	40020070 	.word	0x40020070
 8002c98:	40020088 	.word	0x40020088
 8002c9c:	400200a0 	.word	0x400200a0
 8002ca0:	400200b8 	.word	0x400200b8
 8002ca4:	40020410 	.word	0x40020410
 8002ca8:	40020428 	.word	0x40020428
 8002cac:	40020440 	.word	0x40020440
 8002cb0:	40020458 	.word	0x40020458
 8002cb4:	40020470 	.word	0x40020470
 8002cb8:	40020488 	.word	0x40020488
 8002cbc:	400204a0 	.word	0x400204a0
 8002cc0:	400204b8 	.word	0x400204b8
 8002cc4:	58025408 	.word	0x58025408
 8002cc8:	5802541c 	.word	0x5802541c
 8002ccc:	58025430 	.word	0x58025430
 8002cd0:	58025444 	.word	0x58025444
 8002cd4:	58025458 	.word	0x58025458
 8002cd8:	5802546c 	.word	0x5802546c
 8002cdc:	58025480 	.word	0x58025480
 8002ce0:	58025494 	.word	0x58025494

08002ce4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08a      	sub	sp, #40	@ 0x28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cf0:	4b67      	ldr	r3, [pc, #412]	@ (8002e90 <HAL_DMA_IRQHandler+0x1ac>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a67      	ldr	r2, [pc, #412]	@ (8002e94 <HAL_DMA_IRQHandler+0x1b0>)
 8002cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfa:	0a9b      	lsrs	r3, r3, #10
 8002cfc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d02:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d08:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a5f      	ldr	r2, [pc, #380]	@ (8002e98 <HAL_DMA_IRQHandler+0x1b4>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d04a      	beq.n	8002db6 <HAL_DMA_IRQHandler+0xd2>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a5d      	ldr	r2, [pc, #372]	@ (8002e9c <HAL_DMA_IRQHandler+0x1b8>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d045      	beq.n	8002db6 <HAL_DMA_IRQHandler+0xd2>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a5c      	ldr	r2, [pc, #368]	@ (8002ea0 <HAL_DMA_IRQHandler+0x1bc>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d040      	beq.n	8002db6 <HAL_DMA_IRQHandler+0xd2>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a5a      	ldr	r2, [pc, #360]	@ (8002ea4 <HAL_DMA_IRQHandler+0x1c0>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d03b      	beq.n	8002db6 <HAL_DMA_IRQHandler+0xd2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a59      	ldr	r2, [pc, #356]	@ (8002ea8 <HAL_DMA_IRQHandler+0x1c4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d036      	beq.n	8002db6 <HAL_DMA_IRQHandler+0xd2>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a57      	ldr	r2, [pc, #348]	@ (8002eac <HAL_DMA_IRQHandler+0x1c8>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d031      	beq.n	8002db6 <HAL_DMA_IRQHandler+0xd2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a56      	ldr	r2, [pc, #344]	@ (8002eb0 <HAL_DMA_IRQHandler+0x1cc>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d02c      	beq.n	8002db6 <HAL_DMA_IRQHandler+0xd2>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a54      	ldr	r2, [pc, #336]	@ (8002eb4 <HAL_DMA_IRQHandler+0x1d0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d027      	beq.n	8002db6 <HAL_DMA_IRQHandler+0xd2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a53      	ldr	r2, [pc, #332]	@ (8002eb8 <HAL_DMA_IRQHandler+0x1d4>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d022      	beq.n	8002db6 <HAL_DMA_IRQHandler+0xd2>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a51      	ldr	r2, [pc, #324]	@ (8002ebc <HAL_DMA_IRQHandler+0x1d8>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d01d      	beq.n	8002db6 <HAL_DMA_IRQHandler+0xd2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a50      	ldr	r2, [pc, #320]	@ (8002ec0 <HAL_DMA_IRQHandler+0x1dc>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d018      	beq.n	8002db6 <HAL_DMA_IRQHandler+0xd2>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a4e      	ldr	r2, [pc, #312]	@ (8002ec4 <HAL_DMA_IRQHandler+0x1e0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d013      	beq.n	8002db6 <HAL_DMA_IRQHandler+0xd2>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a4d      	ldr	r2, [pc, #308]	@ (8002ec8 <HAL_DMA_IRQHandler+0x1e4>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d00e      	beq.n	8002db6 <HAL_DMA_IRQHandler+0xd2>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a4b      	ldr	r2, [pc, #300]	@ (8002ecc <HAL_DMA_IRQHandler+0x1e8>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d009      	beq.n	8002db6 <HAL_DMA_IRQHandler+0xd2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a4a      	ldr	r2, [pc, #296]	@ (8002ed0 <HAL_DMA_IRQHandler+0x1ec>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d004      	beq.n	8002db6 <HAL_DMA_IRQHandler+0xd2>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a48      	ldr	r2, [pc, #288]	@ (8002ed4 <HAL_DMA_IRQHandler+0x1f0>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d101      	bne.n	8002dba <HAL_DMA_IRQHandler+0xd6>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <HAL_DMA_IRQHandler+0xd8>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 842b 	beq.w	8003618 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc6:	f003 031f 	and.w	r3, r3, #31
 8002dca:	2208      	movs	r2, #8
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 80a2 	beq.w	8002f1c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a2e      	ldr	r2, [pc, #184]	@ (8002e98 <HAL_DMA_IRQHandler+0x1b4>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d04a      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x194>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a2d      	ldr	r2, [pc, #180]	@ (8002e9c <HAL_DMA_IRQHandler+0x1b8>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d045      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x194>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a2b      	ldr	r2, [pc, #172]	@ (8002ea0 <HAL_DMA_IRQHandler+0x1bc>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d040      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x194>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a2a      	ldr	r2, [pc, #168]	@ (8002ea4 <HAL_DMA_IRQHandler+0x1c0>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d03b      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x194>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a28      	ldr	r2, [pc, #160]	@ (8002ea8 <HAL_DMA_IRQHandler+0x1c4>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d036      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x194>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a27      	ldr	r2, [pc, #156]	@ (8002eac <HAL_DMA_IRQHandler+0x1c8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d031      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x194>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a25      	ldr	r2, [pc, #148]	@ (8002eb0 <HAL_DMA_IRQHandler+0x1cc>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d02c      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x194>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a24      	ldr	r2, [pc, #144]	@ (8002eb4 <HAL_DMA_IRQHandler+0x1d0>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d027      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x194>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a22      	ldr	r2, [pc, #136]	@ (8002eb8 <HAL_DMA_IRQHandler+0x1d4>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d022      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x194>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a21      	ldr	r2, [pc, #132]	@ (8002ebc <HAL_DMA_IRQHandler+0x1d8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d01d      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x194>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a1f      	ldr	r2, [pc, #124]	@ (8002ec0 <HAL_DMA_IRQHandler+0x1dc>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d018      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x194>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ec4 <HAL_DMA_IRQHandler+0x1e0>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d013      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x194>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a1c      	ldr	r2, [pc, #112]	@ (8002ec8 <HAL_DMA_IRQHandler+0x1e4>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d00e      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x194>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a1b      	ldr	r2, [pc, #108]	@ (8002ecc <HAL_DMA_IRQHandler+0x1e8>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d009      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x194>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a19      	ldr	r2, [pc, #100]	@ (8002ed0 <HAL_DMA_IRQHandler+0x1ec>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d004      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x194>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a18      	ldr	r2, [pc, #96]	@ (8002ed4 <HAL_DMA_IRQHandler+0x1f0>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d12f      	bne.n	8002ed8 <HAL_DMA_IRQHandler+0x1f4>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0304 	and.w	r3, r3, #4
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	bf14      	ite	ne
 8002e86:	2301      	movne	r3, #1
 8002e88:	2300      	moveq	r3, #0
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	e02e      	b.n	8002eec <HAL_DMA_IRQHandler+0x208>
 8002e8e:	bf00      	nop
 8002e90:	24000004 	.word	0x24000004
 8002e94:	1b4e81b5 	.word	0x1b4e81b5
 8002e98:	40020010 	.word	0x40020010
 8002e9c:	40020028 	.word	0x40020028
 8002ea0:	40020040 	.word	0x40020040
 8002ea4:	40020058 	.word	0x40020058
 8002ea8:	40020070 	.word	0x40020070
 8002eac:	40020088 	.word	0x40020088
 8002eb0:	400200a0 	.word	0x400200a0
 8002eb4:	400200b8 	.word	0x400200b8
 8002eb8:	40020410 	.word	0x40020410
 8002ebc:	40020428 	.word	0x40020428
 8002ec0:	40020440 	.word	0x40020440
 8002ec4:	40020458 	.word	0x40020458
 8002ec8:	40020470 	.word	0x40020470
 8002ecc:	40020488 	.word	0x40020488
 8002ed0:	400204a0 	.word	0x400204a0
 8002ed4:	400204b8 	.word	0x400204b8
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	bf14      	ite	ne
 8002ee6:	2301      	movne	r3, #1
 8002ee8:	2300      	moveq	r3, #0
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d015      	beq.n	8002f1c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0204 	bic.w	r2, r2, #4
 8002efe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f04:	f003 031f 	and.w	r3, r3, #31
 8002f08:	2208      	movs	r2, #8
 8002f0a:	409a      	lsls	r2, r3
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f14:	f043 0201 	orr.w	r2, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f20:	f003 031f 	and.w	r3, r3, #31
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	fa22 f303 	lsr.w	r3, r2, r3
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d06e      	beq.n	8003010 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a69      	ldr	r2, [pc, #420]	@ (80030dc <HAL_DMA_IRQHandler+0x3f8>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d04a      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x2ee>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a67      	ldr	r2, [pc, #412]	@ (80030e0 <HAL_DMA_IRQHandler+0x3fc>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d045      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x2ee>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a66      	ldr	r2, [pc, #408]	@ (80030e4 <HAL_DMA_IRQHandler+0x400>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d040      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x2ee>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a64      	ldr	r2, [pc, #400]	@ (80030e8 <HAL_DMA_IRQHandler+0x404>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d03b      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x2ee>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a63      	ldr	r2, [pc, #396]	@ (80030ec <HAL_DMA_IRQHandler+0x408>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d036      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x2ee>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a61      	ldr	r2, [pc, #388]	@ (80030f0 <HAL_DMA_IRQHandler+0x40c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d031      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x2ee>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a60      	ldr	r2, [pc, #384]	@ (80030f4 <HAL_DMA_IRQHandler+0x410>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d02c      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x2ee>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a5e      	ldr	r2, [pc, #376]	@ (80030f8 <HAL_DMA_IRQHandler+0x414>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d027      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x2ee>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a5d      	ldr	r2, [pc, #372]	@ (80030fc <HAL_DMA_IRQHandler+0x418>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d022      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x2ee>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a5b      	ldr	r2, [pc, #364]	@ (8003100 <HAL_DMA_IRQHandler+0x41c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d01d      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x2ee>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a5a      	ldr	r2, [pc, #360]	@ (8003104 <HAL_DMA_IRQHandler+0x420>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d018      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x2ee>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a58      	ldr	r2, [pc, #352]	@ (8003108 <HAL_DMA_IRQHandler+0x424>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d013      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x2ee>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a57      	ldr	r2, [pc, #348]	@ (800310c <HAL_DMA_IRQHandler+0x428>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d00e      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x2ee>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a55      	ldr	r2, [pc, #340]	@ (8003110 <HAL_DMA_IRQHandler+0x42c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d009      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x2ee>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a54      	ldr	r2, [pc, #336]	@ (8003114 <HAL_DMA_IRQHandler+0x430>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d004      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x2ee>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a52      	ldr	r2, [pc, #328]	@ (8003118 <HAL_DMA_IRQHandler+0x434>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d10a      	bne.n	8002fe8 <HAL_DMA_IRQHandler+0x304>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	bf14      	ite	ne
 8002fe0:	2301      	movne	r3, #1
 8002fe2:	2300      	moveq	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	e003      	b.n	8002ff0 <HAL_DMA_IRQHandler+0x30c>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2300      	movs	r3, #0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00d      	beq.n	8003010 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff8:	f003 031f 	and.w	r3, r3, #31
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	409a      	lsls	r2, r3
 8003000:	6a3b      	ldr	r3, [r7, #32]
 8003002:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003008:	f043 0202 	orr.w	r2, r3, #2
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	2204      	movs	r2, #4
 800301a:	409a      	lsls	r2, r3
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	4013      	ands	r3, r2
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 808f 	beq.w	8003144 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a2c      	ldr	r2, [pc, #176]	@ (80030dc <HAL_DMA_IRQHandler+0x3f8>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d04a      	beq.n	80030c6 <HAL_DMA_IRQHandler+0x3e2>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a2a      	ldr	r2, [pc, #168]	@ (80030e0 <HAL_DMA_IRQHandler+0x3fc>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d045      	beq.n	80030c6 <HAL_DMA_IRQHandler+0x3e2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a29      	ldr	r2, [pc, #164]	@ (80030e4 <HAL_DMA_IRQHandler+0x400>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d040      	beq.n	80030c6 <HAL_DMA_IRQHandler+0x3e2>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a27      	ldr	r2, [pc, #156]	@ (80030e8 <HAL_DMA_IRQHandler+0x404>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d03b      	beq.n	80030c6 <HAL_DMA_IRQHandler+0x3e2>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a26      	ldr	r2, [pc, #152]	@ (80030ec <HAL_DMA_IRQHandler+0x408>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d036      	beq.n	80030c6 <HAL_DMA_IRQHandler+0x3e2>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a24      	ldr	r2, [pc, #144]	@ (80030f0 <HAL_DMA_IRQHandler+0x40c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d031      	beq.n	80030c6 <HAL_DMA_IRQHandler+0x3e2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a23      	ldr	r2, [pc, #140]	@ (80030f4 <HAL_DMA_IRQHandler+0x410>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d02c      	beq.n	80030c6 <HAL_DMA_IRQHandler+0x3e2>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a21      	ldr	r2, [pc, #132]	@ (80030f8 <HAL_DMA_IRQHandler+0x414>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d027      	beq.n	80030c6 <HAL_DMA_IRQHandler+0x3e2>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a20      	ldr	r2, [pc, #128]	@ (80030fc <HAL_DMA_IRQHandler+0x418>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d022      	beq.n	80030c6 <HAL_DMA_IRQHandler+0x3e2>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a1e      	ldr	r2, [pc, #120]	@ (8003100 <HAL_DMA_IRQHandler+0x41c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d01d      	beq.n	80030c6 <HAL_DMA_IRQHandler+0x3e2>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a1d      	ldr	r2, [pc, #116]	@ (8003104 <HAL_DMA_IRQHandler+0x420>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d018      	beq.n	80030c6 <HAL_DMA_IRQHandler+0x3e2>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a1b      	ldr	r2, [pc, #108]	@ (8003108 <HAL_DMA_IRQHandler+0x424>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d013      	beq.n	80030c6 <HAL_DMA_IRQHandler+0x3e2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a1a      	ldr	r2, [pc, #104]	@ (800310c <HAL_DMA_IRQHandler+0x428>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d00e      	beq.n	80030c6 <HAL_DMA_IRQHandler+0x3e2>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a18      	ldr	r2, [pc, #96]	@ (8003110 <HAL_DMA_IRQHandler+0x42c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d009      	beq.n	80030c6 <HAL_DMA_IRQHandler+0x3e2>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a17      	ldr	r2, [pc, #92]	@ (8003114 <HAL_DMA_IRQHandler+0x430>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d004      	beq.n	80030c6 <HAL_DMA_IRQHandler+0x3e2>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a15      	ldr	r2, [pc, #84]	@ (8003118 <HAL_DMA_IRQHandler+0x434>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d12a      	bne.n	800311c <HAL_DMA_IRQHandler+0x438>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	bf14      	ite	ne
 80030d4:	2301      	movne	r3, #1
 80030d6:	2300      	moveq	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	e023      	b.n	8003124 <HAL_DMA_IRQHandler+0x440>
 80030dc:	40020010 	.word	0x40020010
 80030e0:	40020028 	.word	0x40020028
 80030e4:	40020040 	.word	0x40020040
 80030e8:	40020058 	.word	0x40020058
 80030ec:	40020070 	.word	0x40020070
 80030f0:	40020088 	.word	0x40020088
 80030f4:	400200a0 	.word	0x400200a0
 80030f8:	400200b8 	.word	0x400200b8
 80030fc:	40020410 	.word	0x40020410
 8003100:	40020428 	.word	0x40020428
 8003104:	40020440 	.word	0x40020440
 8003108:	40020458 	.word	0x40020458
 800310c:	40020470 	.word	0x40020470
 8003110:	40020488 	.word	0x40020488
 8003114:	400204a0 	.word	0x400204a0
 8003118:	400204b8 	.word	0x400204b8
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2300      	movs	r3, #0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00d      	beq.n	8003144 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312c:	f003 031f 	and.w	r3, r3, #31
 8003130:	2204      	movs	r2, #4
 8003132:	409a      	lsls	r2, r3
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800313c:	f043 0204 	orr.w	r2, r3, #4
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003148:	f003 031f 	and.w	r3, r3, #31
 800314c:	2210      	movs	r2, #16
 800314e:	409a      	lsls	r2, r3
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	4013      	ands	r3, r2
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 80a6 	beq.w	80032a6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a85      	ldr	r2, [pc, #532]	@ (8003374 <HAL_DMA_IRQHandler+0x690>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d04a      	beq.n	80031fa <HAL_DMA_IRQHandler+0x516>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a83      	ldr	r2, [pc, #524]	@ (8003378 <HAL_DMA_IRQHandler+0x694>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d045      	beq.n	80031fa <HAL_DMA_IRQHandler+0x516>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a82      	ldr	r2, [pc, #520]	@ (800337c <HAL_DMA_IRQHandler+0x698>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d040      	beq.n	80031fa <HAL_DMA_IRQHandler+0x516>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a80      	ldr	r2, [pc, #512]	@ (8003380 <HAL_DMA_IRQHandler+0x69c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d03b      	beq.n	80031fa <HAL_DMA_IRQHandler+0x516>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a7f      	ldr	r2, [pc, #508]	@ (8003384 <HAL_DMA_IRQHandler+0x6a0>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d036      	beq.n	80031fa <HAL_DMA_IRQHandler+0x516>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a7d      	ldr	r2, [pc, #500]	@ (8003388 <HAL_DMA_IRQHandler+0x6a4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d031      	beq.n	80031fa <HAL_DMA_IRQHandler+0x516>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a7c      	ldr	r2, [pc, #496]	@ (800338c <HAL_DMA_IRQHandler+0x6a8>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d02c      	beq.n	80031fa <HAL_DMA_IRQHandler+0x516>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a7a      	ldr	r2, [pc, #488]	@ (8003390 <HAL_DMA_IRQHandler+0x6ac>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d027      	beq.n	80031fa <HAL_DMA_IRQHandler+0x516>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a79      	ldr	r2, [pc, #484]	@ (8003394 <HAL_DMA_IRQHandler+0x6b0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d022      	beq.n	80031fa <HAL_DMA_IRQHandler+0x516>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a77      	ldr	r2, [pc, #476]	@ (8003398 <HAL_DMA_IRQHandler+0x6b4>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d01d      	beq.n	80031fa <HAL_DMA_IRQHandler+0x516>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a76      	ldr	r2, [pc, #472]	@ (800339c <HAL_DMA_IRQHandler+0x6b8>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d018      	beq.n	80031fa <HAL_DMA_IRQHandler+0x516>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a74      	ldr	r2, [pc, #464]	@ (80033a0 <HAL_DMA_IRQHandler+0x6bc>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d013      	beq.n	80031fa <HAL_DMA_IRQHandler+0x516>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a73      	ldr	r2, [pc, #460]	@ (80033a4 <HAL_DMA_IRQHandler+0x6c0>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d00e      	beq.n	80031fa <HAL_DMA_IRQHandler+0x516>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a71      	ldr	r2, [pc, #452]	@ (80033a8 <HAL_DMA_IRQHandler+0x6c4>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d009      	beq.n	80031fa <HAL_DMA_IRQHandler+0x516>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a70      	ldr	r2, [pc, #448]	@ (80033ac <HAL_DMA_IRQHandler+0x6c8>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d004      	beq.n	80031fa <HAL_DMA_IRQHandler+0x516>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a6e      	ldr	r2, [pc, #440]	@ (80033b0 <HAL_DMA_IRQHandler+0x6cc>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d10a      	bne.n	8003210 <HAL_DMA_IRQHandler+0x52c>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0308 	and.w	r3, r3, #8
 8003204:	2b00      	cmp	r3, #0
 8003206:	bf14      	ite	ne
 8003208:	2301      	movne	r3, #1
 800320a:	2300      	moveq	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	e009      	b.n	8003224 <HAL_DMA_IRQHandler+0x540>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0304 	and.w	r3, r3, #4
 800321a:	2b00      	cmp	r3, #0
 800321c:	bf14      	ite	ne
 800321e:	2301      	movne	r3, #1
 8003220:	2300      	moveq	r3, #0
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d03e      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800322c:	f003 031f 	and.w	r3, r3, #31
 8003230:	2210      	movs	r2, #16
 8003232:	409a      	lsls	r2, r3
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d018      	beq.n	8003278 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d108      	bne.n	8003266 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003258:	2b00      	cmp	r3, #0
 800325a:	d024      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	4798      	blx	r3
 8003264:	e01f      	b.n	80032a6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800326a:	2b00      	cmp	r3, #0
 800326c:	d01b      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	4798      	blx	r3
 8003276:	e016      	b.n	80032a6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003282:	2b00      	cmp	r3, #0
 8003284:	d107      	bne.n	8003296 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0208 	bic.w	r2, r2, #8
 8003294:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032aa:	f003 031f 	and.w	r3, r3, #31
 80032ae:	2220      	movs	r2, #32
 80032b0:	409a      	lsls	r2, r3
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	4013      	ands	r3, r2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 8110 	beq.w	80034dc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a2c      	ldr	r2, [pc, #176]	@ (8003374 <HAL_DMA_IRQHandler+0x690>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d04a      	beq.n	800335c <HAL_DMA_IRQHandler+0x678>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a2b      	ldr	r2, [pc, #172]	@ (8003378 <HAL_DMA_IRQHandler+0x694>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d045      	beq.n	800335c <HAL_DMA_IRQHandler+0x678>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a29      	ldr	r2, [pc, #164]	@ (800337c <HAL_DMA_IRQHandler+0x698>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d040      	beq.n	800335c <HAL_DMA_IRQHandler+0x678>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a28      	ldr	r2, [pc, #160]	@ (8003380 <HAL_DMA_IRQHandler+0x69c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d03b      	beq.n	800335c <HAL_DMA_IRQHandler+0x678>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a26      	ldr	r2, [pc, #152]	@ (8003384 <HAL_DMA_IRQHandler+0x6a0>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d036      	beq.n	800335c <HAL_DMA_IRQHandler+0x678>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a25      	ldr	r2, [pc, #148]	@ (8003388 <HAL_DMA_IRQHandler+0x6a4>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d031      	beq.n	800335c <HAL_DMA_IRQHandler+0x678>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a23      	ldr	r2, [pc, #140]	@ (800338c <HAL_DMA_IRQHandler+0x6a8>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d02c      	beq.n	800335c <HAL_DMA_IRQHandler+0x678>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a22      	ldr	r2, [pc, #136]	@ (8003390 <HAL_DMA_IRQHandler+0x6ac>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d027      	beq.n	800335c <HAL_DMA_IRQHandler+0x678>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a20      	ldr	r2, [pc, #128]	@ (8003394 <HAL_DMA_IRQHandler+0x6b0>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d022      	beq.n	800335c <HAL_DMA_IRQHandler+0x678>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a1f      	ldr	r2, [pc, #124]	@ (8003398 <HAL_DMA_IRQHandler+0x6b4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d01d      	beq.n	800335c <HAL_DMA_IRQHandler+0x678>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a1d      	ldr	r2, [pc, #116]	@ (800339c <HAL_DMA_IRQHandler+0x6b8>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d018      	beq.n	800335c <HAL_DMA_IRQHandler+0x678>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a1c      	ldr	r2, [pc, #112]	@ (80033a0 <HAL_DMA_IRQHandler+0x6bc>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d013      	beq.n	800335c <HAL_DMA_IRQHandler+0x678>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a1a      	ldr	r2, [pc, #104]	@ (80033a4 <HAL_DMA_IRQHandler+0x6c0>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d00e      	beq.n	800335c <HAL_DMA_IRQHandler+0x678>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a19      	ldr	r2, [pc, #100]	@ (80033a8 <HAL_DMA_IRQHandler+0x6c4>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d009      	beq.n	800335c <HAL_DMA_IRQHandler+0x678>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a17      	ldr	r2, [pc, #92]	@ (80033ac <HAL_DMA_IRQHandler+0x6c8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d004      	beq.n	800335c <HAL_DMA_IRQHandler+0x678>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a16      	ldr	r2, [pc, #88]	@ (80033b0 <HAL_DMA_IRQHandler+0x6cc>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d12b      	bne.n	80033b4 <HAL_DMA_IRQHandler+0x6d0>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0310 	and.w	r3, r3, #16
 8003366:	2b00      	cmp	r3, #0
 8003368:	bf14      	ite	ne
 800336a:	2301      	movne	r3, #1
 800336c:	2300      	moveq	r3, #0
 800336e:	b2db      	uxtb	r3, r3
 8003370:	e02a      	b.n	80033c8 <HAL_DMA_IRQHandler+0x6e4>
 8003372:	bf00      	nop
 8003374:	40020010 	.word	0x40020010
 8003378:	40020028 	.word	0x40020028
 800337c:	40020040 	.word	0x40020040
 8003380:	40020058 	.word	0x40020058
 8003384:	40020070 	.word	0x40020070
 8003388:	40020088 	.word	0x40020088
 800338c:	400200a0 	.word	0x400200a0
 8003390:	400200b8 	.word	0x400200b8
 8003394:	40020410 	.word	0x40020410
 8003398:	40020428 	.word	0x40020428
 800339c:	40020440 	.word	0x40020440
 80033a0:	40020458 	.word	0x40020458
 80033a4:	40020470 	.word	0x40020470
 80033a8:	40020488 	.word	0x40020488
 80033ac:	400204a0 	.word	0x400204a0
 80033b0:	400204b8 	.word	0x400204b8
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	bf14      	ite	ne
 80033c2:	2301      	movne	r3, #1
 80033c4:	2300      	moveq	r3, #0
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 8087 	beq.w	80034dc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d2:	f003 031f 	and.w	r3, r3, #31
 80033d6:	2220      	movs	r2, #32
 80033d8:	409a      	lsls	r2, r3
 80033da:	6a3b      	ldr	r3, [r7, #32]
 80033dc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d139      	bne.n	800345e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0216 	bic.w	r2, r2, #22
 80033f8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	695a      	ldr	r2, [r3, #20]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003408:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340e:	2b00      	cmp	r3, #0
 8003410:	d103      	bne.n	800341a <HAL_DMA_IRQHandler+0x736>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003416:	2b00      	cmp	r3, #0
 8003418:	d007      	beq.n	800342a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0208 	bic.w	r2, r2, #8
 8003428:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800342e:	f003 031f 	and.w	r3, r3, #31
 8003432:	223f      	movs	r2, #63	@ 0x3f
 8003434:	409a      	lsls	r2, r3
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 834a 	beq.w	8003ae8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	4798      	blx	r3
          }
          return;
 800345c:	e344      	b.n	8003ae8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d018      	beq.n	800349e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d108      	bne.n	800348c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347e:	2b00      	cmp	r3, #0
 8003480:	d02c      	beq.n	80034dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	4798      	blx	r3
 800348a:	e027      	b.n	80034dc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003490:	2b00      	cmp	r3, #0
 8003492:	d023      	beq.n	80034dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	4798      	blx	r3
 800349c:	e01e      	b.n	80034dc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10f      	bne.n	80034cc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0210 	bic.w	r2, r2, #16
 80034ba:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 8306 	beq.w	8003af2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 8088 	beq.w	8003604 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2204      	movs	r2, #4
 80034f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a7a      	ldr	r2, [pc, #488]	@ (80036ec <HAL_DMA_IRQHandler+0xa08>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d04a      	beq.n	800359c <HAL_DMA_IRQHandler+0x8b8>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a79      	ldr	r2, [pc, #484]	@ (80036f0 <HAL_DMA_IRQHandler+0xa0c>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d045      	beq.n	800359c <HAL_DMA_IRQHandler+0x8b8>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a77      	ldr	r2, [pc, #476]	@ (80036f4 <HAL_DMA_IRQHandler+0xa10>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d040      	beq.n	800359c <HAL_DMA_IRQHandler+0x8b8>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a76      	ldr	r2, [pc, #472]	@ (80036f8 <HAL_DMA_IRQHandler+0xa14>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d03b      	beq.n	800359c <HAL_DMA_IRQHandler+0x8b8>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a74      	ldr	r2, [pc, #464]	@ (80036fc <HAL_DMA_IRQHandler+0xa18>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d036      	beq.n	800359c <HAL_DMA_IRQHandler+0x8b8>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a73      	ldr	r2, [pc, #460]	@ (8003700 <HAL_DMA_IRQHandler+0xa1c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d031      	beq.n	800359c <HAL_DMA_IRQHandler+0x8b8>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a71      	ldr	r2, [pc, #452]	@ (8003704 <HAL_DMA_IRQHandler+0xa20>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d02c      	beq.n	800359c <HAL_DMA_IRQHandler+0x8b8>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a70      	ldr	r2, [pc, #448]	@ (8003708 <HAL_DMA_IRQHandler+0xa24>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d027      	beq.n	800359c <HAL_DMA_IRQHandler+0x8b8>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a6e      	ldr	r2, [pc, #440]	@ (800370c <HAL_DMA_IRQHandler+0xa28>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d022      	beq.n	800359c <HAL_DMA_IRQHandler+0x8b8>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a6d      	ldr	r2, [pc, #436]	@ (8003710 <HAL_DMA_IRQHandler+0xa2c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d01d      	beq.n	800359c <HAL_DMA_IRQHandler+0x8b8>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a6b      	ldr	r2, [pc, #428]	@ (8003714 <HAL_DMA_IRQHandler+0xa30>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d018      	beq.n	800359c <HAL_DMA_IRQHandler+0x8b8>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a6a      	ldr	r2, [pc, #424]	@ (8003718 <HAL_DMA_IRQHandler+0xa34>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d013      	beq.n	800359c <HAL_DMA_IRQHandler+0x8b8>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a68      	ldr	r2, [pc, #416]	@ (800371c <HAL_DMA_IRQHandler+0xa38>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d00e      	beq.n	800359c <HAL_DMA_IRQHandler+0x8b8>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a67      	ldr	r2, [pc, #412]	@ (8003720 <HAL_DMA_IRQHandler+0xa3c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d009      	beq.n	800359c <HAL_DMA_IRQHandler+0x8b8>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a65      	ldr	r2, [pc, #404]	@ (8003724 <HAL_DMA_IRQHandler+0xa40>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d004      	beq.n	800359c <HAL_DMA_IRQHandler+0x8b8>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a64      	ldr	r2, [pc, #400]	@ (8003728 <HAL_DMA_IRQHandler+0xa44>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d108      	bne.n	80035ae <HAL_DMA_IRQHandler+0x8ca>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0201 	bic.w	r2, r2, #1
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	e007      	b.n	80035be <HAL_DMA_IRQHandler+0x8da>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0201 	bic.w	r2, r2, #1
 80035bc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	3301      	adds	r3, #1
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d307      	bcc.n	80035da <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1f2      	bne.n	80035be <HAL_DMA_IRQHandler+0x8da>
 80035d8:	e000      	b.n	80035dc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80035da:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d004      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2203      	movs	r2, #3
 80035ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80035f2:	e003      	b.n	80035fc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 8272 	beq.w	8003af2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	4798      	blx	r3
 8003616:	e26c      	b.n	8003af2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a43      	ldr	r2, [pc, #268]	@ (800372c <HAL_DMA_IRQHandler+0xa48>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d022      	beq.n	8003668 <HAL_DMA_IRQHandler+0x984>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a42      	ldr	r2, [pc, #264]	@ (8003730 <HAL_DMA_IRQHandler+0xa4c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d01d      	beq.n	8003668 <HAL_DMA_IRQHandler+0x984>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a40      	ldr	r2, [pc, #256]	@ (8003734 <HAL_DMA_IRQHandler+0xa50>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d018      	beq.n	8003668 <HAL_DMA_IRQHandler+0x984>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a3f      	ldr	r2, [pc, #252]	@ (8003738 <HAL_DMA_IRQHandler+0xa54>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d013      	beq.n	8003668 <HAL_DMA_IRQHandler+0x984>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a3d      	ldr	r2, [pc, #244]	@ (800373c <HAL_DMA_IRQHandler+0xa58>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d00e      	beq.n	8003668 <HAL_DMA_IRQHandler+0x984>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a3c      	ldr	r2, [pc, #240]	@ (8003740 <HAL_DMA_IRQHandler+0xa5c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d009      	beq.n	8003668 <HAL_DMA_IRQHandler+0x984>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a3a      	ldr	r2, [pc, #232]	@ (8003744 <HAL_DMA_IRQHandler+0xa60>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d004      	beq.n	8003668 <HAL_DMA_IRQHandler+0x984>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a39      	ldr	r2, [pc, #228]	@ (8003748 <HAL_DMA_IRQHandler+0xa64>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d101      	bne.n	800366c <HAL_DMA_IRQHandler+0x988>
 8003668:	2301      	movs	r3, #1
 800366a:	e000      	b.n	800366e <HAL_DMA_IRQHandler+0x98a>
 800366c:	2300      	movs	r3, #0
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 823f 	beq.w	8003af2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003680:	f003 031f 	and.w	r3, r3, #31
 8003684:	2204      	movs	r2, #4
 8003686:	409a      	lsls	r2, r3
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	4013      	ands	r3, r2
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 80cd 	beq.w	800382c <HAL_DMA_IRQHandler+0xb48>
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 80c7 	beq.w	800382c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a2:	f003 031f 	and.w	r3, r3, #31
 80036a6:	2204      	movs	r2, #4
 80036a8:	409a      	lsls	r2, r3
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d049      	beq.n	800374c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d109      	bne.n	80036d6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 8210 	beq.w	8003aec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036d4:	e20a      	b.n	8003aec <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f000 8206 	beq.w	8003aec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036e8:	e200      	b.n	8003aec <HAL_DMA_IRQHandler+0xe08>
 80036ea:	bf00      	nop
 80036ec:	40020010 	.word	0x40020010
 80036f0:	40020028 	.word	0x40020028
 80036f4:	40020040 	.word	0x40020040
 80036f8:	40020058 	.word	0x40020058
 80036fc:	40020070 	.word	0x40020070
 8003700:	40020088 	.word	0x40020088
 8003704:	400200a0 	.word	0x400200a0
 8003708:	400200b8 	.word	0x400200b8
 800370c:	40020410 	.word	0x40020410
 8003710:	40020428 	.word	0x40020428
 8003714:	40020440 	.word	0x40020440
 8003718:	40020458 	.word	0x40020458
 800371c:	40020470 	.word	0x40020470
 8003720:	40020488 	.word	0x40020488
 8003724:	400204a0 	.word	0x400204a0
 8003728:	400204b8 	.word	0x400204b8
 800372c:	58025408 	.word	0x58025408
 8003730:	5802541c 	.word	0x5802541c
 8003734:	58025430 	.word	0x58025430
 8003738:	58025444 	.word	0x58025444
 800373c:	58025458 	.word	0x58025458
 8003740:	5802546c 	.word	0x5802546c
 8003744:	58025480 	.word	0x58025480
 8003748:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	f003 0320 	and.w	r3, r3, #32
 8003752:	2b00      	cmp	r3, #0
 8003754:	d160      	bne.n	8003818 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a7f      	ldr	r2, [pc, #508]	@ (8003958 <HAL_DMA_IRQHandler+0xc74>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d04a      	beq.n	80037f6 <HAL_DMA_IRQHandler+0xb12>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a7d      	ldr	r2, [pc, #500]	@ (800395c <HAL_DMA_IRQHandler+0xc78>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d045      	beq.n	80037f6 <HAL_DMA_IRQHandler+0xb12>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a7c      	ldr	r2, [pc, #496]	@ (8003960 <HAL_DMA_IRQHandler+0xc7c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d040      	beq.n	80037f6 <HAL_DMA_IRQHandler+0xb12>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a7a      	ldr	r2, [pc, #488]	@ (8003964 <HAL_DMA_IRQHandler+0xc80>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d03b      	beq.n	80037f6 <HAL_DMA_IRQHandler+0xb12>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a79      	ldr	r2, [pc, #484]	@ (8003968 <HAL_DMA_IRQHandler+0xc84>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d036      	beq.n	80037f6 <HAL_DMA_IRQHandler+0xb12>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a77      	ldr	r2, [pc, #476]	@ (800396c <HAL_DMA_IRQHandler+0xc88>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d031      	beq.n	80037f6 <HAL_DMA_IRQHandler+0xb12>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a76      	ldr	r2, [pc, #472]	@ (8003970 <HAL_DMA_IRQHandler+0xc8c>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d02c      	beq.n	80037f6 <HAL_DMA_IRQHandler+0xb12>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a74      	ldr	r2, [pc, #464]	@ (8003974 <HAL_DMA_IRQHandler+0xc90>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d027      	beq.n	80037f6 <HAL_DMA_IRQHandler+0xb12>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a73      	ldr	r2, [pc, #460]	@ (8003978 <HAL_DMA_IRQHandler+0xc94>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d022      	beq.n	80037f6 <HAL_DMA_IRQHandler+0xb12>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a71      	ldr	r2, [pc, #452]	@ (800397c <HAL_DMA_IRQHandler+0xc98>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d01d      	beq.n	80037f6 <HAL_DMA_IRQHandler+0xb12>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a70      	ldr	r2, [pc, #448]	@ (8003980 <HAL_DMA_IRQHandler+0xc9c>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d018      	beq.n	80037f6 <HAL_DMA_IRQHandler+0xb12>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a6e      	ldr	r2, [pc, #440]	@ (8003984 <HAL_DMA_IRQHandler+0xca0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d013      	beq.n	80037f6 <HAL_DMA_IRQHandler+0xb12>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a6d      	ldr	r2, [pc, #436]	@ (8003988 <HAL_DMA_IRQHandler+0xca4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d00e      	beq.n	80037f6 <HAL_DMA_IRQHandler+0xb12>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a6b      	ldr	r2, [pc, #428]	@ (800398c <HAL_DMA_IRQHandler+0xca8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d009      	beq.n	80037f6 <HAL_DMA_IRQHandler+0xb12>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a6a      	ldr	r2, [pc, #424]	@ (8003990 <HAL_DMA_IRQHandler+0xcac>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d004      	beq.n	80037f6 <HAL_DMA_IRQHandler+0xb12>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a68      	ldr	r2, [pc, #416]	@ (8003994 <HAL_DMA_IRQHandler+0xcb0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d108      	bne.n	8003808 <HAL_DMA_IRQHandler+0xb24>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0208 	bic.w	r2, r2, #8
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	e007      	b.n	8003818 <HAL_DMA_IRQHandler+0xb34>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0204 	bic.w	r2, r2, #4
 8003816:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 8165 	beq.w	8003aec <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800382a:	e15f      	b.n	8003aec <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003830:	f003 031f 	and.w	r3, r3, #31
 8003834:	2202      	movs	r2, #2
 8003836:	409a      	lsls	r2, r3
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	4013      	ands	r3, r2
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 80c5 	beq.w	80039cc <HAL_DMA_IRQHandler+0xce8>
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 80bf 	beq.w	80039cc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003852:	f003 031f 	and.w	r3, r3, #31
 8003856:	2202      	movs	r2, #2
 8003858:	409a      	lsls	r2, r3
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d018      	beq.n	800389a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d109      	bne.n	8003886 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 813a 	beq.w	8003af0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003884:	e134      	b.n	8003af0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 8130 	beq.w	8003af0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003898:	e12a      	b.n	8003af0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	f003 0320 	and.w	r3, r3, #32
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f040 8089 	bne.w	80039b8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a2b      	ldr	r2, [pc, #172]	@ (8003958 <HAL_DMA_IRQHandler+0xc74>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d04a      	beq.n	8003946 <HAL_DMA_IRQHandler+0xc62>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a29      	ldr	r2, [pc, #164]	@ (800395c <HAL_DMA_IRQHandler+0xc78>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d045      	beq.n	8003946 <HAL_DMA_IRQHandler+0xc62>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a28      	ldr	r2, [pc, #160]	@ (8003960 <HAL_DMA_IRQHandler+0xc7c>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d040      	beq.n	8003946 <HAL_DMA_IRQHandler+0xc62>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a26      	ldr	r2, [pc, #152]	@ (8003964 <HAL_DMA_IRQHandler+0xc80>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d03b      	beq.n	8003946 <HAL_DMA_IRQHandler+0xc62>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a25      	ldr	r2, [pc, #148]	@ (8003968 <HAL_DMA_IRQHandler+0xc84>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d036      	beq.n	8003946 <HAL_DMA_IRQHandler+0xc62>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a23      	ldr	r2, [pc, #140]	@ (800396c <HAL_DMA_IRQHandler+0xc88>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d031      	beq.n	8003946 <HAL_DMA_IRQHandler+0xc62>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a22      	ldr	r2, [pc, #136]	@ (8003970 <HAL_DMA_IRQHandler+0xc8c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d02c      	beq.n	8003946 <HAL_DMA_IRQHandler+0xc62>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a20      	ldr	r2, [pc, #128]	@ (8003974 <HAL_DMA_IRQHandler+0xc90>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d027      	beq.n	8003946 <HAL_DMA_IRQHandler+0xc62>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a1f      	ldr	r2, [pc, #124]	@ (8003978 <HAL_DMA_IRQHandler+0xc94>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d022      	beq.n	8003946 <HAL_DMA_IRQHandler+0xc62>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a1d      	ldr	r2, [pc, #116]	@ (800397c <HAL_DMA_IRQHandler+0xc98>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d01d      	beq.n	8003946 <HAL_DMA_IRQHandler+0xc62>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a1c      	ldr	r2, [pc, #112]	@ (8003980 <HAL_DMA_IRQHandler+0xc9c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d018      	beq.n	8003946 <HAL_DMA_IRQHandler+0xc62>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a1a      	ldr	r2, [pc, #104]	@ (8003984 <HAL_DMA_IRQHandler+0xca0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d013      	beq.n	8003946 <HAL_DMA_IRQHandler+0xc62>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a19      	ldr	r2, [pc, #100]	@ (8003988 <HAL_DMA_IRQHandler+0xca4>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d00e      	beq.n	8003946 <HAL_DMA_IRQHandler+0xc62>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a17      	ldr	r2, [pc, #92]	@ (800398c <HAL_DMA_IRQHandler+0xca8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d009      	beq.n	8003946 <HAL_DMA_IRQHandler+0xc62>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a16      	ldr	r2, [pc, #88]	@ (8003990 <HAL_DMA_IRQHandler+0xcac>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d004      	beq.n	8003946 <HAL_DMA_IRQHandler+0xc62>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a14      	ldr	r2, [pc, #80]	@ (8003994 <HAL_DMA_IRQHandler+0xcb0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d128      	bne.n	8003998 <HAL_DMA_IRQHandler+0xcb4>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0214 	bic.w	r2, r2, #20
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	e027      	b.n	80039a8 <HAL_DMA_IRQHandler+0xcc4>
 8003958:	40020010 	.word	0x40020010
 800395c:	40020028 	.word	0x40020028
 8003960:	40020040 	.word	0x40020040
 8003964:	40020058 	.word	0x40020058
 8003968:	40020070 	.word	0x40020070
 800396c:	40020088 	.word	0x40020088
 8003970:	400200a0 	.word	0x400200a0
 8003974:	400200b8 	.word	0x400200b8
 8003978:	40020410 	.word	0x40020410
 800397c:	40020428 	.word	0x40020428
 8003980:	40020440 	.word	0x40020440
 8003984:	40020458 	.word	0x40020458
 8003988:	40020470 	.word	0x40020470
 800398c:	40020488 	.word	0x40020488
 8003990:	400204a0 	.word	0x400204a0
 8003994:	400204b8 	.word	0x400204b8
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 020a 	bic.w	r2, r2, #10
 80039a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 8097 	beq.w	8003af0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039ca:	e091      	b.n	8003af0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d0:	f003 031f 	and.w	r3, r3, #31
 80039d4:	2208      	movs	r2, #8
 80039d6:	409a      	lsls	r2, r3
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	4013      	ands	r3, r2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 8088 	beq.w	8003af2 <HAL_DMA_IRQHandler+0xe0e>
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 8082 	beq.w	8003af2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a41      	ldr	r2, [pc, #260]	@ (8003af8 <HAL_DMA_IRQHandler+0xe14>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d04a      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xdaa>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a3f      	ldr	r2, [pc, #252]	@ (8003afc <HAL_DMA_IRQHandler+0xe18>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d045      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xdaa>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a3e      	ldr	r2, [pc, #248]	@ (8003b00 <HAL_DMA_IRQHandler+0xe1c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d040      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xdaa>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a3c      	ldr	r2, [pc, #240]	@ (8003b04 <HAL_DMA_IRQHandler+0xe20>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d03b      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xdaa>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a3b      	ldr	r2, [pc, #236]	@ (8003b08 <HAL_DMA_IRQHandler+0xe24>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d036      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xdaa>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a39      	ldr	r2, [pc, #228]	@ (8003b0c <HAL_DMA_IRQHandler+0xe28>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d031      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xdaa>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a38      	ldr	r2, [pc, #224]	@ (8003b10 <HAL_DMA_IRQHandler+0xe2c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d02c      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xdaa>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a36      	ldr	r2, [pc, #216]	@ (8003b14 <HAL_DMA_IRQHandler+0xe30>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d027      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xdaa>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a35      	ldr	r2, [pc, #212]	@ (8003b18 <HAL_DMA_IRQHandler+0xe34>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d022      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xdaa>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a33      	ldr	r2, [pc, #204]	@ (8003b1c <HAL_DMA_IRQHandler+0xe38>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d01d      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xdaa>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a32      	ldr	r2, [pc, #200]	@ (8003b20 <HAL_DMA_IRQHandler+0xe3c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d018      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xdaa>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a30      	ldr	r2, [pc, #192]	@ (8003b24 <HAL_DMA_IRQHandler+0xe40>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d013      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xdaa>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a2f      	ldr	r2, [pc, #188]	@ (8003b28 <HAL_DMA_IRQHandler+0xe44>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d00e      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xdaa>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a2d      	ldr	r2, [pc, #180]	@ (8003b2c <HAL_DMA_IRQHandler+0xe48>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d009      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xdaa>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a2c      	ldr	r2, [pc, #176]	@ (8003b30 <HAL_DMA_IRQHandler+0xe4c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d004      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xdaa>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a2a      	ldr	r2, [pc, #168]	@ (8003b34 <HAL_DMA_IRQHandler+0xe50>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d108      	bne.n	8003aa0 <HAL_DMA_IRQHandler+0xdbc>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 021c 	bic.w	r2, r2, #28
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	e007      	b.n	8003ab0 <HAL_DMA_IRQHandler+0xdcc>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 020e 	bic.w	r2, r2, #14
 8003aae:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab4:	f003 031f 	and.w	r3, r3, #31
 8003ab8:	2201      	movs	r2, #1
 8003aba:	409a      	lsls	r2, r3
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d009      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	4798      	blx	r3
 8003ae6:	e004      	b.n	8003af2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003ae8:	bf00      	nop
 8003aea:	e002      	b.n	8003af2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003aec:	bf00      	nop
 8003aee:	e000      	b.n	8003af2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003af0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003af2:	3728      	adds	r7, #40	@ 0x28
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40020010 	.word	0x40020010
 8003afc:	40020028 	.word	0x40020028
 8003b00:	40020040 	.word	0x40020040
 8003b04:	40020058 	.word	0x40020058
 8003b08:	40020070 	.word	0x40020070
 8003b0c:	40020088 	.word	0x40020088
 8003b10:	400200a0 	.word	0x400200a0
 8003b14:	400200b8 	.word	0x400200b8
 8003b18:	40020410 	.word	0x40020410
 8003b1c:	40020428 	.word	0x40020428
 8003b20:	40020440 	.word	0x40020440
 8003b24:	40020458 	.word	0x40020458
 8003b28:	40020470 	.word	0x40020470
 8003b2c:	40020488 	.word	0x40020488
 8003b30:	400204a0 	.word	0x400204a0
 8003b34:	400204b8 	.word	0x400204b8

08003b38 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b087      	sub	sp, #28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
 8003b5c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b62:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b68:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a7f      	ldr	r2, [pc, #508]	@ (8003d6c <DMA_SetConfig+0x21c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d072      	beq.n	8003c5a <DMA_SetConfig+0x10a>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a7d      	ldr	r2, [pc, #500]	@ (8003d70 <DMA_SetConfig+0x220>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d06d      	beq.n	8003c5a <DMA_SetConfig+0x10a>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a7c      	ldr	r2, [pc, #496]	@ (8003d74 <DMA_SetConfig+0x224>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d068      	beq.n	8003c5a <DMA_SetConfig+0x10a>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a7a      	ldr	r2, [pc, #488]	@ (8003d78 <DMA_SetConfig+0x228>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d063      	beq.n	8003c5a <DMA_SetConfig+0x10a>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a79      	ldr	r2, [pc, #484]	@ (8003d7c <DMA_SetConfig+0x22c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d05e      	beq.n	8003c5a <DMA_SetConfig+0x10a>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a77      	ldr	r2, [pc, #476]	@ (8003d80 <DMA_SetConfig+0x230>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d059      	beq.n	8003c5a <DMA_SetConfig+0x10a>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a76      	ldr	r2, [pc, #472]	@ (8003d84 <DMA_SetConfig+0x234>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d054      	beq.n	8003c5a <DMA_SetConfig+0x10a>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a74      	ldr	r2, [pc, #464]	@ (8003d88 <DMA_SetConfig+0x238>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d04f      	beq.n	8003c5a <DMA_SetConfig+0x10a>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a73      	ldr	r2, [pc, #460]	@ (8003d8c <DMA_SetConfig+0x23c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d04a      	beq.n	8003c5a <DMA_SetConfig+0x10a>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a71      	ldr	r2, [pc, #452]	@ (8003d90 <DMA_SetConfig+0x240>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d045      	beq.n	8003c5a <DMA_SetConfig+0x10a>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a70      	ldr	r2, [pc, #448]	@ (8003d94 <DMA_SetConfig+0x244>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d040      	beq.n	8003c5a <DMA_SetConfig+0x10a>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a6e      	ldr	r2, [pc, #440]	@ (8003d98 <DMA_SetConfig+0x248>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d03b      	beq.n	8003c5a <DMA_SetConfig+0x10a>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a6d      	ldr	r2, [pc, #436]	@ (8003d9c <DMA_SetConfig+0x24c>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d036      	beq.n	8003c5a <DMA_SetConfig+0x10a>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a6b      	ldr	r2, [pc, #428]	@ (8003da0 <DMA_SetConfig+0x250>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d031      	beq.n	8003c5a <DMA_SetConfig+0x10a>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a6a      	ldr	r2, [pc, #424]	@ (8003da4 <DMA_SetConfig+0x254>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d02c      	beq.n	8003c5a <DMA_SetConfig+0x10a>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a68      	ldr	r2, [pc, #416]	@ (8003da8 <DMA_SetConfig+0x258>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d027      	beq.n	8003c5a <DMA_SetConfig+0x10a>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a67      	ldr	r2, [pc, #412]	@ (8003dac <DMA_SetConfig+0x25c>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d022      	beq.n	8003c5a <DMA_SetConfig+0x10a>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a65      	ldr	r2, [pc, #404]	@ (8003db0 <DMA_SetConfig+0x260>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d01d      	beq.n	8003c5a <DMA_SetConfig+0x10a>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a64      	ldr	r2, [pc, #400]	@ (8003db4 <DMA_SetConfig+0x264>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d018      	beq.n	8003c5a <DMA_SetConfig+0x10a>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a62      	ldr	r2, [pc, #392]	@ (8003db8 <DMA_SetConfig+0x268>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d013      	beq.n	8003c5a <DMA_SetConfig+0x10a>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a61      	ldr	r2, [pc, #388]	@ (8003dbc <DMA_SetConfig+0x26c>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d00e      	beq.n	8003c5a <DMA_SetConfig+0x10a>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a5f      	ldr	r2, [pc, #380]	@ (8003dc0 <DMA_SetConfig+0x270>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d009      	beq.n	8003c5a <DMA_SetConfig+0x10a>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a5e      	ldr	r2, [pc, #376]	@ (8003dc4 <DMA_SetConfig+0x274>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d004      	beq.n	8003c5a <DMA_SetConfig+0x10a>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a5c      	ldr	r2, [pc, #368]	@ (8003dc8 <DMA_SetConfig+0x278>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d101      	bne.n	8003c5e <DMA_SetConfig+0x10e>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <DMA_SetConfig+0x110>
 8003c5e:	2300      	movs	r3, #0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00d      	beq.n	8003c80 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003c6c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d004      	beq.n	8003c80 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003c7e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a39      	ldr	r2, [pc, #228]	@ (8003d6c <DMA_SetConfig+0x21c>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d04a      	beq.n	8003d20 <DMA_SetConfig+0x1d0>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a38      	ldr	r2, [pc, #224]	@ (8003d70 <DMA_SetConfig+0x220>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d045      	beq.n	8003d20 <DMA_SetConfig+0x1d0>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a36      	ldr	r2, [pc, #216]	@ (8003d74 <DMA_SetConfig+0x224>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d040      	beq.n	8003d20 <DMA_SetConfig+0x1d0>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a35      	ldr	r2, [pc, #212]	@ (8003d78 <DMA_SetConfig+0x228>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d03b      	beq.n	8003d20 <DMA_SetConfig+0x1d0>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a33      	ldr	r2, [pc, #204]	@ (8003d7c <DMA_SetConfig+0x22c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d036      	beq.n	8003d20 <DMA_SetConfig+0x1d0>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a32      	ldr	r2, [pc, #200]	@ (8003d80 <DMA_SetConfig+0x230>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d031      	beq.n	8003d20 <DMA_SetConfig+0x1d0>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a30      	ldr	r2, [pc, #192]	@ (8003d84 <DMA_SetConfig+0x234>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d02c      	beq.n	8003d20 <DMA_SetConfig+0x1d0>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a2f      	ldr	r2, [pc, #188]	@ (8003d88 <DMA_SetConfig+0x238>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d027      	beq.n	8003d20 <DMA_SetConfig+0x1d0>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a2d      	ldr	r2, [pc, #180]	@ (8003d8c <DMA_SetConfig+0x23c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d022      	beq.n	8003d20 <DMA_SetConfig+0x1d0>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a2c      	ldr	r2, [pc, #176]	@ (8003d90 <DMA_SetConfig+0x240>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d01d      	beq.n	8003d20 <DMA_SetConfig+0x1d0>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a2a      	ldr	r2, [pc, #168]	@ (8003d94 <DMA_SetConfig+0x244>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d018      	beq.n	8003d20 <DMA_SetConfig+0x1d0>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a29      	ldr	r2, [pc, #164]	@ (8003d98 <DMA_SetConfig+0x248>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d013      	beq.n	8003d20 <DMA_SetConfig+0x1d0>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a27      	ldr	r2, [pc, #156]	@ (8003d9c <DMA_SetConfig+0x24c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d00e      	beq.n	8003d20 <DMA_SetConfig+0x1d0>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a26      	ldr	r2, [pc, #152]	@ (8003da0 <DMA_SetConfig+0x250>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d009      	beq.n	8003d20 <DMA_SetConfig+0x1d0>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a24      	ldr	r2, [pc, #144]	@ (8003da4 <DMA_SetConfig+0x254>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d004      	beq.n	8003d20 <DMA_SetConfig+0x1d0>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a23      	ldr	r2, [pc, #140]	@ (8003da8 <DMA_SetConfig+0x258>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d101      	bne.n	8003d24 <DMA_SetConfig+0x1d4>
 8003d20:	2301      	movs	r3, #1
 8003d22:	e000      	b.n	8003d26 <DMA_SetConfig+0x1d6>
 8003d24:	2300      	movs	r3, #0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d059      	beq.n	8003dde <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d2e:	f003 031f 	and.w	r3, r3, #31
 8003d32:	223f      	movs	r2, #63	@ 0x3f
 8003d34:	409a      	lsls	r2, r3
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003d48:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	2b40      	cmp	r3, #64	@ 0x40
 8003d58:	d138      	bne.n	8003dcc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003d6a:	e086      	b.n	8003e7a <DMA_SetConfig+0x32a>
 8003d6c:	40020010 	.word	0x40020010
 8003d70:	40020028 	.word	0x40020028
 8003d74:	40020040 	.word	0x40020040
 8003d78:	40020058 	.word	0x40020058
 8003d7c:	40020070 	.word	0x40020070
 8003d80:	40020088 	.word	0x40020088
 8003d84:	400200a0 	.word	0x400200a0
 8003d88:	400200b8 	.word	0x400200b8
 8003d8c:	40020410 	.word	0x40020410
 8003d90:	40020428 	.word	0x40020428
 8003d94:	40020440 	.word	0x40020440
 8003d98:	40020458 	.word	0x40020458
 8003d9c:	40020470 	.word	0x40020470
 8003da0:	40020488 	.word	0x40020488
 8003da4:	400204a0 	.word	0x400204a0
 8003da8:	400204b8 	.word	0x400204b8
 8003dac:	58025408 	.word	0x58025408
 8003db0:	5802541c 	.word	0x5802541c
 8003db4:	58025430 	.word	0x58025430
 8003db8:	58025444 	.word	0x58025444
 8003dbc:	58025458 	.word	0x58025458
 8003dc0:	5802546c 	.word	0x5802546c
 8003dc4:	58025480 	.word	0x58025480
 8003dc8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	60da      	str	r2, [r3, #12]
}
 8003ddc:	e04d      	b.n	8003e7a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a29      	ldr	r2, [pc, #164]	@ (8003e88 <DMA_SetConfig+0x338>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d022      	beq.n	8003e2e <DMA_SetConfig+0x2de>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a27      	ldr	r2, [pc, #156]	@ (8003e8c <DMA_SetConfig+0x33c>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d01d      	beq.n	8003e2e <DMA_SetConfig+0x2de>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a26      	ldr	r2, [pc, #152]	@ (8003e90 <DMA_SetConfig+0x340>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d018      	beq.n	8003e2e <DMA_SetConfig+0x2de>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a24      	ldr	r2, [pc, #144]	@ (8003e94 <DMA_SetConfig+0x344>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d013      	beq.n	8003e2e <DMA_SetConfig+0x2de>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a23      	ldr	r2, [pc, #140]	@ (8003e98 <DMA_SetConfig+0x348>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d00e      	beq.n	8003e2e <DMA_SetConfig+0x2de>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a21      	ldr	r2, [pc, #132]	@ (8003e9c <DMA_SetConfig+0x34c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d009      	beq.n	8003e2e <DMA_SetConfig+0x2de>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a20      	ldr	r2, [pc, #128]	@ (8003ea0 <DMA_SetConfig+0x350>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d004      	beq.n	8003e2e <DMA_SetConfig+0x2de>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a1e      	ldr	r2, [pc, #120]	@ (8003ea4 <DMA_SetConfig+0x354>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d101      	bne.n	8003e32 <DMA_SetConfig+0x2e2>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e000      	b.n	8003e34 <DMA_SetConfig+0x2e4>
 8003e32:	2300      	movs	r3, #0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d020      	beq.n	8003e7a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e3c:	f003 031f 	and.w	r3, r3, #31
 8003e40:	2201      	movs	r2, #1
 8003e42:	409a      	lsls	r2, r3
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b40      	cmp	r3, #64	@ 0x40
 8003e56:	d108      	bne.n	8003e6a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	60da      	str	r2, [r3, #12]
}
 8003e68:	e007      	b.n	8003e7a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	60da      	str	r2, [r3, #12]
}
 8003e7a:	bf00      	nop
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	58025408 	.word	0x58025408
 8003e8c:	5802541c 	.word	0x5802541c
 8003e90:	58025430 	.word	0x58025430
 8003e94:	58025444 	.word	0x58025444
 8003e98:	58025458 	.word	0x58025458
 8003e9c:	5802546c 	.word	0x5802546c
 8003ea0:	58025480 	.word	0x58025480
 8003ea4:	58025494 	.word	0x58025494

08003ea8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a42      	ldr	r2, [pc, #264]	@ (8003fc0 <DMA_CalcBaseAndBitshift+0x118>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d04a      	beq.n	8003f50 <DMA_CalcBaseAndBitshift+0xa8>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a41      	ldr	r2, [pc, #260]	@ (8003fc4 <DMA_CalcBaseAndBitshift+0x11c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d045      	beq.n	8003f50 <DMA_CalcBaseAndBitshift+0xa8>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a3f      	ldr	r2, [pc, #252]	@ (8003fc8 <DMA_CalcBaseAndBitshift+0x120>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d040      	beq.n	8003f50 <DMA_CalcBaseAndBitshift+0xa8>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a3e      	ldr	r2, [pc, #248]	@ (8003fcc <DMA_CalcBaseAndBitshift+0x124>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d03b      	beq.n	8003f50 <DMA_CalcBaseAndBitshift+0xa8>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a3c      	ldr	r2, [pc, #240]	@ (8003fd0 <DMA_CalcBaseAndBitshift+0x128>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d036      	beq.n	8003f50 <DMA_CalcBaseAndBitshift+0xa8>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a3b      	ldr	r2, [pc, #236]	@ (8003fd4 <DMA_CalcBaseAndBitshift+0x12c>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d031      	beq.n	8003f50 <DMA_CalcBaseAndBitshift+0xa8>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a39      	ldr	r2, [pc, #228]	@ (8003fd8 <DMA_CalcBaseAndBitshift+0x130>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d02c      	beq.n	8003f50 <DMA_CalcBaseAndBitshift+0xa8>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a38      	ldr	r2, [pc, #224]	@ (8003fdc <DMA_CalcBaseAndBitshift+0x134>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d027      	beq.n	8003f50 <DMA_CalcBaseAndBitshift+0xa8>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a36      	ldr	r2, [pc, #216]	@ (8003fe0 <DMA_CalcBaseAndBitshift+0x138>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d022      	beq.n	8003f50 <DMA_CalcBaseAndBitshift+0xa8>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a35      	ldr	r2, [pc, #212]	@ (8003fe4 <DMA_CalcBaseAndBitshift+0x13c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d01d      	beq.n	8003f50 <DMA_CalcBaseAndBitshift+0xa8>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a33      	ldr	r2, [pc, #204]	@ (8003fe8 <DMA_CalcBaseAndBitshift+0x140>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d018      	beq.n	8003f50 <DMA_CalcBaseAndBitshift+0xa8>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a32      	ldr	r2, [pc, #200]	@ (8003fec <DMA_CalcBaseAndBitshift+0x144>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d013      	beq.n	8003f50 <DMA_CalcBaseAndBitshift+0xa8>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a30      	ldr	r2, [pc, #192]	@ (8003ff0 <DMA_CalcBaseAndBitshift+0x148>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d00e      	beq.n	8003f50 <DMA_CalcBaseAndBitshift+0xa8>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a2f      	ldr	r2, [pc, #188]	@ (8003ff4 <DMA_CalcBaseAndBitshift+0x14c>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d009      	beq.n	8003f50 <DMA_CalcBaseAndBitshift+0xa8>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a2d      	ldr	r2, [pc, #180]	@ (8003ff8 <DMA_CalcBaseAndBitshift+0x150>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d004      	beq.n	8003f50 <DMA_CalcBaseAndBitshift+0xa8>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a2c      	ldr	r2, [pc, #176]	@ (8003ffc <DMA_CalcBaseAndBitshift+0x154>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d101      	bne.n	8003f54 <DMA_CalcBaseAndBitshift+0xac>
 8003f50:	2301      	movs	r3, #1
 8003f52:	e000      	b.n	8003f56 <DMA_CalcBaseAndBitshift+0xae>
 8003f54:	2300      	movs	r3, #0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d024      	beq.n	8003fa4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	3b10      	subs	r3, #16
 8003f62:	4a27      	ldr	r2, [pc, #156]	@ (8004000 <DMA_CalcBaseAndBitshift+0x158>)
 8003f64:	fba2 2303 	umull	r2, r3, r2, r3
 8003f68:	091b      	lsrs	r3, r3, #4
 8003f6a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f003 0307 	and.w	r3, r3, #7
 8003f72:	4a24      	ldr	r2, [pc, #144]	@ (8004004 <DMA_CalcBaseAndBitshift+0x15c>)
 8003f74:	5cd3      	ldrb	r3, [r2, r3]
 8003f76:	461a      	mov	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2b03      	cmp	r3, #3
 8003f80:	d908      	bls.n	8003f94 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	461a      	mov	r2, r3
 8003f88:	4b1f      	ldr	r3, [pc, #124]	@ (8004008 <DMA_CalcBaseAndBitshift+0x160>)
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	1d1a      	adds	r2, r3, #4
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	659a      	str	r2, [r3, #88]	@ 0x58
 8003f92:	e00d      	b.n	8003fb0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8004008 <DMA_CalcBaseAndBitshift+0x160>)
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fa2:	e005      	b.n	8003fb0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	40020010 	.word	0x40020010
 8003fc4:	40020028 	.word	0x40020028
 8003fc8:	40020040 	.word	0x40020040
 8003fcc:	40020058 	.word	0x40020058
 8003fd0:	40020070 	.word	0x40020070
 8003fd4:	40020088 	.word	0x40020088
 8003fd8:	400200a0 	.word	0x400200a0
 8003fdc:	400200b8 	.word	0x400200b8
 8003fe0:	40020410 	.word	0x40020410
 8003fe4:	40020428 	.word	0x40020428
 8003fe8:	40020440 	.word	0x40020440
 8003fec:	40020458 	.word	0x40020458
 8003ff0:	40020470 	.word	0x40020470
 8003ff4:	40020488 	.word	0x40020488
 8003ff8:	400204a0 	.word	0x400204a0
 8003ffc:	400204b8 	.word	0x400204b8
 8004000:	aaaaaaab 	.word	0xaaaaaaab
 8004004:	080095b4 	.word	0x080095b4
 8004008:	fffffc00 	.word	0xfffffc00

0800400c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004014:	2300      	movs	r3, #0
 8004016:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d120      	bne.n	8004062 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004024:	2b03      	cmp	r3, #3
 8004026:	d858      	bhi.n	80040da <DMA_CheckFifoParam+0xce>
 8004028:	a201      	add	r2, pc, #4	@ (adr r2, 8004030 <DMA_CheckFifoParam+0x24>)
 800402a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402e:	bf00      	nop
 8004030:	08004041 	.word	0x08004041
 8004034:	08004053 	.word	0x08004053
 8004038:	08004041 	.word	0x08004041
 800403c:	080040db 	.word	0x080040db
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004044:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d048      	beq.n	80040de <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004050:	e045      	b.n	80040de <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004056:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800405a:	d142      	bne.n	80040e2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004060:	e03f      	b.n	80040e2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800406a:	d123      	bne.n	80040b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004070:	2b03      	cmp	r3, #3
 8004072:	d838      	bhi.n	80040e6 <DMA_CheckFifoParam+0xda>
 8004074:	a201      	add	r2, pc, #4	@ (adr r2, 800407c <DMA_CheckFifoParam+0x70>)
 8004076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407a:	bf00      	nop
 800407c:	0800408d 	.word	0x0800408d
 8004080:	08004093 	.word	0x08004093
 8004084:	0800408d 	.word	0x0800408d
 8004088:	080040a5 	.word	0x080040a5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	73fb      	strb	r3, [r7, #15]
        break;
 8004090:	e030      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004096:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d025      	beq.n	80040ea <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040a2:	e022      	b.n	80040ea <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040ac:	d11f      	bne.n	80040ee <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040b2:	e01c      	b.n	80040ee <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d902      	bls.n	80040c2 <DMA_CheckFifoParam+0xb6>
 80040bc:	2b03      	cmp	r3, #3
 80040be:	d003      	beq.n	80040c8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80040c0:	e018      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	73fb      	strb	r3, [r7, #15]
        break;
 80040c6:	e015      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00e      	beq.n	80040f2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	73fb      	strb	r3, [r7, #15]
    break;
 80040d8:	e00b      	b.n	80040f2 <DMA_CheckFifoParam+0xe6>
        break;
 80040da:	bf00      	nop
 80040dc:	e00a      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
        break;
 80040de:	bf00      	nop
 80040e0:	e008      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
        break;
 80040e2:	bf00      	nop
 80040e4:	e006      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
        break;
 80040e6:	bf00      	nop
 80040e8:	e004      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
        break;
 80040ea:	bf00      	nop
 80040ec:	e002      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
        break;
 80040ee:	bf00      	nop
 80040f0:	e000      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
    break;
 80040f2:	bf00      	nop
    }
  }

  return status;
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop

08004104 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a38      	ldr	r2, [pc, #224]	@ (80041f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d022      	beq.n	8004162 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a36      	ldr	r2, [pc, #216]	@ (80041fc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d01d      	beq.n	8004162 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a35      	ldr	r2, [pc, #212]	@ (8004200 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d018      	beq.n	8004162 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a33      	ldr	r2, [pc, #204]	@ (8004204 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d013      	beq.n	8004162 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a32      	ldr	r2, [pc, #200]	@ (8004208 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d00e      	beq.n	8004162 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a30      	ldr	r2, [pc, #192]	@ (800420c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d009      	beq.n	8004162 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a2f      	ldr	r2, [pc, #188]	@ (8004210 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d004      	beq.n	8004162 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a2d      	ldr	r2, [pc, #180]	@ (8004214 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d101      	bne.n	8004166 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004162:	2301      	movs	r3, #1
 8004164:	e000      	b.n	8004168 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004166:	2300      	movs	r3, #0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d01a      	beq.n	80041a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	b2db      	uxtb	r3, r3
 8004172:	3b08      	subs	r3, #8
 8004174:	4a28      	ldr	r2, [pc, #160]	@ (8004218 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004176:	fba2 2303 	umull	r2, r3, r2, r3
 800417a:	091b      	lsrs	r3, r3, #4
 800417c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	4b26      	ldr	r3, [pc, #152]	@ (800421c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004182:	4413      	add	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	461a      	mov	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a24      	ldr	r2, [pc, #144]	@ (8004220 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004190:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f003 031f 	and.w	r3, r3, #31
 8004198:	2201      	movs	r2, #1
 800419a:	409a      	lsls	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80041a0:	e024      	b.n	80041ec <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	3b10      	subs	r3, #16
 80041aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004224 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80041ac:	fba2 2303 	umull	r2, r3, r2, r3
 80041b0:	091b      	lsrs	r3, r3, #4
 80041b2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	4a1c      	ldr	r2, [pc, #112]	@ (8004228 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d806      	bhi.n	80041ca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	4a1b      	ldr	r2, [pc, #108]	@ (800422c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d902      	bls.n	80041ca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	3308      	adds	r3, #8
 80041c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	4b18      	ldr	r3, [pc, #96]	@ (8004230 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80041ce:	4413      	add	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	461a      	mov	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a16      	ldr	r2, [pc, #88]	@ (8004234 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80041dc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f003 031f 	and.w	r3, r3, #31
 80041e4:	2201      	movs	r2, #1
 80041e6:	409a      	lsls	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80041ec:	bf00      	nop
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	58025408 	.word	0x58025408
 80041fc:	5802541c 	.word	0x5802541c
 8004200:	58025430 	.word	0x58025430
 8004204:	58025444 	.word	0x58025444
 8004208:	58025458 	.word	0x58025458
 800420c:	5802546c 	.word	0x5802546c
 8004210:	58025480 	.word	0x58025480
 8004214:	58025494 	.word	0x58025494
 8004218:	cccccccd 	.word	0xcccccccd
 800421c:	16009600 	.word	0x16009600
 8004220:	58025880 	.word	0x58025880
 8004224:	aaaaaaab 	.word	0xaaaaaaab
 8004228:	400204b8 	.word	0x400204b8
 800422c:	4002040f 	.word	0x4002040f
 8004230:	10008200 	.word	0x10008200
 8004234:	40020880 	.word	0x40020880

08004238 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	b2db      	uxtb	r3, r3
 8004246:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d04a      	beq.n	80042e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2b08      	cmp	r3, #8
 8004252:	d847      	bhi.n	80042e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a25      	ldr	r2, [pc, #148]	@ (80042f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d022      	beq.n	80042a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a24      	ldr	r2, [pc, #144]	@ (80042f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d01d      	beq.n	80042a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a22      	ldr	r2, [pc, #136]	@ (80042f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d018      	beq.n	80042a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a21      	ldr	r2, [pc, #132]	@ (80042fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d013      	beq.n	80042a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a1f      	ldr	r2, [pc, #124]	@ (8004300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00e      	beq.n	80042a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a1e      	ldr	r2, [pc, #120]	@ (8004304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d009      	beq.n	80042a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a1c      	ldr	r2, [pc, #112]	@ (8004308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d004      	beq.n	80042a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a1b      	ldr	r2, [pc, #108]	@ (800430c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d101      	bne.n	80042a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80042a4:	2301      	movs	r3, #1
 80042a6:	e000      	b.n	80042aa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80042a8:	2300      	movs	r3, #0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	4b17      	ldr	r3, [pc, #92]	@ (8004310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80042b2:	4413      	add	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	461a      	mov	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a15      	ldr	r2, [pc, #84]	@ (8004314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80042c0:	671a      	str	r2, [r3, #112]	@ 0x70
 80042c2:	e009      	b.n	80042d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	4b14      	ldr	r3, [pc, #80]	@ (8004318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80042c8:	4413      	add	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	461a      	mov	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a11      	ldr	r2, [pc, #68]	@ (800431c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80042d6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	3b01      	subs	r3, #1
 80042dc:	2201      	movs	r2, #1
 80042de:	409a      	lsls	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80042e4:	bf00      	nop
 80042e6:	3714      	adds	r7, #20
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	58025408 	.word	0x58025408
 80042f4:	5802541c 	.word	0x5802541c
 80042f8:	58025430 	.word	0x58025430
 80042fc:	58025444 	.word	0x58025444
 8004300:	58025458 	.word	0x58025458
 8004304:	5802546c 	.word	0x5802546c
 8004308:	58025480 	.word	0x58025480
 800430c:	58025494 	.word	0x58025494
 8004310:	1600963f 	.word	0x1600963f
 8004314:	58025940 	.word	0x58025940
 8004318:	1000823f 	.word	0x1000823f
 800431c:	40020940 	.word	0x40020940

08004320 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e0e3      	b.n	80044fa <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004338:	2b00      	cmp	r3, #0
 800433a:	d106      	bne.n	800434a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2223      	movs	r2, #35	@ 0x23
 8004340:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f7fc ff39 	bl	80011bc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800434a:	4b6e      	ldr	r3, [pc, #440]	@ (8004504 <HAL_ETH_Init+0x1e4>)
 800434c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004350:	4a6c      	ldr	r2, [pc, #432]	@ (8004504 <HAL_ETH_Init+0x1e4>)
 8004352:	f043 0302 	orr.w	r3, r3, #2
 8004356:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800435a:	4b6a      	ldr	r3, [pc, #424]	@ (8004504 <HAL_ETH_Init+0x1e4>)
 800435c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	60bb      	str	r3, [r7, #8]
 8004366:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	7a1b      	ldrb	r3, [r3, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d103      	bne.n	8004378 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004370:	2000      	movs	r0, #0
 8004372:	f7fd fab3 	bl	80018dc <HAL_SYSCFG_ETHInterfaceSelect>
 8004376:	e003      	b.n	8004380 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004378:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800437c:	f7fd faae 	bl	80018dc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004380:	4b61      	ldr	r3, [pc, #388]	@ (8004508 <HAL_ETH_Init+0x1e8>)
 8004382:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6812      	ldr	r2, [r2, #0]
 8004392:	f043 0301 	orr.w	r3, r3, #1
 8004396:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800439a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800439c:	f7fd fa92 	bl	80018c4 <HAL_GetTick>
 80043a0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80043a2:	e011      	b.n	80043c8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80043a4:	f7fd fa8e 	bl	80018c4 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80043b2:	d909      	bls.n	80043c8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2204      	movs	r2, #4
 80043b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	22e0      	movs	r2, #224	@ 0xe0
 80043c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e098      	b.n	80044fa <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1e4      	bne.n	80043a4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f89e 	bl	800451c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80043e0:	f001 fcd8 	bl	8005d94 <HAL_RCC_GetHCLKFreq>
 80043e4:	4603      	mov	r3, r0
 80043e6:	4a49      	ldr	r2, [pc, #292]	@ (800450c <HAL_ETH_Init+0x1ec>)
 80043e8:	fba2 2303 	umull	r2, r3, r2, r3
 80043ec:	0c9a      	lsrs	r2, r3, #18
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3a01      	subs	r2, #1
 80043f4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 fa81 	bl	8004900 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004406:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800440a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	6812      	ldr	r2, [r2, #0]
 8004412:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004416:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800441a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	f003 0303 	and.w	r3, r3, #3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d009      	beq.n	800443e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	22e0      	movs	r2, #224	@ 0xe0
 8004436:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e05d      	b.n	80044fa <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004446:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800444a:	4b31      	ldr	r3, [pc, #196]	@ (8004510 <HAL_ETH_Init+0x1f0>)
 800444c:	4013      	ands	r3, r2
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6952      	ldr	r2, [r2, #20]
 8004452:	0051      	lsls	r1, r2, #1
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6812      	ldr	r2, [r2, #0]
 8004458:	430b      	orrs	r3, r1
 800445a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800445e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 fae9 	bl	8004a3a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 fb2f 	bl	8004acc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	3305      	adds	r3, #5
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	021a      	lsls	r2, r3, #8
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	3304      	adds	r3, #4
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	4619      	mov	r1, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	3303      	adds	r3, #3
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	061a      	lsls	r2, r3, #24
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	3302      	adds	r3, #2
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	041b      	lsls	r3, r3, #16
 80044a0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	3301      	adds	r3, #1
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80044ac:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80044ba:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80044bc:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	4b11      	ldr	r3, [pc, #68]	@ (8004514 <HAL_ETH_Init+0x1f4>)
 80044ce:	430b      	orrs	r3, r1
 80044d0:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	4b0d      	ldr	r3, [pc, #52]	@ (8004518 <HAL_ETH_Init+0x1f8>)
 80044e2:	430b      	orrs	r3, r1
 80044e4:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2210      	movs	r2, #16
 80044f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	58024400 	.word	0x58024400
 8004508:	58000400 	.word	0x58000400
 800450c:	431bde83 	.word	0x431bde83
 8004510:	ffff8001 	.word	0xffff8001
 8004514:	0c020060 	.word	0x0c020060
 8004518:	0c20c000 	.word	0x0c20c000

0800451c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800452c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004534:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004536:	f001 fc2d 	bl	8005d94 <HAL_RCC_GetHCLKFreq>
 800453a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	4a1a      	ldr	r2, [pc, #104]	@ (80045a8 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d804      	bhi.n	800454e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	e022      	b.n	8004594 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	4a16      	ldr	r2, [pc, #88]	@ (80045ac <HAL_ETH_SetMDIOClockRange+0x90>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d204      	bcs.n	8004560 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	e019      	b.n	8004594 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	4a13      	ldr	r2, [pc, #76]	@ (80045b0 <HAL_ETH_SetMDIOClockRange+0x94>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d915      	bls.n	8004594 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4a12      	ldr	r2, [pc, #72]	@ (80045b4 <HAL_ETH_SetMDIOClockRange+0x98>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d804      	bhi.n	800457a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	e00c      	b.n	8004594 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	4a0e      	ldr	r2, [pc, #56]	@ (80045b8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d804      	bhi.n	800458c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	e003      	b.n	8004594 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8004592:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800459e:	bf00      	nop
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	02160ebf 	.word	0x02160ebf
 80045ac:	03938700 	.word	0x03938700
 80045b0:	05f5e0ff 	.word	0x05f5e0ff
 80045b4:	08f0d17f 	.word	0x08f0d17f
 80045b8:	0ee6b27f 	.word	0x0ee6b27f

080045bc <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80045ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	791b      	ldrb	r3, [r3, #4]
 80045d4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80045d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	7b1b      	ldrb	r3, [r3, #12]
 80045dc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80045de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	7b5b      	ldrb	r3, [r3, #13]
 80045e4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80045e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	7b9b      	ldrb	r3, [r3, #14]
 80045ec:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80045ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	7bdb      	ldrb	r3, [r3, #15]
 80045f4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80045f6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	7c12      	ldrb	r2, [r2, #16]
 80045fc:	2a00      	cmp	r2, #0
 80045fe:	d102      	bne.n	8004606 <ETH_SetMACConfig+0x4a>
 8004600:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004604:	e000      	b.n	8004608 <ETH_SetMACConfig+0x4c>
 8004606:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004608:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	7c52      	ldrb	r2, [r2, #17]
 800460e:	2a00      	cmp	r2, #0
 8004610:	d102      	bne.n	8004618 <ETH_SetMACConfig+0x5c>
 8004612:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004616:	e000      	b.n	800461a <ETH_SetMACConfig+0x5e>
 8004618:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800461a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	7c9b      	ldrb	r3, [r3, #18]
 8004620:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004622:	431a      	orrs	r2, r3
               macconf->Speed |
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004628:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800462e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	7f1b      	ldrb	r3, [r3, #28]
 8004634:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004636:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	7f5b      	ldrb	r3, [r3, #29]
 800463c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800463e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	7f92      	ldrb	r2, [r2, #30]
 8004644:	2a00      	cmp	r2, #0
 8004646:	d102      	bne.n	800464e <ETH_SetMACConfig+0x92>
 8004648:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800464c:	e000      	b.n	8004650 <ETH_SetMACConfig+0x94>
 800464e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004650:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	7fdb      	ldrb	r3, [r3, #31]
 8004656:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004658:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004660:	2a00      	cmp	r2, #0
 8004662:	d102      	bne.n	800466a <ETH_SetMACConfig+0xae>
 8004664:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004668:	e000      	b.n	800466c <ETH_SetMACConfig+0xb0>
 800466a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800466c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004672:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800467a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800467c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004682:	4313      	orrs	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	4b56      	ldr	r3, [pc, #344]	@ (80047e8 <ETH_SetMACConfig+0x22c>)
 800468e:	4013      	ands	r3, r2
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6812      	ldr	r2, [r2, #0]
 8004694:	68f9      	ldr	r1, [r7, #12]
 8004696:	430b      	orrs	r3, r1
 8004698:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800469e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80046a6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80046a8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80046b0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80046b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80046ba:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80046bc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80046c4:	2a00      	cmp	r2, #0
 80046c6:	d102      	bne.n	80046ce <ETH_SetMACConfig+0x112>
 80046c8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80046cc:	e000      	b.n	80046d0 <ETH_SetMACConfig+0x114>
 80046ce:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80046d0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	4b42      	ldr	r3, [pc, #264]	@ (80047ec <ETH_SetMACConfig+0x230>)
 80046e2:	4013      	ands	r3, r2
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6812      	ldr	r2, [r2, #0]
 80046e8:	68f9      	ldr	r1, [r7, #12]
 80046ea:	430b      	orrs	r3, r1
 80046ec:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046f4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68da      	ldr	r2, [r3, #12]
 8004704:	4b3a      	ldr	r3, [pc, #232]	@ (80047f0 <ETH_SetMACConfig+0x234>)
 8004706:	4013      	ands	r3, r2
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6812      	ldr	r2, [r2, #0]
 800470c:	68f9      	ldr	r1, [r7, #12]
 800470e:	430b      	orrs	r3, r1
 8004710:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004718:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800471e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004726:	2a00      	cmp	r2, #0
 8004728:	d101      	bne.n	800472e <ETH_SetMACConfig+0x172>
 800472a:	2280      	movs	r2, #128	@ 0x80
 800472c:	e000      	b.n	8004730 <ETH_SetMACConfig+0x174>
 800472e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004730:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004736:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004738:	4313      	orrs	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004742:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8004746:	4013      	ands	r3, r2
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6812      	ldr	r2, [r2, #0]
 800474c:	68f9      	ldr	r1, [r7, #12]
 800474e:	430b      	orrs	r3, r1
 8004750:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8004758:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8004760:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800476e:	f023 0103 	bic.w	r1, r3, #3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	430a      	orrs	r2, r1
 800477a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8004786:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80047a2:	2a00      	cmp	r2, #0
 80047a4:	d101      	bne.n	80047aa <ETH_SetMACConfig+0x1ee>
 80047a6:	2240      	movs	r2, #64	@ 0x40
 80047a8:	e000      	b.n	80047ac <ETH_SetMACConfig+0x1f0>
 80047aa:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80047ac:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80047b4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80047b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80047be:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80047c0:	4313      	orrs	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80047cc:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80047dc:	bf00      	nop
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	00048083 	.word	0x00048083
 80047ec:	c0f88000 	.word	0xc0f88000
 80047f0:	fffffef0 	.word	0xfffffef0

080047f4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	4b38      	ldr	r3, [pc, #224]	@ (80048ec <ETH_SetDMAConfig+0xf8>)
 800480a:	4013      	ands	r3, r2
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	6811      	ldr	r1, [r2, #0]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6812      	ldr	r2, [r2, #0]
 8004814:	430b      	orrs	r3, r1
 8004816:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800481a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	791b      	ldrb	r3, [r3, #4]
 8004820:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004826:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	7b1b      	ldrb	r3, [r3, #12]
 800482c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800482e:	4313      	orrs	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	4b2c      	ldr	r3, [pc, #176]	@ (80048f0 <ETH_SetDMAConfig+0xfc>)
 800483e:	4013      	ands	r3, r2
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6812      	ldr	r2, [r2, #0]
 8004844:	68f9      	ldr	r1, [r7, #12]
 8004846:	430b      	orrs	r3, r1
 8004848:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800484c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	7b5b      	ldrb	r3, [r3, #13]
 8004852:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004858:	4313      	orrs	r3, r2
 800485a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004864:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8004868:	4b22      	ldr	r3, [pc, #136]	@ (80048f4 <ETH_SetDMAConfig+0x100>)
 800486a:	4013      	ands	r3, r2
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6812      	ldr	r2, [r2, #0]
 8004870:	68f9      	ldr	r1, [r7, #12]
 8004872:	430b      	orrs	r3, r1
 8004874:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004878:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	7d1b      	ldrb	r3, [r3, #20]
 8004884:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004886:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	7f5b      	ldrb	r3, [r3, #29]
 800488c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800489a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800489e:	4b16      	ldr	r3, [pc, #88]	@ (80048f8 <ETH_SetDMAConfig+0x104>)
 80048a0:	4013      	ands	r3, r2
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	6812      	ldr	r2, [r2, #0]
 80048a6:	68f9      	ldr	r1, [r7, #12]
 80048a8:	430b      	orrs	r3, r1
 80048aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80048ae:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	7f1b      	ldrb	r3, [r3, #28]
 80048b6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80048bc:	4313      	orrs	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048c8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80048cc:	4b0b      	ldr	r3, [pc, #44]	@ (80048fc <ETH_SetDMAConfig+0x108>)
 80048ce:	4013      	ands	r3, r2
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6812      	ldr	r2, [r2, #0]
 80048d4:	68f9      	ldr	r1, [r7, #12]
 80048d6:	430b      	orrs	r3, r1
 80048d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80048dc:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80048e0:	bf00      	nop
 80048e2:	3714      	adds	r7, #20
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	ffff87fd 	.word	0xffff87fd
 80048f0:	ffff2ffe 	.word	0xffff2ffe
 80048f4:	fffec000 	.word	0xfffec000
 80048f8:	ffc0efef 	.word	0xffc0efef
 80048fc:	7fc0ffff 	.word	0x7fc0ffff

08004900 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b0a4      	sub	sp, #144	@ 0x90
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004908:	2301      	movs	r3, #1
 800490a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800490e:	2300      	movs	r3, #0
 8004910:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004912:	2300      	movs	r3, #0
 8004914:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004918:	2300      	movs	r3, #0
 800491a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800491e:	2301      	movs	r3, #1
 8004920:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004924:	2301      	movs	r3, #1
 8004926:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800492a:	2301      	movs	r3, #1
 800492c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004930:	2300      	movs	r3, #0
 8004932:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004936:	2301      	movs	r3, #1
 8004938:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800493c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004940:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004942:	2300      	movs	r3, #0
 8004944:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8004948:	2300      	movs	r3, #0
 800494a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800494c:	2300      	movs	r3, #0
 800494e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004952:	2300      	movs	r3, #0
 8004954:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8004958:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 800495c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800495e:	2300      	movs	r3, #0
 8004960:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004964:	2300      	movs	r3, #0
 8004966:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8004968:	2301      	movs	r3, #1
 800496a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800496e:	2300      	movs	r3, #0
 8004970:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004974:	2300      	movs	r3, #0
 8004976:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800497a:	2300      	movs	r3, #0
 800497c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800497e:	2300      	movs	r3, #0
 8004980:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004982:	2300      	movs	r3, #0
 8004984:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004986:	2300      	movs	r3, #0
 8004988:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800498c:	2300      	movs	r3, #0
 800498e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004992:	2301      	movs	r3, #1
 8004994:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004998:	2320      	movs	r3, #32
 800499a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800499e:	2301      	movs	r3, #1
 80049a0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80049a4:	2300      	movs	r3, #0
 80049a6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80049aa:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80049ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80049b0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80049b4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80049b6:	2300      	movs	r3, #0
 80049b8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80049bc:	2302      	movs	r3, #2
 80049be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80049c2:	2300      	movs	r3, #0
 80049c4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80049c8:	2300      	movs	r3, #0
 80049ca:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80049ce:	2300      	movs	r3, #0
 80049d0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80049d4:	2301      	movs	r3, #1
 80049d6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80049da:	2300      	movs	r3, #0
 80049dc:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80049de:	2301      	movs	r3, #1
 80049e0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80049e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80049e8:	4619      	mov	r1, r3
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7ff fde6 	bl	80045bc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80049f0:	2301      	movs	r3, #1
 80049f2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80049f4:	2301      	movs	r3, #1
 80049f6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80049f8:	2300      	movs	r3, #0
 80049fa:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80049fc:	2300      	movs	r3, #0
 80049fe:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004a02:	2300      	movs	r3, #0
 8004a04:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004a06:	2300      	movs	r3, #0
 8004a08:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004a0a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004a0e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004a10:	2300      	movs	r3, #0
 8004a12:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004a14:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004a18:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004a20:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8004a24:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004a26:	f107 0308 	add.w	r3, r7, #8
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7ff fee1 	bl	80047f4 <ETH_SetDMAConfig>
}
 8004a32:	bf00      	nop
 8004a34:	3790      	adds	r7, #144	@ 0x90
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b085      	sub	sp, #20
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004a42:	2300      	movs	r3, #0
 8004a44:	60fb      	str	r3, [r7, #12]
 8004a46:	e01d      	b.n	8004a84 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68d9      	ldr	r1, [r3, #12]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	4413      	add	r3, r2
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	440b      	add	r3, r1
 8004a58:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	2200      	movs	r2, #0
 8004a64:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004a72:	68b9      	ldr	r1, [r7, #8]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	3206      	adds	r2, #6
 8004a7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	3301      	adds	r3, #1
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2b03      	cmp	r3, #3
 8004a88:	d9de      	bls.n	8004a48 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a98:	461a      	mov	r2, r3
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68da      	ldr	r2, [r3, #12]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004aac:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68da      	ldr	r2, [r3, #12]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004abc:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8004ac0:	bf00      	nop
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	e023      	b.n	8004b22 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6919      	ldr	r1, [r3, #16]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	4413      	add	r3, r2
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	440b      	add	r3, r1
 8004aea:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2200      	movs	r2, #0
 8004af0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	2200      	movs	r2, #0
 8004af6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2200      	movs	r2, #0
 8004afc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	2200      	movs	r2, #0
 8004b02:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2200      	movs	r2, #0
 8004b08:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004b10:	68b9      	ldr	r1, [r7, #8]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	3212      	adds	r2, #18
 8004b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	60fb      	str	r3, [r7, #12]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d9d8      	bls.n	8004ada <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b4e:	461a      	mov	r2, r3
 8004b50:	2303      	movs	r3, #3
 8004b52:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691a      	ldr	r2, [r3, #16]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b62:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b76:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8004b7a:	bf00      	nop
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
	...

08004b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b089      	sub	sp, #36	@ 0x24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b92:	2300      	movs	r3, #0
 8004b94:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004b96:	4b86      	ldr	r3, [pc, #536]	@ (8004db0 <HAL_GPIO_Init+0x228>)
 8004b98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b9a:	e18c      	b.n	8004eb6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba8:	4013      	ands	r3, r2
 8004baa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 817e 	beq.w	8004eb0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f003 0303 	and.w	r3, r3, #3
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d005      	beq.n	8004bcc <HAL_GPIO_Init+0x44>
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f003 0303 	and.w	r3, r3, #3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d130      	bne.n	8004c2e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	2203      	movs	r2, #3
 8004bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bdc:	43db      	mvns	r3, r3
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	4013      	ands	r3, r2
 8004be2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	68da      	ldr	r2, [r3, #12]
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c02:	2201      	movs	r2, #1
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0a:	43db      	mvns	r3, r3
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	091b      	lsrs	r3, r3, #4
 8004c18:	f003 0201 	and.w	r2, r3, #1
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f003 0303 	and.w	r3, r3, #3
 8004c36:	2b03      	cmp	r3, #3
 8004c38:	d017      	beq.n	8004c6a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	2203      	movs	r2, #3
 8004c46:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4a:	43db      	mvns	r3, r3
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f003 0303 	and.w	r3, r3, #3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d123      	bne.n	8004cbe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	08da      	lsrs	r2, r3, #3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	3208      	adds	r2, #8
 8004c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	220f      	movs	r2, #15
 8004c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c92:	43db      	mvns	r3, r3
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	4013      	ands	r3, r2
 8004c98:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	691a      	ldr	r2, [r3, #16]
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	08da      	lsrs	r2, r3, #3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3208      	adds	r2, #8
 8004cb8:	69b9      	ldr	r1, [r7, #24]
 8004cba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	2203      	movs	r2, #3
 8004cca:	fa02 f303 	lsl.w	r3, r2, r3
 8004cce:	43db      	mvns	r3, r3
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f003 0203 	and.w	r2, r3, #3
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 80d8 	beq.w	8004eb0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d00:	4b2c      	ldr	r3, [pc, #176]	@ (8004db4 <HAL_GPIO_Init+0x22c>)
 8004d02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d06:	4a2b      	ldr	r2, [pc, #172]	@ (8004db4 <HAL_GPIO_Init+0x22c>)
 8004d08:	f043 0302 	orr.w	r3, r3, #2
 8004d0c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004d10:	4b28      	ldr	r3, [pc, #160]	@ (8004db4 <HAL_GPIO_Init+0x22c>)
 8004d12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d1e:	4a26      	ldr	r2, [pc, #152]	@ (8004db8 <HAL_GPIO_Init+0x230>)
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	089b      	lsrs	r3, r3, #2
 8004d24:	3302      	adds	r3, #2
 8004d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	f003 0303 	and.w	r3, r3, #3
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	220f      	movs	r2, #15
 8004d36:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3a:	43db      	mvns	r3, r3
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a1d      	ldr	r2, [pc, #116]	@ (8004dbc <HAL_GPIO_Init+0x234>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d04a      	beq.n	8004de0 <HAL_GPIO_Init+0x258>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8004dc0 <HAL_GPIO_Init+0x238>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d02b      	beq.n	8004daa <HAL_GPIO_Init+0x222>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a1b      	ldr	r2, [pc, #108]	@ (8004dc4 <HAL_GPIO_Init+0x23c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d025      	beq.n	8004da6 <HAL_GPIO_Init+0x21e>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a1a      	ldr	r2, [pc, #104]	@ (8004dc8 <HAL_GPIO_Init+0x240>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d01f      	beq.n	8004da2 <HAL_GPIO_Init+0x21a>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a19      	ldr	r2, [pc, #100]	@ (8004dcc <HAL_GPIO_Init+0x244>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d019      	beq.n	8004d9e <HAL_GPIO_Init+0x216>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a18      	ldr	r2, [pc, #96]	@ (8004dd0 <HAL_GPIO_Init+0x248>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d013      	beq.n	8004d9a <HAL_GPIO_Init+0x212>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a17      	ldr	r2, [pc, #92]	@ (8004dd4 <HAL_GPIO_Init+0x24c>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d00d      	beq.n	8004d96 <HAL_GPIO_Init+0x20e>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a16      	ldr	r2, [pc, #88]	@ (8004dd8 <HAL_GPIO_Init+0x250>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d007      	beq.n	8004d92 <HAL_GPIO_Init+0x20a>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a15      	ldr	r2, [pc, #84]	@ (8004ddc <HAL_GPIO_Init+0x254>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d101      	bne.n	8004d8e <HAL_GPIO_Init+0x206>
 8004d8a:	2309      	movs	r3, #9
 8004d8c:	e029      	b.n	8004de2 <HAL_GPIO_Init+0x25a>
 8004d8e:	230a      	movs	r3, #10
 8004d90:	e027      	b.n	8004de2 <HAL_GPIO_Init+0x25a>
 8004d92:	2307      	movs	r3, #7
 8004d94:	e025      	b.n	8004de2 <HAL_GPIO_Init+0x25a>
 8004d96:	2306      	movs	r3, #6
 8004d98:	e023      	b.n	8004de2 <HAL_GPIO_Init+0x25a>
 8004d9a:	2305      	movs	r3, #5
 8004d9c:	e021      	b.n	8004de2 <HAL_GPIO_Init+0x25a>
 8004d9e:	2304      	movs	r3, #4
 8004da0:	e01f      	b.n	8004de2 <HAL_GPIO_Init+0x25a>
 8004da2:	2303      	movs	r3, #3
 8004da4:	e01d      	b.n	8004de2 <HAL_GPIO_Init+0x25a>
 8004da6:	2302      	movs	r3, #2
 8004da8:	e01b      	b.n	8004de2 <HAL_GPIO_Init+0x25a>
 8004daa:	2301      	movs	r3, #1
 8004dac:	e019      	b.n	8004de2 <HAL_GPIO_Init+0x25a>
 8004dae:	bf00      	nop
 8004db0:	58000080 	.word	0x58000080
 8004db4:	58024400 	.word	0x58024400
 8004db8:	58000400 	.word	0x58000400
 8004dbc:	58020000 	.word	0x58020000
 8004dc0:	58020400 	.word	0x58020400
 8004dc4:	58020800 	.word	0x58020800
 8004dc8:	58020c00 	.word	0x58020c00
 8004dcc:	58021000 	.word	0x58021000
 8004dd0:	58021400 	.word	0x58021400
 8004dd4:	58021800 	.word	0x58021800
 8004dd8:	58021c00 	.word	0x58021c00
 8004ddc:	58022400 	.word	0x58022400
 8004de0:	2300      	movs	r3, #0
 8004de2:	69fa      	ldr	r2, [r7, #28]
 8004de4:	f002 0203 	and.w	r2, r2, #3
 8004de8:	0092      	lsls	r2, r2, #2
 8004dea:	4093      	lsls	r3, r2
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004df2:	4938      	ldr	r1, [pc, #224]	@ (8004ed4 <HAL_GPIO_Init+0x34c>)
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	089b      	lsrs	r3, r3, #2
 8004df8:	3302      	adds	r3, #2
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	43db      	mvns	r3, r3
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004e26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004e2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	43db      	mvns	r3, r3
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d003      	beq.n	8004e54 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004e54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	43db      	mvns	r3, r3
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d003      	beq.n	8004e80 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	43db      	mvns	r3, r3
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	4013      	ands	r3, r2
 8004e94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f47f ae6b 	bne.w	8004b9c <HAL_GPIO_Init+0x14>
  }
}
 8004ec6:	bf00      	nop
 8004ec8:	bf00      	nop
 8004eca:	3724      	adds	r7, #36	@ 0x24
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr
 8004ed4:	58000400 	.word	0x58000400

08004ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	807b      	strh	r3, [r7, #2]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ee8:	787b      	ldrb	r3, [r7, #1]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004eee:	887a      	ldrh	r2, [r7, #2]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004ef4:	e003      	b.n	8004efe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004ef6:	887b      	ldrh	r3, [r7, #2]
 8004ef8:	041a      	lsls	r2, r3, #16
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	619a      	str	r2, [r3, #24]
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
	...

08004f0c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004f14:	4b19      	ldr	r3, [pc, #100]	@ (8004f7c <HAL_PWREx_ConfigSupply+0x70>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f003 0304 	and.w	r3, r3, #4
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d00a      	beq.n	8004f36 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004f20:	4b16      	ldr	r3, [pc, #88]	@ (8004f7c <HAL_PWREx_ConfigSupply+0x70>)
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f003 0307 	and.w	r3, r3, #7
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d001      	beq.n	8004f32 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e01f      	b.n	8004f72 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	e01d      	b.n	8004f72 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004f36:	4b11      	ldr	r3, [pc, #68]	@ (8004f7c <HAL_PWREx_ConfigSupply+0x70>)
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f023 0207 	bic.w	r2, r3, #7
 8004f3e:	490f      	ldr	r1, [pc, #60]	@ (8004f7c <HAL_PWREx_ConfigSupply+0x70>)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004f46:	f7fc fcbd 	bl	80018c4 <HAL_GetTick>
 8004f4a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f4c:	e009      	b.n	8004f62 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004f4e:	f7fc fcb9 	bl	80018c4 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004f5c:	d901      	bls.n	8004f62 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e007      	b.n	8004f72 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f62:	4b06      	ldr	r3, [pc, #24]	@ (8004f7c <HAL_PWREx_ConfigSupply+0x70>)
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f6e:	d1ee      	bne.n	8004f4e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	58024800 	.word	0x58024800

08004f80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08c      	sub	sp, #48	@ 0x30
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e3c8      	b.n	8005724 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f000 8087 	beq.w	80050ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fa0:	4b88      	ldr	r3, [pc, #544]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004faa:	4b86      	ldr	r3, [pc, #536]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 8004fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fae:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fb2:	2b10      	cmp	r3, #16
 8004fb4:	d007      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x46>
 8004fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fb8:	2b18      	cmp	r3, #24
 8004fba:	d110      	bne.n	8004fde <HAL_RCC_OscConfig+0x5e>
 8004fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fbe:	f003 0303 	and.w	r3, r3, #3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d10b      	bne.n	8004fde <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fc6:	4b7f      	ldr	r3, [pc, #508]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d06c      	beq.n	80050ac <HAL_RCC_OscConfig+0x12c>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d168      	bne.n	80050ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e3a2      	b.n	8005724 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fe6:	d106      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x76>
 8004fe8:	4b76      	ldr	r3, [pc, #472]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a75      	ldr	r2, [pc, #468]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 8004fee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ff2:	6013      	str	r3, [r2, #0]
 8004ff4:	e02e      	b.n	8005054 <HAL_RCC_OscConfig+0xd4>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10c      	bne.n	8005018 <HAL_RCC_OscConfig+0x98>
 8004ffe:	4b71      	ldr	r3, [pc, #452]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a70      	ldr	r2, [pc, #448]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 8005004:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005008:	6013      	str	r3, [r2, #0]
 800500a:	4b6e      	ldr	r3, [pc, #440]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a6d      	ldr	r2, [pc, #436]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 8005010:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005014:	6013      	str	r3, [r2, #0]
 8005016:	e01d      	b.n	8005054 <HAL_RCC_OscConfig+0xd4>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005020:	d10c      	bne.n	800503c <HAL_RCC_OscConfig+0xbc>
 8005022:	4b68      	ldr	r3, [pc, #416]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a67      	ldr	r2, [pc, #412]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 8005028:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800502c:	6013      	str	r3, [r2, #0]
 800502e:	4b65      	ldr	r3, [pc, #404]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a64      	ldr	r2, [pc, #400]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 8005034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	e00b      	b.n	8005054 <HAL_RCC_OscConfig+0xd4>
 800503c:	4b61      	ldr	r3, [pc, #388]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a60      	ldr	r2, [pc, #384]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 8005042:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005046:	6013      	str	r3, [r2, #0]
 8005048:	4b5e      	ldr	r3, [pc, #376]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a5d      	ldr	r2, [pc, #372]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 800504e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d013      	beq.n	8005084 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505c:	f7fc fc32 	bl	80018c4 <HAL_GetTick>
 8005060:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005064:	f7fc fc2e 	bl	80018c4 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b64      	cmp	r3, #100	@ 0x64
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e356      	b.n	8005724 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005076:	4b53      	ldr	r3, [pc, #332]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d0f0      	beq.n	8005064 <HAL_RCC_OscConfig+0xe4>
 8005082:	e014      	b.n	80050ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005084:	f7fc fc1e 	bl	80018c4 <HAL_GetTick>
 8005088:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800508c:	f7fc fc1a 	bl	80018c4 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b64      	cmp	r3, #100	@ 0x64
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e342      	b.n	8005724 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800509e:	4b49      	ldr	r3, [pc, #292]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1f0      	bne.n	800508c <HAL_RCC_OscConfig+0x10c>
 80050aa:	e000      	b.n	80050ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 808c 	beq.w	80051d4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050bc:	4b41      	ldr	r3, [pc, #260]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80050c6:	4b3f      	ldr	r3, [pc, #252]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 80050c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d007      	beq.n	80050e2 <HAL_RCC_OscConfig+0x162>
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	2b18      	cmp	r3, #24
 80050d6:	d137      	bne.n	8005148 <HAL_RCC_OscConfig+0x1c8>
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	f003 0303 	and.w	r3, r3, #3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d132      	bne.n	8005148 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050e2:	4b38      	ldr	r3, [pc, #224]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0304 	and.w	r3, r3, #4
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d005      	beq.n	80050fa <HAL_RCC_OscConfig+0x17a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e314      	b.n	8005724 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80050fa:	4b32      	ldr	r3, [pc, #200]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f023 0219 	bic.w	r2, r3, #25
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	492f      	ldr	r1, [pc, #188]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 8005108:	4313      	orrs	r3, r2
 800510a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510c:	f7fc fbda 	bl	80018c4 <HAL_GetTick>
 8005110:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005114:	f7fc fbd6 	bl	80018c4 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b02      	cmp	r3, #2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e2fe      	b.n	8005724 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005126:	4b27      	ldr	r3, [pc, #156]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0304 	and.w	r3, r3, #4
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0f0      	beq.n	8005114 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005132:	4b24      	ldr	r3, [pc, #144]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	061b      	lsls	r3, r3, #24
 8005140:	4920      	ldr	r1, [pc, #128]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 8005142:	4313      	orrs	r3, r2
 8005144:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005146:	e045      	b.n	80051d4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d026      	beq.n	800519e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005150:	4b1c      	ldr	r3, [pc, #112]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f023 0219 	bic.w	r2, r3, #25
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	4919      	ldr	r1, [pc, #100]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 800515e:	4313      	orrs	r3, r2
 8005160:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005162:	f7fc fbaf 	bl	80018c4 <HAL_GetTick>
 8005166:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005168:	e008      	b.n	800517c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800516a:	f7fc fbab 	bl	80018c4 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	2b02      	cmp	r3, #2
 8005176:	d901      	bls.n	800517c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e2d3      	b.n	8005724 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800517c:	4b11      	ldr	r3, [pc, #68]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b00      	cmp	r3, #0
 8005186:	d0f0      	beq.n	800516a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005188:	4b0e      	ldr	r3, [pc, #56]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	061b      	lsls	r3, r3, #24
 8005196:	490b      	ldr	r1, [pc, #44]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 8005198:	4313      	orrs	r3, r2
 800519a:	604b      	str	r3, [r1, #4]
 800519c:	e01a      	b.n	80051d4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800519e:	4b09      	ldr	r3, [pc, #36]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a08      	ldr	r2, [pc, #32]	@ (80051c4 <HAL_RCC_OscConfig+0x244>)
 80051a4:	f023 0301 	bic.w	r3, r3, #1
 80051a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051aa:	f7fc fb8b 	bl	80018c4 <HAL_GetTick>
 80051ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051b0:	e00a      	b.n	80051c8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051b2:	f7fc fb87 	bl	80018c4 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d903      	bls.n	80051c8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e2af      	b.n	8005724 <HAL_RCC_OscConfig+0x7a4>
 80051c4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051c8:	4b96      	ldr	r3, [pc, #600]	@ (8005424 <HAL_RCC_OscConfig+0x4a4>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1ee      	bne.n	80051b2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0310 	and.w	r3, r3, #16
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d06a      	beq.n	80052b6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051e0:	4b90      	ldr	r3, [pc, #576]	@ (8005424 <HAL_RCC_OscConfig+0x4a4>)
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051e8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80051ea:	4b8e      	ldr	r3, [pc, #568]	@ (8005424 <HAL_RCC_OscConfig+0x4a4>)
 80051ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ee:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	2b08      	cmp	r3, #8
 80051f4:	d007      	beq.n	8005206 <HAL_RCC_OscConfig+0x286>
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	2b18      	cmp	r3, #24
 80051fa:	d11b      	bne.n	8005234 <HAL_RCC_OscConfig+0x2b4>
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f003 0303 	and.w	r3, r3, #3
 8005202:	2b01      	cmp	r3, #1
 8005204:	d116      	bne.n	8005234 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005206:	4b87      	ldr	r3, [pc, #540]	@ (8005424 <HAL_RCC_OscConfig+0x4a4>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800520e:	2b00      	cmp	r3, #0
 8005210:	d005      	beq.n	800521e <HAL_RCC_OscConfig+0x29e>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	2b80      	cmp	r3, #128	@ 0x80
 8005218:	d001      	beq.n	800521e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e282      	b.n	8005724 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800521e:	4b81      	ldr	r3, [pc, #516]	@ (8005424 <HAL_RCC_OscConfig+0x4a4>)
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	061b      	lsls	r3, r3, #24
 800522c:	497d      	ldr	r1, [pc, #500]	@ (8005424 <HAL_RCC_OscConfig+0x4a4>)
 800522e:	4313      	orrs	r3, r2
 8005230:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005232:	e040      	b.n	80052b6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	69db      	ldr	r3, [r3, #28]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d023      	beq.n	8005284 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800523c:	4b79      	ldr	r3, [pc, #484]	@ (8005424 <HAL_RCC_OscConfig+0x4a4>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a78      	ldr	r2, [pc, #480]	@ (8005424 <HAL_RCC_OscConfig+0x4a4>)
 8005242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005246:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005248:	f7fc fb3c 	bl	80018c4 <HAL_GetTick>
 800524c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005250:	f7fc fb38 	bl	80018c4 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e260      	b.n	8005724 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005262:	4b70      	ldr	r3, [pc, #448]	@ (8005424 <HAL_RCC_OscConfig+0x4a4>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800526a:	2b00      	cmp	r3, #0
 800526c:	d0f0      	beq.n	8005250 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800526e:	4b6d      	ldr	r3, [pc, #436]	@ (8005424 <HAL_RCC_OscConfig+0x4a4>)
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	061b      	lsls	r3, r3, #24
 800527c:	4969      	ldr	r1, [pc, #420]	@ (8005424 <HAL_RCC_OscConfig+0x4a4>)
 800527e:	4313      	orrs	r3, r2
 8005280:	60cb      	str	r3, [r1, #12]
 8005282:	e018      	b.n	80052b6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005284:	4b67      	ldr	r3, [pc, #412]	@ (8005424 <HAL_RCC_OscConfig+0x4a4>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a66      	ldr	r2, [pc, #408]	@ (8005424 <HAL_RCC_OscConfig+0x4a4>)
 800528a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800528e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005290:	f7fc fb18 	bl	80018c4 <HAL_GetTick>
 8005294:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005298:	f7fc fb14 	bl	80018c4 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e23c      	b.n	8005724 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80052aa:	4b5e      	ldr	r3, [pc, #376]	@ (8005424 <HAL_RCC_OscConfig+0x4a4>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1f0      	bne.n	8005298 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0308 	and.w	r3, r3, #8
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d036      	beq.n	8005330 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d019      	beq.n	80052fe <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052ca:	4b56      	ldr	r3, [pc, #344]	@ (8005424 <HAL_RCC_OscConfig+0x4a4>)
 80052cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052ce:	4a55      	ldr	r2, [pc, #340]	@ (8005424 <HAL_RCC_OscConfig+0x4a4>)
 80052d0:	f043 0301 	orr.w	r3, r3, #1
 80052d4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d6:	f7fc faf5 	bl	80018c4 <HAL_GetTick>
 80052da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80052dc:	e008      	b.n	80052f0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052de:	f7fc faf1 	bl	80018c4 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d901      	bls.n	80052f0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e219      	b.n	8005724 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80052f0:	4b4c      	ldr	r3, [pc, #304]	@ (8005424 <HAL_RCC_OscConfig+0x4a4>)
 80052f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0f0      	beq.n	80052de <HAL_RCC_OscConfig+0x35e>
 80052fc:	e018      	b.n	8005330 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052fe:	4b49      	ldr	r3, [pc, #292]	@ (8005424 <HAL_RCC_OscConfig+0x4a4>)
 8005300:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005302:	4a48      	ldr	r2, [pc, #288]	@ (8005424 <HAL_RCC_OscConfig+0x4a4>)
 8005304:	f023 0301 	bic.w	r3, r3, #1
 8005308:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800530a:	f7fc fadb 	bl	80018c4 <HAL_GetTick>
 800530e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005310:	e008      	b.n	8005324 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005312:	f7fc fad7 	bl	80018c4 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	2b02      	cmp	r3, #2
 800531e:	d901      	bls.n	8005324 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e1ff      	b.n	8005724 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005324:	4b3f      	ldr	r3, [pc, #252]	@ (8005424 <HAL_RCC_OscConfig+0x4a4>)
 8005326:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005328:	f003 0302 	and.w	r3, r3, #2
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1f0      	bne.n	8005312 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0320 	and.w	r3, r3, #32
 8005338:	2b00      	cmp	r3, #0
 800533a:	d036      	beq.n	80053aa <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d019      	beq.n	8005378 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005344:	4b37      	ldr	r3, [pc, #220]	@ (8005424 <HAL_RCC_OscConfig+0x4a4>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a36      	ldr	r2, [pc, #216]	@ (8005424 <HAL_RCC_OscConfig+0x4a4>)
 800534a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800534e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005350:	f7fc fab8 	bl	80018c4 <HAL_GetTick>
 8005354:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005356:	e008      	b.n	800536a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005358:	f7fc fab4 	bl	80018c4 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b02      	cmp	r3, #2
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e1dc      	b.n	8005724 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800536a:	4b2e      	ldr	r3, [pc, #184]	@ (8005424 <HAL_RCC_OscConfig+0x4a4>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0f0      	beq.n	8005358 <HAL_RCC_OscConfig+0x3d8>
 8005376:	e018      	b.n	80053aa <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005378:	4b2a      	ldr	r3, [pc, #168]	@ (8005424 <HAL_RCC_OscConfig+0x4a4>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a29      	ldr	r2, [pc, #164]	@ (8005424 <HAL_RCC_OscConfig+0x4a4>)
 800537e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005382:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005384:	f7fc fa9e 	bl	80018c4 <HAL_GetTick>
 8005388:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800538a:	e008      	b.n	800539e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800538c:	f7fc fa9a 	bl	80018c4 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b02      	cmp	r3, #2
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e1c2      	b.n	8005724 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800539e:	4b21      	ldr	r3, [pc, #132]	@ (8005424 <HAL_RCC_OscConfig+0x4a4>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1f0      	bne.n	800538c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0304 	and.w	r3, r3, #4
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f000 8086 	beq.w	80054c4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80053b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005428 <HAL_RCC_OscConfig+0x4a8>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a1a      	ldr	r2, [pc, #104]	@ (8005428 <HAL_RCC_OscConfig+0x4a8>)
 80053be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053c4:	f7fc fa7e 	bl	80018c4 <HAL_GetTick>
 80053c8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053ca:	e008      	b.n	80053de <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053cc:	f7fc fa7a 	bl	80018c4 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b64      	cmp	r3, #100	@ 0x64
 80053d8:	d901      	bls.n	80053de <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e1a2      	b.n	8005724 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053de:	4b12      	ldr	r3, [pc, #72]	@ (8005428 <HAL_RCC_OscConfig+0x4a8>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d0f0      	beq.n	80053cc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d106      	bne.n	8005400 <HAL_RCC_OscConfig+0x480>
 80053f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005424 <HAL_RCC_OscConfig+0x4a4>)
 80053f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053f6:	4a0b      	ldr	r2, [pc, #44]	@ (8005424 <HAL_RCC_OscConfig+0x4a4>)
 80053f8:	f043 0301 	orr.w	r3, r3, #1
 80053fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80053fe:	e032      	b.n	8005466 <HAL_RCC_OscConfig+0x4e6>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d111      	bne.n	800542c <HAL_RCC_OscConfig+0x4ac>
 8005408:	4b06      	ldr	r3, [pc, #24]	@ (8005424 <HAL_RCC_OscConfig+0x4a4>)
 800540a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800540c:	4a05      	ldr	r2, [pc, #20]	@ (8005424 <HAL_RCC_OscConfig+0x4a4>)
 800540e:	f023 0301 	bic.w	r3, r3, #1
 8005412:	6713      	str	r3, [r2, #112]	@ 0x70
 8005414:	4b03      	ldr	r3, [pc, #12]	@ (8005424 <HAL_RCC_OscConfig+0x4a4>)
 8005416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005418:	4a02      	ldr	r2, [pc, #8]	@ (8005424 <HAL_RCC_OscConfig+0x4a4>)
 800541a:	f023 0304 	bic.w	r3, r3, #4
 800541e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005420:	e021      	b.n	8005466 <HAL_RCC_OscConfig+0x4e6>
 8005422:	bf00      	nop
 8005424:	58024400 	.word	0x58024400
 8005428:	58024800 	.word	0x58024800
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	2b05      	cmp	r3, #5
 8005432:	d10c      	bne.n	800544e <HAL_RCC_OscConfig+0x4ce>
 8005434:	4b83      	ldr	r3, [pc, #524]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 8005436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005438:	4a82      	ldr	r2, [pc, #520]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 800543a:	f043 0304 	orr.w	r3, r3, #4
 800543e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005440:	4b80      	ldr	r3, [pc, #512]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 8005442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005444:	4a7f      	ldr	r2, [pc, #508]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 8005446:	f043 0301 	orr.w	r3, r3, #1
 800544a:	6713      	str	r3, [r2, #112]	@ 0x70
 800544c:	e00b      	b.n	8005466 <HAL_RCC_OscConfig+0x4e6>
 800544e:	4b7d      	ldr	r3, [pc, #500]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 8005450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005452:	4a7c      	ldr	r2, [pc, #496]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 8005454:	f023 0301 	bic.w	r3, r3, #1
 8005458:	6713      	str	r3, [r2, #112]	@ 0x70
 800545a:	4b7a      	ldr	r3, [pc, #488]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 800545c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800545e:	4a79      	ldr	r2, [pc, #484]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 8005460:	f023 0304 	bic.w	r3, r3, #4
 8005464:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d015      	beq.n	800549a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800546e:	f7fc fa29 	bl	80018c4 <HAL_GetTick>
 8005472:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005474:	e00a      	b.n	800548c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005476:	f7fc fa25 	bl	80018c4 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005484:	4293      	cmp	r3, r2
 8005486:	d901      	bls.n	800548c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e14b      	b.n	8005724 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800548c:	4b6d      	ldr	r3, [pc, #436]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 800548e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0ee      	beq.n	8005476 <HAL_RCC_OscConfig+0x4f6>
 8005498:	e014      	b.n	80054c4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800549a:	f7fc fa13 	bl	80018c4 <HAL_GetTick>
 800549e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054a0:	e00a      	b.n	80054b8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054a2:	f7fc fa0f 	bl	80018c4 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e135      	b.n	8005724 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054b8:	4b62      	ldr	r3, [pc, #392]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 80054ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1ee      	bne.n	80054a2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 812a 	beq.w	8005722 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80054ce:	4b5d      	ldr	r3, [pc, #372]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054d6:	2b18      	cmp	r3, #24
 80054d8:	f000 80ba 	beq.w	8005650 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	f040 8095 	bne.w	8005610 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054e6:	4b57      	ldr	r3, [pc, #348]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a56      	ldr	r2, [pc, #344]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 80054ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f2:	f7fc f9e7 	bl	80018c4 <HAL_GetTick>
 80054f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054f8:	e008      	b.n	800550c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054fa:	f7fc f9e3 	bl	80018c4 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	2b02      	cmp	r3, #2
 8005506:	d901      	bls.n	800550c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e10b      	b.n	8005724 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800550c:	4b4d      	ldr	r3, [pc, #308]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1f0      	bne.n	80054fa <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005518:	4b4a      	ldr	r3, [pc, #296]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 800551a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800551c:	4b4a      	ldr	r3, [pc, #296]	@ (8005648 <HAL_RCC_OscConfig+0x6c8>)
 800551e:	4013      	ands	r3, r2
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005528:	0112      	lsls	r2, r2, #4
 800552a:	430a      	orrs	r2, r1
 800552c:	4945      	ldr	r1, [pc, #276]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 800552e:	4313      	orrs	r3, r2
 8005530:	628b      	str	r3, [r1, #40]	@ 0x28
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005536:	3b01      	subs	r3, #1
 8005538:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005540:	3b01      	subs	r3, #1
 8005542:	025b      	lsls	r3, r3, #9
 8005544:	b29b      	uxth	r3, r3
 8005546:	431a      	orrs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800554c:	3b01      	subs	r3, #1
 800554e:	041b      	lsls	r3, r3, #16
 8005550:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005554:	431a      	orrs	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800555a:	3b01      	subs	r3, #1
 800555c:	061b      	lsls	r3, r3, #24
 800555e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005562:	4938      	ldr	r1, [pc, #224]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 8005564:	4313      	orrs	r3, r2
 8005566:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005568:	4b36      	ldr	r3, [pc, #216]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 800556a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556c:	4a35      	ldr	r2, [pc, #212]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 800556e:	f023 0301 	bic.w	r3, r3, #1
 8005572:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005574:	4b33      	ldr	r3, [pc, #204]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 8005576:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005578:	4b34      	ldr	r3, [pc, #208]	@ (800564c <HAL_RCC_OscConfig+0x6cc>)
 800557a:	4013      	ands	r3, r2
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005580:	00d2      	lsls	r2, r2, #3
 8005582:	4930      	ldr	r1, [pc, #192]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 8005584:	4313      	orrs	r3, r2
 8005586:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005588:	4b2e      	ldr	r3, [pc, #184]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 800558a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558c:	f023 020c 	bic.w	r2, r3, #12
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005594:	492b      	ldr	r1, [pc, #172]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 8005596:	4313      	orrs	r3, r2
 8005598:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800559a:	4b2a      	ldr	r3, [pc, #168]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 800559c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800559e:	f023 0202 	bic.w	r2, r3, #2
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055a6:	4927      	ldr	r1, [pc, #156]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80055ac:	4b25      	ldr	r3, [pc, #148]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 80055ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b0:	4a24      	ldr	r2, [pc, #144]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 80055b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055b8:	4b22      	ldr	r3, [pc, #136]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 80055ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055bc:	4a21      	ldr	r2, [pc, #132]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 80055be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80055c4:	4b1f      	ldr	r3, [pc, #124]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 80055c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c8:	4a1e      	ldr	r2, [pc, #120]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 80055ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80055ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80055d0:	4b1c      	ldr	r3, [pc, #112]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 80055d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d4:	4a1b      	ldr	r2, [pc, #108]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 80055d6:	f043 0301 	orr.w	r3, r3, #1
 80055da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055dc:	4b19      	ldr	r3, [pc, #100]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a18      	ldr	r2, [pc, #96]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 80055e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e8:	f7fc f96c 	bl	80018c4 <HAL_GetTick>
 80055ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055f0:	f7fc f968 	bl	80018c4 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e090      	b.n	8005724 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005602:	4b10      	ldr	r3, [pc, #64]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0f0      	beq.n	80055f0 <HAL_RCC_OscConfig+0x670>
 800560e:	e088      	b.n	8005722 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005610:	4b0c      	ldr	r3, [pc, #48]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a0b      	ldr	r2, [pc, #44]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 8005616:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800561a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800561c:	f7fc f952 	bl	80018c4 <HAL_GetTick>
 8005620:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005622:	e008      	b.n	8005636 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005624:	f7fc f94e 	bl	80018c4 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e076      	b.n	8005724 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005636:	4b03      	ldr	r3, [pc, #12]	@ (8005644 <HAL_RCC_OscConfig+0x6c4>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1f0      	bne.n	8005624 <HAL_RCC_OscConfig+0x6a4>
 8005642:	e06e      	b.n	8005722 <HAL_RCC_OscConfig+0x7a2>
 8005644:	58024400 	.word	0x58024400
 8005648:	fffffc0c 	.word	0xfffffc0c
 800564c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005650:	4b36      	ldr	r3, [pc, #216]	@ (800572c <HAL_RCC_OscConfig+0x7ac>)
 8005652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005654:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005656:	4b35      	ldr	r3, [pc, #212]	@ (800572c <HAL_RCC_OscConfig+0x7ac>)
 8005658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800565a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005660:	2b01      	cmp	r3, #1
 8005662:	d031      	beq.n	80056c8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	f003 0203 	and.w	r2, r3, #3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800566e:	429a      	cmp	r2, r3
 8005670:	d12a      	bne.n	80056c8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	091b      	lsrs	r3, r3, #4
 8005676:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800567e:	429a      	cmp	r2, r3
 8005680:	d122      	bne.n	80056c8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800568c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800568e:	429a      	cmp	r2, r3
 8005690:	d11a      	bne.n	80056c8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	0a5b      	lsrs	r3, r3, #9
 8005696:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800569e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d111      	bne.n	80056c8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	0c1b      	lsrs	r3, r3, #16
 80056a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d108      	bne.n	80056c8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	0e1b      	lsrs	r3, r3, #24
 80056ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d001      	beq.n	80056cc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e02b      	b.n	8005724 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80056cc:	4b17      	ldr	r3, [pc, #92]	@ (800572c <HAL_RCC_OscConfig+0x7ac>)
 80056ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056d0:	08db      	lsrs	r3, r3, #3
 80056d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056d6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d01f      	beq.n	8005722 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80056e2:	4b12      	ldr	r3, [pc, #72]	@ (800572c <HAL_RCC_OscConfig+0x7ac>)
 80056e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e6:	4a11      	ldr	r2, [pc, #68]	@ (800572c <HAL_RCC_OscConfig+0x7ac>)
 80056e8:	f023 0301 	bic.w	r3, r3, #1
 80056ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80056ee:	f7fc f8e9 	bl	80018c4 <HAL_GetTick>
 80056f2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80056f4:	bf00      	nop
 80056f6:	f7fc f8e5 	bl	80018c4 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fe:	4293      	cmp	r3, r2
 8005700:	d0f9      	beq.n	80056f6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005702:	4b0a      	ldr	r3, [pc, #40]	@ (800572c <HAL_RCC_OscConfig+0x7ac>)
 8005704:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005706:	4b0a      	ldr	r3, [pc, #40]	@ (8005730 <HAL_RCC_OscConfig+0x7b0>)
 8005708:	4013      	ands	r3, r2
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800570e:	00d2      	lsls	r2, r2, #3
 8005710:	4906      	ldr	r1, [pc, #24]	@ (800572c <HAL_RCC_OscConfig+0x7ac>)
 8005712:	4313      	orrs	r3, r2
 8005714:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005716:	4b05      	ldr	r3, [pc, #20]	@ (800572c <HAL_RCC_OscConfig+0x7ac>)
 8005718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571a:	4a04      	ldr	r2, [pc, #16]	@ (800572c <HAL_RCC_OscConfig+0x7ac>)
 800571c:	f043 0301 	orr.w	r3, r3, #1
 8005720:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3730      	adds	r7, #48	@ 0x30
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	58024400 	.word	0x58024400
 8005730:	ffff0007 	.word	0xffff0007

08005734 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d101      	bne.n	8005748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e19c      	b.n	8005a82 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005748:	4b8a      	ldr	r3, [pc, #552]	@ (8005974 <HAL_RCC_ClockConfig+0x240>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 030f 	and.w	r3, r3, #15
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	429a      	cmp	r2, r3
 8005754:	d910      	bls.n	8005778 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005756:	4b87      	ldr	r3, [pc, #540]	@ (8005974 <HAL_RCC_ClockConfig+0x240>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f023 020f 	bic.w	r2, r3, #15
 800575e:	4985      	ldr	r1, [pc, #532]	@ (8005974 <HAL_RCC_ClockConfig+0x240>)
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	4313      	orrs	r3, r2
 8005764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005766:	4b83      	ldr	r3, [pc, #524]	@ (8005974 <HAL_RCC_ClockConfig+0x240>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 030f 	and.w	r3, r3, #15
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	429a      	cmp	r2, r3
 8005772:	d001      	beq.n	8005778 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e184      	b.n	8005a82 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b00      	cmp	r3, #0
 8005782:	d010      	beq.n	80057a6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	691a      	ldr	r2, [r3, #16]
 8005788:	4b7b      	ldr	r3, [pc, #492]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005790:	429a      	cmp	r2, r3
 8005792:	d908      	bls.n	80057a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005794:	4b78      	ldr	r3, [pc, #480]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	4975      	ldr	r1, [pc, #468]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0308 	and.w	r3, r3, #8
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d010      	beq.n	80057d4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	695a      	ldr	r2, [r3, #20]
 80057b6:	4b70      	ldr	r3, [pc, #448]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057be:	429a      	cmp	r2, r3
 80057c0:	d908      	bls.n	80057d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80057c2:	4b6d      	ldr	r3, [pc, #436]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	496a      	ldr	r1, [pc, #424]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0310 	and.w	r3, r3, #16
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d010      	beq.n	8005802 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	699a      	ldr	r2, [r3, #24]
 80057e4:	4b64      	ldr	r3, [pc, #400]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 80057e6:	69db      	ldr	r3, [r3, #28]
 80057e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d908      	bls.n	8005802 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80057f0:	4b61      	ldr	r3, [pc, #388]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 80057f2:	69db      	ldr	r3, [r3, #28]
 80057f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	495e      	ldr	r1, [pc, #376]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0320 	and.w	r3, r3, #32
 800580a:	2b00      	cmp	r3, #0
 800580c:	d010      	beq.n	8005830 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	69da      	ldr	r2, [r3, #28]
 8005812:	4b59      	ldr	r3, [pc, #356]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800581a:	429a      	cmp	r2, r3
 800581c:	d908      	bls.n	8005830 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800581e:	4b56      	ldr	r3, [pc, #344]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	4953      	ldr	r1, [pc, #332]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 800582c:	4313      	orrs	r3, r2
 800582e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d010      	beq.n	800585e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68da      	ldr	r2, [r3, #12]
 8005840:	4b4d      	ldr	r3, [pc, #308]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	f003 030f 	and.w	r3, r3, #15
 8005848:	429a      	cmp	r2, r3
 800584a:	d908      	bls.n	800585e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800584c:	4b4a      	ldr	r3, [pc, #296]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	f023 020f 	bic.w	r2, r3, #15
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	4947      	ldr	r1, [pc, #284]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 800585a:	4313      	orrs	r3, r2
 800585c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b00      	cmp	r3, #0
 8005868:	d055      	beq.n	8005916 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800586a:	4b43      	ldr	r3, [pc, #268]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	4940      	ldr	r1, [pc, #256]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 8005878:	4313      	orrs	r3, r2
 800587a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	2b02      	cmp	r3, #2
 8005882:	d107      	bne.n	8005894 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005884:	4b3c      	ldr	r3, [pc, #240]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d121      	bne.n	80058d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e0f6      	b.n	8005a82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	2b03      	cmp	r3, #3
 800589a:	d107      	bne.n	80058ac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800589c:	4b36      	ldr	r3, [pc, #216]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d115      	bne.n	80058d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e0ea      	b.n	8005a82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d107      	bne.n	80058c4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80058b4:	4b30      	ldr	r3, [pc, #192]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d109      	bne.n	80058d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e0de      	b.n	8005a82 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058c4:	4b2c      	ldr	r3, [pc, #176]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e0d6      	b.n	8005a82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058d4:	4b28      	ldr	r3, [pc, #160]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	f023 0207 	bic.w	r2, r3, #7
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	4925      	ldr	r1, [pc, #148]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058e6:	f7fb ffed 	bl	80018c4 <HAL_GetTick>
 80058ea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ec:	e00a      	b.n	8005904 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058ee:	f7fb ffe9 	bl	80018c4 <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d901      	bls.n	8005904 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e0be      	b.n	8005a82 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005904:	4b1c      	ldr	r3, [pc, #112]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	00db      	lsls	r3, r3, #3
 8005912:	429a      	cmp	r2, r3
 8005914:	d1eb      	bne.n	80058ee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d010      	beq.n	8005944 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68da      	ldr	r2, [r3, #12]
 8005926:	4b14      	ldr	r3, [pc, #80]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	f003 030f 	and.w	r3, r3, #15
 800592e:	429a      	cmp	r2, r3
 8005930:	d208      	bcs.n	8005944 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005932:	4b11      	ldr	r3, [pc, #68]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	f023 020f 	bic.w	r2, r3, #15
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	490e      	ldr	r1, [pc, #56]	@ (8005978 <HAL_RCC_ClockConfig+0x244>)
 8005940:	4313      	orrs	r3, r2
 8005942:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005944:	4b0b      	ldr	r3, [pc, #44]	@ (8005974 <HAL_RCC_ClockConfig+0x240>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 030f 	and.w	r3, r3, #15
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	429a      	cmp	r2, r3
 8005950:	d214      	bcs.n	800597c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005952:	4b08      	ldr	r3, [pc, #32]	@ (8005974 <HAL_RCC_ClockConfig+0x240>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f023 020f 	bic.w	r2, r3, #15
 800595a:	4906      	ldr	r1, [pc, #24]	@ (8005974 <HAL_RCC_ClockConfig+0x240>)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	4313      	orrs	r3, r2
 8005960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005962:	4b04      	ldr	r3, [pc, #16]	@ (8005974 <HAL_RCC_ClockConfig+0x240>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 030f 	and.w	r3, r3, #15
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	429a      	cmp	r2, r3
 800596e:	d005      	beq.n	800597c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e086      	b.n	8005a82 <HAL_RCC_ClockConfig+0x34e>
 8005974:	52002000 	.word	0x52002000
 8005978:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0304 	and.w	r3, r3, #4
 8005984:	2b00      	cmp	r3, #0
 8005986:	d010      	beq.n	80059aa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	4b3f      	ldr	r3, [pc, #252]	@ (8005a8c <HAL_RCC_ClockConfig+0x358>)
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005994:	429a      	cmp	r2, r3
 8005996:	d208      	bcs.n	80059aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005998:	4b3c      	ldr	r3, [pc, #240]	@ (8005a8c <HAL_RCC_ClockConfig+0x358>)
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	4939      	ldr	r1, [pc, #228]	@ (8005a8c <HAL_RCC_ClockConfig+0x358>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0308 	and.w	r3, r3, #8
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d010      	beq.n	80059d8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	695a      	ldr	r2, [r3, #20]
 80059ba:	4b34      	ldr	r3, [pc, #208]	@ (8005a8c <HAL_RCC_ClockConfig+0x358>)
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d208      	bcs.n	80059d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80059c6:	4b31      	ldr	r3, [pc, #196]	@ (8005a8c <HAL_RCC_ClockConfig+0x358>)
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	492e      	ldr	r1, [pc, #184]	@ (8005a8c <HAL_RCC_ClockConfig+0x358>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0310 	and.w	r3, r3, #16
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d010      	beq.n	8005a06 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	699a      	ldr	r2, [r3, #24]
 80059e8:	4b28      	ldr	r3, [pc, #160]	@ (8005a8c <HAL_RCC_ClockConfig+0x358>)
 80059ea:	69db      	ldr	r3, [r3, #28]
 80059ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d208      	bcs.n	8005a06 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80059f4:	4b25      	ldr	r3, [pc, #148]	@ (8005a8c <HAL_RCC_ClockConfig+0x358>)
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	4922      	ldr	r1, [pc, #136]	@ (8005a8c <HAL_RCC_ClockConfig+0x358>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0320 	and.w	r3, r3, #32
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d010      	beq.n	8005a34 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	69da      	ldr	r2, [r3, #28]
 8005a16:	4b1d      	ldr	r3, [pc, #116]	@ (8005a8c <HAL_RCC_ClockConfig+0x358>)
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d208      	bcs.n	8005a34 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005a22:	4b1a      	ldr	r3, [pc, #104]	@ (8005a8c <HAL_RCC_ClockConfig+0x358>)
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	4917      	ldr	r1, [pc, #92]	@ (8005a8c <HAL_RCC_ClockConfig+0x358>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a34:	f000 f834 	bl	8005aa0 <HAL_RCC_GetSysClockFreq>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	4b14      	ldr	r3, [pc, #80]	@ (8005a8c <HAL_RCC_ClockConfig+0x358>)
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	0a1b      	lsrs	r3, r3, #8
 8005a40:	f003 030f 	and.w	r3, r3, #15
 8005a44:	4912      	ldr	r1, [pc, #72]	@ (8005a90 <HAL_RCC_ClockConfig+0x35c>)
 8005a46:	5ccb      	ldrb	r3, [r1, r3]
 8005a48:	f003 031f 	and.w	r3, r3, #31
 8005a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a50:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a52:	4b0e      	ldr	r3, [pc, #56]	@ (8005a8c <HAL_RCC_ClockConfig+0x358>)
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	f003 030f 	and.w	r3, r3, #15
 8005a5a:	4a0d      	ldr	r2, [pc, #52]	@ (8005a90 <HAL_RCC_ClockConfig+0x35c>)
 8005a5c:	5cd3      	ldrb	r3, [r2, r3]
 8005a5e:	f003 031f 	and.w	r3, r3, #31
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	fa22 f303 	lsr.w	r3, r2, r3
 8005a68:	4a0a      	ldr	r2, [pc, #40]	@ (8005a94 <HAL_RCC_ClockConfig+0x360>)
 8005a6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a6c:	4a0a      	ldr	r2, [pc, #40]	@ (8005a98 <HAL_RCC_ClockConfig+0x364>)
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005a72:	4b0a      	ldr	r3, [pc, #40]	@ (8005a9c <HAL_RCC_ClockConfig+0x368>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7fb feda 	bl	8001830 <HAL_InitTick>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3718      	adds	r7, #24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	58024400 	.word	0x58024400
 8005a90:	080095a4 	.word	0x080095a4
 8005a94:	24000008 	.word	0x24000008
 8005a98:	24000004 	.word	0x24000004
 8005a9c:	2400000c 	.word	0x2400000c

08005aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b089      	sub	sp, #36	@ 0x24
 8005aa4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005aa6:	4bb3      	ldr	r3, [pc, #716]	@ (8005d74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005aae:	2b18      	cmp	r3, #24
 8005ab0:	f200 8155 	bhi.w	8005d5e <HAL_RCC_GetSysClockFreq+0x2be>
 8005ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8005abc <HAL_RCC_GetSysClockFreq+0x1c>)
 8005ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aba:	bf00      	nop
 8005abc:	08005b21 	.word	0x08005b21
 8005ac0:	08005d5f 	.word	0x08005d5f
 8005ac4:	08005d5f 	.word	0x08005d5f
 8005ac8:	08005d5f 	.word	0x08005d5f
 8005acc:	08005d5f 	.word	0x08005d5f
 8005ad0:	08005d5f 	.word	0x08005d5f
 8005ad4:	08005d5f 	.word	0x08005d5f
 8005ad8:	08005d5f 	.word	0x08005d5f
 8005adc:	08005b47 	.word	0x08005b47
 8005ae0:	08005d5f 	.word	0x08005d5f
 8005ae4:	08005d5f 	.word	0x08005d5f
 8005ae8:	08005d5f 	.word	0x08005d5f
 8005aec:	08005d5f 	.word	0x08005d5f
 8005af0:	08005d5f 	.word	0x08005d5f
 8005af4:	08005d5f 	.word	0x08005d5f
 8005af8:	08005d5f 	.word	0x08005d5f
 8005afc:	08005b4d 	.word	0x08005b4d
 8005b00:	08005d5f 	.word	0x08005d5f
 8005b04:	08005d5f 	.word	0x08005d5f
 8005b08:	08005d5f 	.word	0x08005d5f
 8005b0c:	08005d5f 	.word	0x08005d5f
 8005b10:	08005d5f 	.word	0x08005d5f
 8005b14:	08005d5f 	.word	0x08005d5f
 8005b18:	08005d5f 	.word	0x08005d5f
 8005b1c:	08005b53 	.word	0x08005b53
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b20:	4b94      	ldr	r3, [pc, #592]	@ (8005d74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0320 	and.w	r3, r3, #32
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d009      	beq.n	8005b40 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b2c:	4b91      	ldr	r3, [pc, #580]	@ (8005d74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	08db      	lsrs	r3, r3, #3
 8005b32:	f003 0303 	and.w	r3, r3, #3
 8005b36:	4a90      	ldr	r2, [pc, #576]	@ (8005d78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b38:	fa22 f303 	lsr.w	r3, r2, r3
 8005b3c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005b3e:	e111      	b.n	8005d64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005b40:	4b8d      	ldr	r3, [pc, #564]	@ (8005d78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b42:	61bb      	str	r3, [r7, #24]
      break;
 8005b44:	e10e      	b.n	8005d64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005b46:	4b8d      	ldr	r3, [pc, #564]	@ (8005d7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b48:	61bb      	str	r3, [r7, #24]
      break;
 8005b4a:	e10b      	b.n	8005d64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005b4c:	4b8c      	ldr	r3, [pc, #560]	@ (8005d80 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005b4e:	61bb      	str	r3, [r7, #24]
      break;
 8005b50:	e108      	b.n	8005d64 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b52:	4b88      	ldr	r3, [pc, #544]	@ (8005d74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b56:	f003 0303 	and.w	r3, r3, #3
 8005b5a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005b5c:	4b85      	ldr	r3, [pc, #532]	@ (8005d74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b60:	091b      	lsrs	r3, r3, #4
 8005b62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b66:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005b68:	4b82      	ldr	r3, [pc, #520]	@ (8005d74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005b72:	4b80      	ldr	r3, [pc, #512]	@ (8005d74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b76:	08db      	lsrs	r3, r3, #3
 8005b78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	fb02 f303 	mul.w	r3, r2, r3
 8005b82:	ee07 3a90 	vmov	s15, r3
 8005b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b8a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f000 80e1 	beq.w	8005d58 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	f000 8083 	beq.w	8005ca4 <HAL_RCC_GetSysClockFreq+0x204>
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	f200 80a1 	bhi.w	8005ce8 <HAL_RCC_GetSysClockFreq+0x248>
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <HAL_RCC_GetSysClockFreq+0x114>
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d056      	beq.n	8005c60 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005bb2:	e099      	b.n	8005ce8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bb4:	4b6f      	ldr	r3, [pc, #444]	@ (8005d74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0320 	and.w	r3, r3, #32
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d02d      	beq.n	8005c1c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005bc0:	4b6c      	ldr	r3, [pc, #432]	@ (8005d74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	08db      	lsrs	r3, r3, #3
 8005bc6:	f003 0303 	and.w	r3, r3, #3
 8005bca:	4a6b      	ldr	r2, [pc, #428]	@ (8005d78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8005bd0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	ee07 3a90 	vmov	s15, r3
 8005bd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	ee07 3a90 	vmov	s15, r3
 8005be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bea:	4b62      	ldr	r3, [pc, #392]	@ (8005d74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bf2:	ee07 3a90 	vmov	s15, r3
 8005bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bfe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005d84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c16:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005c1a:	e087      	b.n	8005d2c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	ee07 3a90 	vmov	s15, r3
 8005c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c26:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005d88 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c2e:	4b51      	ldr	r3, [pc, #324]	@ (8005d74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c36:	ee07 3a90 	vmov	s15, r3
 8005c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c42:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005d84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c5e:	e065      	b.n	8005d2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	ee07 3a90 	vmov	s15, r3
 8005c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c6a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005d8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c72:	4b40      	ldr	r3, [pc, #256]	@ (8005d74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c7a:	ee07 3a90 	vmov	s15, r3
 8005c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c82:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c86:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005d84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ca2:	e043      	b.n	8005d2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	ee07 3a90 	vmov	s15, r3
 8005caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cae:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005d90 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cb6:	4b2f      	ldr	r3, [pc, #188]	@ (8005d74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cbe:	ee07 3a90 	vmov	s15, r3
 8005cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cca:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005d84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ce2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ce6:	e021      	b.n	8005d2c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	ee07 3a90 	vmov	s15, r3
 8005cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005d8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8005d74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d02:	ee07 3a90 	vmov	s15, r3
 8005d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d0e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005d84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d2a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005d2c:	4b11      	ldr	r3, [pc, #68]	@ (8005d74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d30:	0a5b      	lsrs	r3, r3, #9
 8005d32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d36:	3301      	adds	r3, #1
 8005d38:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	ee07 3a90 	vmov	s15, r3
 8005d40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d44:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d50:	ee17 3a90 	vmov	r3, s15
 8005d54:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005d56:	e005      	b.n	8005d64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	61bb      	str	r3, [r7, #24]
      break;
 8005d5c:	e002      	b.n	8005d64 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005d5e:	4b07      	ldr	r3, [pc, #28]	@ (8005d7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d60:	61bb      	str	r3, [r7, #24]
      break;
 8005d62:	bf00      	nop
  }

  return sysclockfreq;
 8005d64:	69bb      	ldr	r3, [r7, #24]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3724      	adds	r7, #36	@ 0x24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	58024400 	.word	0x58024400
 8005d78:	03d09000 	.word	0x03d09000
 8005d7c:	003d0900 	.word	0x003d0900
 8005d80:	007a1200 	.word	0x007a1200
 8005d84:	46000000 	.word	0x46000000
 8005d88:	4c742400 	.word	0x4c742400
 8005d8c:	4a742400 	.word	0x4a742400
 8005d90:	4af42400 	.word	0x4af42400

08005d94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005d9a:	f7ff fe81 	bl	8005aa0 <HAL_RCC_GetSysClockFreq>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	4b10      	ldr	r3, [pc, #64]	@ (8005de4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	0a1b      	lsrs	r3, r3, #8
 8005da6:	f003 030f 	and.w	r3, r3, #15
 8005daa:	490f      	ldr	r1, [pc, #60]	@ (8005de8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005dac:	5ccb      	ldrb	r3, [r1, r3]
 8005dae:	f003 031f 	and.w	r3, r3, #31
 8005db2:	fa22 f303 	lsr.w	r3, r2, r3
 8005db6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005db8:	4b0a      	ldr	r3, [pc, #40]	@ (8005de4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	f003 030f 	and.w	r3, r3, #15
 8005dc0:	4a09      	ldr	r2, [pc, #36]	@ (8005de8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005dc2:	5cd3      	ldrb	r3, [r2, r3]
 8005dc4:	f003 031f 	and.w	r3, r3, #31
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	fa22 f303 	lsr.w	r3, r2, r3
 8005dce:	4a07      	ldr	r2, [pc, #28]	@ (8005dec <HAL_RCC_GetHCLKFreq+0x58>)
 8005dd0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005dd2:	4a07      	ldr	r2, [pc, #28]	@ (8005df0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005dd8:	4b04      	ldr	r3, [pc, #16]	@ (8005dec <HAL_RCC_GetHCLKFreq+0x58>)
 8005dda:	681b      	ldr	r3, [r3, #0]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3708      	adds	r7, #8
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	58024400 	.word	0x58024400
 8005de8:	080095a4 	.word	0x080095a4
 8005dec:	24000008 	.word	0x24000008
 8005df0:	24000004 	.word	0x24000004

08005df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005df8:	f7ff ffcc 	bl	8005d94 <HAL_RCC_GetHCLKFreq>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	4b06      	ldr	r3, [pc, #24]	@ (8005e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e00:	69db      	ldr	r3, [r3, #28]
 8005e02:	091b      	lsrs	r3, r3, #4
 8005e04:	f003 0307 	and.w	r3, r3, #7
 8005e08:	4904      	ldr	r1, [pc, #16]	@ (8005e1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e0a:	5ccb      	ldrb	r3, [r1, r3]
 8005e0c:	f003 031f 	and.w	r3, r3, #31
 8005e10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	58024400 	.word	0x58024400
 8005e1c:	080095a4 	.word	0x080095a4

08005e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005e24:	f7ff ffb6 	bl	8005d94 <HAL_RCC_GetHCLKFreq>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	4b06      	ldr	r3, [pc, #24]	@ (8005e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	0a1b      	lsrs	r3, r3, #8
 8005e30:	f003 0307 	and.w	r3, r3, #7
 8005e34:	4904      	ldr	r1, [pc, #16]	@ (8005e48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e36:	5ccb      	ldrb	r3, [r1, r3]
 8005e38:	f003 031f 	and.w	r3, r3, #31
 8005e3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	58024400 	.word	0x58024400
 8005e48:	080095a4 	.word	0x080095a4

08005e4c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e50:	b0c6      	sub	sp, #280	@ 0x118
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e58:	2300      	movs	r3, #0
 8005e5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e5e:	2300      	movs	r3, #0
 8005e60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005e70:	2500      	movs	r5, #0
 8005e72:	ea54 0305 	orrs.w	r3, r4, r5
 8005e76:	d049      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005e82:	d02f      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005e84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005e88:	d828      	bhi.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005e8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e8e:	d01a      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005e90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e94:	d822      	bhi.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005e9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e9e:	d007      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ea0:	e01c      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ea2:	4bab      	ldr	r3, [pc, #684]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea6:	4aaa      	ldr	r2, [pc, #680]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ea8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005eac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005eae:	e01a      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eb4:	3308      	adds	r3, #8
 8005eb6:	2102      	movs	r1, #2
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f001 fc25 	bl	8007708 <RCCEx_PLL2_Config>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ec4:	e00f      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eca:	3328      	adds	r3, #40	@ 0x28
 8005ecc:	2102      	movs	r1, #2
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f001 fccc 	bl	800786c <RCCEx_PLL3_Config>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005eda:	e004      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005ee2:	e000      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005ee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ee6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10a      	bne.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005eee:	4b98      	ldr	r3, [pc, #608]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ef0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ef2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005efa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005efc:	4a94      	ldr	r2, [pc, #592]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005efe:	430b      	orrs	r3, r1
 8005f00:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f02:	e003      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f14:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005f18:	f04f 0900 	mov.w	r9, #0
 8005f1c:	ea58 0309 	orrs.w	r3, r8, r9
 8005f20:	d047      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f28:	2b04      	cmp	r3, #4
 8005f2a:	d82a      	bhi.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8005f34 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f32:	bf00      	nop
 8005f34:	08005f49 	.word	0x08005f49
 8005f38:	08005f57 	.word	0x08005f57
 8005f3c:	08005f6d 	.word	0x08005f6d
 8005f40:	08005f8b 	.word	0x08005f8b
 8005f44:	08005f8b 	.word	0x08005f8b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f48:	4b81      	ldr	r3, [pc, #516]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f4c:	4a80      	ldr	r2, [pc, #512]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f54:	e01a      	b.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f5a:	3308      	adds	r3, #8
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f001 fbd2 	bl	8007708 <RCCEx_PLL2_Config>
 8005f64:	4603      	mov	r3, r0
 8005f66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f6a:	e00f      	b.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f70:	3328      	adds	r3, #40	@ 0x28
 8005f72:	2100      	movs	r1, #0
 8005f74:	4618      	mov	r0, r3
 8005f76:	f001 fc79 	bl	800786c <RCCEx_PLL3_Config>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f80:	e004      	b.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f88:	e000      	b.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005f8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10a      	bne.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f94:	4b6e      	ldr	r3, [pc, #440]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f98:	f023 0107 	bic.w	r1, r3, #7
 8005f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fa2:	4a6b      	ldr	r2, [pc, #428]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005fa4:	430b      	orrs	r3, r1
 8005fa6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005fa8:	e003      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005faa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fba:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005fbe:	f04f 0b00 	mov.w	fp, #0
 8005fc2:	ea5a 030b 	orrs.w	r3, sl, fp
 8005fc6:	d05b      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fcc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005fd0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005fd4:	d03b      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005fd6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005fda:	d834      	bhi.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005fdc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005fe0:	d037      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005fe2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005fe6:	d82e      	bhi.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005fe8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005fec:	d033      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005fee:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005ff2:	d828      	bhi.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005ff4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ff8:	d01a      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005ffa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ffe:	d822      	bhi.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006000:	2b00      	cmp	r3, #0
 8006002:	d003      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006004:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006008:	d007      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800600a:	e01c      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800600c:	4b50      	ldr	r3, [pc, #320]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800600e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006010:	4a4f      	ldr	r2, [pc, #316]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006012:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006016:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006018:	e01e      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800601a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800601e:	3308      	adds	r3, #8
 8006020:	2100      	movs	r1, #0
 8006022:	4618      	mov	r0, r3
 8006024:	f001 fb70 	bl	8007708 <RCCEx_PLL2_Config>
 8006028:	4603      	mov	r3, r0
 800602a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800602e:	e013      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006034:	3328      	adds	r3, #40	@ 0x28
 8006036:	2100      	movs	r1, #0
 8006038:	4618      	mov	r0, r3
 800603a:	f001 fc17 	bl	800786c <RCCEx_PLL3_Config>
 800603e:	4603      	mov	r3, r0
 8006040:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006044:	e008      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800604c:	e004      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800604e:	bf00      	nop
 8006050:	e002      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006052:	bf00      	nop
 8006054:	e000      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006056:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006058:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10b      	bne.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006060:	4b3b      	ldr	r3, [pc, #236]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006064:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800606c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006070:	4a37      	ldr	r2, [pc, #220]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006072:	430b      	orrs	r3, r1
 8006074:	6593      	str	r3, [r2, #88]	@ 0x58
 8006076:	e003      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006078:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800607c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006088:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800608c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006090:	2300      	movs	r3, #0
 8006092:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006096:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800609a:	460b      	mov	r3, r1
 800609c:	4313      	orrs	r3, r2
 800609e:	d05d      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80060a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80060a8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80060ac:	d03b      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80060ae:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80060b2:	d834      	bhi.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80060b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80060b8:	d037      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80060ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80060be:	d82e      	bhi.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80060c0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80060c4:	d033      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80060c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80060ca:	d828      	bhi.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80060cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060d0:	d01a      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80060d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060d6:	d822      	bhi.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d003      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80060dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060e0:	d007      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80060e2:	e01c      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060e4:	4b1a      	ldr	r3, [pc, #104]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e8:	4a19      	ldr	r2, [pc, #100]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060f0:	e01e      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060f6:	3308      	adds	r3, #8
 80060f8:	2100      	movs	r1, #0
 80060fa:	4618      	mov	r0, r3
 80060fc:	f001 fb04 	bl	8007708 <RCCEx_PLL2_Config>
 8006100:	4603      	mov	r3, r0
 8006102:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006106:	e013      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800610c:	3328      	adds	r3, #40	@ 0x28
 800610e:	2100      	movs	r1, #0
 8006110:	4618      	mov	r0, r3
 8006112:	f001 fbab 	bl	800786c <RCCEx_PLL3_Config>
 8006116:	4603      	mov	r3, r0
 8006118:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800611c:	e008      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006124:	e004      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006126:	bf00      	nop
 8006128:	e002      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800612a:	bf00      	nop
 800612c:	e000      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800612e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006130:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10d      	bne.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006138:	4b05      	ldr	r3, [pc, #20]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800613a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800613c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006144:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006148:	4a01      	ldr	r2, [pc, #4]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800614a:	430b      	orrs	r3, r1
 800614c:	6593      	str	r3, [r2, #88]	@ 0x58
 800614e:	e005      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006150:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006154:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006158:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800615c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006164:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006168:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800616c:	2300      	movs	r3, #0
 800616e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006172:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006176:	460b      	mov	r3, r1
 8006178:	4313      	orrs	r3, r2
 800617a:	d03a      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800617c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006182:	2b30      	cmp	r3, #48	@ 0x30
 8006184:	d01f      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006186:	2b30      	cmp	r3, #48	@ 0x30
 8006188:	d819      	bhi.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x372>
 800618a:	2b20      	cmp	r3, #32
 800618c:	d00c      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800618e:	2b20      	cmp	r3, #32
 8006190:	d815      	bhi.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006192:	2b00      	cmp	r3, #0
 8006194:	d019      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006196:	2b10      	cmp	r3, #16
 8006198:	d111      	bne.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800619a:	4baa      	ldr	r3, [pc, #680]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800619c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619e:	4aa9      	ldr	r2, [pc, #676]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80061a6:	e011      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ac:	3308      	adds	r3, #8
 80061ae:	2102      	movs	r1, #2
 80061b0:	4618      	mov	r0, r3
 80061b2:	f001 faa9 	bl	8007708 <RCCEx_PLL2_Config>
 80061b6:	4603      	mov	r3, r0
 80061b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80061bc:	e006      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80061c4:	e002      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80061c6:	bf00      	nop
 80061c8:	e000      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80061ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10a      	bne.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80061d4:	4b9b      	ldr	r3, [pc, #620]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061d8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80061dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061e2:	4a98      	ldr	r2, [pc, #608]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061e4:	430b      	orrs	r3, r1
 80061e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061e8:	e003      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80061f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80061fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006202:	2300      	movs	r3, #0
 8006204:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006208:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800620c:	460b      	mov	r3, r1
 800620e:	4313      	orrs	r3, r2
 8006210:	d051      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006218:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800621c:	d035      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800621e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006222:	d82e      	bhi.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006224:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006228:	d031      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x442>
 800622a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800622e:	d828      	bhi.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006230:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006234:	d01a      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006236:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800623a:	d822      	bhi.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800623c:	2b00      	cmp	r3, #0
 800623e:	d003      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006240:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006244:	d007      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006246:	e01c      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006248:	4b7e      	ldr	r3, [pc, #504]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800624a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800624c:	4a7d      	ldr	r2, [pc, #500]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800624e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006252:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006254:	e01c      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800625a:	3308      	adds	r3, #8
 800625c:	2100      	movs	r1, #0
 800625e:	4618      	mov	r0, r3
 8006260:	f001 fa52 	bl	8007708 <RCCEx_PLL2_Config>
 8006264:	4603      	mov	r3, r0
 8006266:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800626a:	e011      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800626c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006270:	3328      	adds	r3, #40	@ 0x28
 8006272:	2100      	movs	r1, #0
 8006274:	4618      	mov	r0, r3
 8006276:	f001 faf9 	bl	800786c <RCCEx_PLL3_Config>
 800627a:	4603      	mov	r3, r0
 800627c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006280:	e006      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006288:	e002      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800628a:	bf00      	nop
 800628c:	e000      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800628e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006290:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006294:	2b00      	cmp	r3, #0
 8006296:	d10a      	bne.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006298:	4b6a      	ldr	r3, [pc, #424]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800629a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800629c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80062a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062a6:	4a67      	ldr	r2, [pc, #412]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062a8:	430b      	orrs	r3, r1
 80062aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80062ac:	e003      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80062b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062be:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80062c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80062c6:	2300      	movs	r3, #0
 80062c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80062cc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80062d0:	460b      	mov	r3, r1
 80062d2:	4313      	orrs	r3, r2
 80062d4:	d053      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80062d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062e0:	d033      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80062e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062e6:	d82c      	bhi.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80062e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80062ec:	d02f      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x502>
 80062ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80062f2:	d826      	bhi.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80062f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80062f8:	d02b      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80062fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80062fe:	d820      	bhi.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006300:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006304:	d012      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006306:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800630a:	d81a      	bhi.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800630c:	2b00      	cmp	r3, #0
 800630e:	d022      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006314:	d115      	bne.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800631a:	3308      	adds	r3, #8
 800631c:	2101      	movs	r1, #1
 800631e:	4618      	mov	r0, r3
 8006320:	f001 f9f2 	bl	8007708 <RCCEx_PLL2_Config>
 8006324:	4603      	mov	r3, r0
 8006326:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800632a:	e015      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800632c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006330:	3328      	adds	r3, #40	@ 0x28
 8006332:	2101      	movs	r1, #1
 8006334:	4618      	mov	r0, r3
 8006336:	f001 fa99 	bl	800786c <RCCEx_PLL3_Config>
 800633a:	4603      	mov	r3, r0
 800633c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006340:	e00a      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006348:	e006      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800634a:	bf00      	nop
 800634c:	e004      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800634e:	bf00      	nop
 8006350:	e002      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006352:	bf00      	nop
 8006354:	e000      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006356:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006358:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10a      	bne.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006360:	4b38      	ldr	r3, [pc, #224]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006364:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800636c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800636e:	4a35      	ldr	r2, [pc, #212]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006370:	430b      	orrs	r3, r1
 8006372:	6513      	str	r3, [r2, #80]	@ 0x50
 8006374:	e003      	b.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006376:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800637a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800637e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006386:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800638a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800638e:	2300      	movs	r3, #0
 8006390:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006394:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006398:	460b      	mov	r3, r1
 800639a:	4313      	orrs	r3, r2
 800639c:	d058      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800639e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80063a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80063aa:	d033      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80063ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80063b0:	d82c      	bhi.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80063b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063b6:	d02f      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80063b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063bc:	d826      	bhi.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80063be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80063c2:	d02b      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80063c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80063c8:	d820      	bhi.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80063ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063ce:	d012      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80063d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063d4:	d81a      	bhi.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d022      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80063da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063de:	d115      	bne.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e4:	3308      	adds	r3, #8
 80063e6:	2101      	movs	r1, #1
 80063e8:	4618      	mov	r0, r3
 80063ea:	f001 f98d 	bl	8007708 <RCCEx_PLL2_Config>
 80063ee:	4603      	mov	r3, r0
 80063f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80063f4:	e015      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063fa:	3328      	adds	r3, #40	@ 0x28
 80063fc:	2101      	movs	r1, #1
 80063fe:	4618      	mov	r0, r3
 8006400:	f001 fa34 	bl	800786c <RCCEx_PLL3_Config>
 8006404:	4603      	mov	r3, r0
 8006406:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800640a:	e00a      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006412:	e006      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006414:	bf00      	nop
 8006416:	e004      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006418:	bf00      	nop
 800641a:	e002      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800641c:	bf00      	nop
 800641e:	e000      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006422:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10e      	bne.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800642a:	4b06      	ldr	r3, [pc, #24]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800642c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800642e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006436:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800643a:	4a02      	ldr	r2, [pc, #8]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800643c:	430b      	orrs	r3, r1
 800643e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006440:	e006      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006442:	bf00      	nop
 8006444:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006448:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800644c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006458:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800645c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006460:	2300      	movs	r3, #0
 8006462:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006466:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800646a:	460b      	mov	r3, r1
 800646c:	4313      	orrs	r3, r2
 800646e:	d037      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006474:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006476:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800647a:	d00e      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800647c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006480:	d816      	bhi.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006482:	2b00      	cmp	r3, #0
 8006484:	d018      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006486:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800648a:	d111      	bne.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800648c:	4bc4      	ldr	r3, [pc, #784]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800648e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006490:	4ac3      	ldr	r2, [pc, #780]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006492:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006496:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006498:	e00f      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800649a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800649e:	3308      	adds	r3, #8
 80064a0:	2101      	movs	r1, #1
 80064a2:	4618      	mov	r0, r3
 80064a4:	f001 f930 	bl	8007708 <RCCEx_PLL2_Config>
 80064a8:	4603      	mov	r3, r0
 80064aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80064ae:	e004      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064b6:	e000      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80064b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d10a      	bne.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80064c2:	4bb7      	ldr	r3, [pc, #732]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064c6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80064ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064d0:	4ab3      	ldr	r2, [pc, #716]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064d2:	430b      	orrs	r3, r1
 80064d4:	6513      	str	r3, [r2, #80]	@ 0x50
 80064d6:	e003      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80064e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80064ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064f0:	2300      	movs	r3, #0
 80064f2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80064f6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80064fa:	460b      	mov	r3, r1
 80064fc:	4313      	orrs	r3, r2
 80064fe:	d039      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006506:	2b03      	cmp	r3, #3
 8006508:	d81c      	bhi.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800650a:	a201      	add	r2, pc, #4	@ (adr r2, 8006510 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800650c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006510:	0800654d 	.word	0x0800654d
 8006514:	08006521 	.word	0x08006521
 8006518:	0800652f 	.word	0x0800652f
 800651c:	0800654d 	.word	0x0800654d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006520:	4b9f      	ldr	r3, [pc, #636]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006524:	4a9e      	ldr	r2, [pc, #632]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006526:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800652a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800652c:	e00f      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800652e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006532:	3308      	adds	r3, #8
 8006534:	2102      	movs	r1, #2
 8006536:	4618      	mov	r0, r3
 8006538:	f001 f8e6 	bl	8007708 <RCCEx_PLL2_Config>
 800653c:	4603      	mov	r3, r0
 800653e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006542:	e004      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800654a:	e000      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800654c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800654e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10a      	bne.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006556:	4b92      	ldr	r3, [pc, #584]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800655a:	f023 0103 	bic.w	r1, r3, #3
 800655e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006562:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006564:	4a8e      	ldr	r2, [pc, #568]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006566:	430b      	orrs	r3, r1
 8006568:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800656a:	e003      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800656c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006570:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006580:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006584:	2300      	movs	r3, #0
 8006586:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800658a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800658e:	460b      	mov	r3, r1
 8006590:	4313      	orrs	r3, r2
 8006592:	f000 8099 	beq.w	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006596:	4b83      	ldr	r3, [pc, #524]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a82      	ldr	r2, [pc, #520]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800659c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065a2:	f7fb f98f 	bl	80018c4 <HAL_GetTick>
 80065a6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065aa:	e00b      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065ac:	f7fb f98a 	bl	80018c4 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	2b64      	cmp	r3, #100	@ 0x64
 80065ba:	d903      	bls.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80065c2:	e005      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065c4:	4b77      	ldr	r3, [pc, #476]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d0ed      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80065d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d173      	bne.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80065d8:	4b71      	ldr	r3, [pc, #452]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80065dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80065e4:	4053      	eors	r3, r2
 80065e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d015      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065ee:	4b6c      	ldr	r3, [pc, #432]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065f6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80065fa:	4b69      	ldr	r3, [pc, #420]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065fe:	4a68      	ldr	r2, [pc, #416]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006604:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006606:	4b66      	ldr	r3, [pc, #408]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800660a:	4a65      	ldr	r2, [pc, #404]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800660c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006610:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006612:	4a63      	ldr	r2, [pc, #396]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006614:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006618:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800661a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800661e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006622:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006626:	d118      	bne.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006628:	f7fb f94c 	bl	80018c4 <HAL_GetTick>
 800662c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006630:	e00d      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006632:	f7fb f947 	bl	80018c4 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800663c:	1ad2      	subs	r2, r2, r3
 800663e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006642:	429a      	cmp	r2, r3
 8006644:	d903      	bls.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800664c:	e005      	b.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800664e:	4b54      	ldr	r3, [pc, #336]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006652:	f003 0302 	and.w	r3, r3, #2
 8006656:	2b00      	cmp	r3, #0
 8006658:	d0eb      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800665a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800665e:	2b00      	cmp	r3, #0
 8006660:	d129      	bne.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006666:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800666a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800666e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006672:	d10e      	bne.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006674:	4b4a      	ldr	r3, [pc, #296]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800667c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006680:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006684:	091a      	lsrs	r2, r3, #4
 8006686:	4b48      	ldr	r3, [pc, #288]	@ (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006688:	4013      	ands	r3, r2
 800668a:	4a45      	ldr	r2, [pc, #276]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800668c:	430b      	orrs	r3, r1
 800668e:	6113      	str	r3, [r2, #16]
 8006690:	e005      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006692:	4b43      	ldr	r3, [pc, #268]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	4a42      	ldr	r2, [pc, #264]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006698:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800669c:	6113      	str	r3, [r2, #16]
 800669e:	4b40      	ldr	r3, [pc, #256]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066a0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80066a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80066aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066ae:	4a3c      	ldr	r2, [pc, #240]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066b0:	430b      	orrs	r3, r1
 80066b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80066b4:	e008      	b.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80066b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80066be:	e003      	b.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80066c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d0:	f002 0301 	and.w	r3, r2, #1
 80066d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80066d8:	2300      	movs	r3, #0
 80066da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80066de:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80066e2:	460b      	mov	r3, r1
 80066e4:	4313      	orrs	r3, r2
 80066e6:	f000 808f 	beq.w	8006808 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80066ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066f0:	2b28      	cmp	r3, #40	@ 0x28
 80066f2:	d871      	bhi.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80066f4:	a201      	add	r2, pc, #4	@ (adr r2, 80066fc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80066f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fa:	bf00      	nop
 80066fc:	080067e1 	.word	0x080067e1
 8006700:	080067d9 	.word	0x080067d9
 8006704:	080067d9 	.word	0x080067d9
 8006708:	080067d9 	.word	0x080067d9
 800670c:	080067d9 	.word	0x080067d9
 8006710:	080067d9 	.word	0x080067d9
 8006714:	080067d9 	.word	0x080067d9
 8006718:	080067d9 	.word	0x080067d9
 800671c:	080067ad 	.word	0x080067ad
 8006720:	080067d9 	.word	0x080067d9
 8006724:	080067d9 	.word	0x080067d9
 8006728:	080067d9 	.word	0x080067d9
 800672c:	080067d9 	.word	0x080067d9
 8006730:	080067d9 	.word	0x080067d9
 8006734:	080067d9 	.word	0x080067d9
 8006738:	080067d9 	.word	0x080067d9
 800673c:	080067c3 	.word	0x080067c3
 8006740:	080067d9 	.word	0x080067d9
 8006744:	080067d9 	.word	0x080067d9
 8006748:	080067d9 	.word	0x080067d9
 800674c:	080067d9 	.word	0x080067d9
 8006750:	080067d9 	.word	0x080067d9
 8006754:	080067d9 	.word	0x080067d9
 8006758:	080067d9 	.word	0x080067d9
 800675c:	080067e1 	.word	0x080067e1
 8006760:	080067d9 	.word	0x080067d9
 8006764:	080067d9 	.word	0x080067d9
 8006768:	080067d9 	.word	0x080067d9
 800676c:	080067d9 	.word	0x080067d9
 8006770:	080067d9 	.word	0x080067d9
 8006774:	080067d9 	.word	0x080067d9
 8006778:	080067d9 	.word	0x080067d9
 800677c:	080067e1 	.word	0x080067e1
 8006780:	080067d9 	.word	0x080067d9
 8006784:	080067d9 	.word	0x080067d9
 8006788:	080067d9 	.word	0x080067d9
 800678c:	080067d9 	.word	0x080067d9
 8006790:	080067d9 	.word	0x080067d9
 8006794:	080067d9 	.word	0x080067d9
 8006798:	080067d9 	.word	0x080067d9
 800679c:	080067e1 	.word	0x080067e1
 80067a0:	58024400 	.word	0x58024400
 80067a4:	58024800 	.word	0x58024800
 80067a8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b0:	3308      	adds	r3, #8
 80067b2:	2101      	movs	r1, #1
 80067b4:	4618      	mov	r0, r3
 80067b6:	f000 ffa7 	bl	8007708 <RCCEx_PLL2_Config>
 80067ba:	4603      	mov	r3, r0
 80067bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80067c0:	e00f      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067c6:	3328      	adds	r3, #40	@ 0x28
 80067c8:	2101      	movs	r1, #1
 80067ca:	4618      	mov	r0, r3
 80067cc:	f001 f84e 	bl	800786c <RCCEx_PLL3_Config>
 80067d0:	4603      	mov	r3, r0
 80067d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80067d6:	e004      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80067de:	e000      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80067e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10a      	bne.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80067ea:	4bbf      	ldr	r3, [pc, #764]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80067ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ee:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80067f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067f8:	4abb      	ldr	r2, [pc, #748]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80067fa:	430b      	orrs	r3, r1
 80067fc:	6553      	str	r3, [r2, #84]	@ 0x54
 80067fe:	e003      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006800:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006804:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800680c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006810:	f002 0302 	and.w	r3, r2, #2
 8006814:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006818:	2300      	movs	r3, #0
 800681a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800681e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006822:	460b      	mov	r3, r1
 8006824:	4313      	orrs	r3, r2
 8006826:	d041      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800682c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800682e:	2b05      	cmp	r3, #5
 8006830:	d824      	bhi.n	800687c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006832:	a201      	add	r2, pc, #4	@ (adr r2, 8006838 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006838:	08006885 	.word	0x08006885
 800683c:	08006851 	.word	0x08006851
 8006840:	08006867 	.word	0x08006867
 8006844:	08006885 	.word	0x08006885
 8006848:	08006885 	.word	0x08006885
 800684c:	08006885 	.word	0x08006885
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006854:	3308      	adds	r3, #8
 8006856:	2101      	movs	r1, #1
 8006858:	4618      	mov	r0, r3
 800685a:	f000 ff55 	bl	8007708 <RCCEx_PLL2_Config>
 800685e:	4603      	mov	r3, r0
 8006860:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006864:	e00f      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800686a:	3328      	adds	r3, #40	@ 0x28
 800686c:	2101      	movs	r1, #1
 800686e:	4618      	mov	r0, r3
 8006870:	f000 fffc 	bl	800786c <RCCEx_PLL3_Config>
 8006874:	4603      	mov	r3, r0
 8006876:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800687a:	e004      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006882:	e000      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006884:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006886:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10a      	bne.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800688e:	4b96      	ldr	r3, [pc, #600]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006892:	f023 0107 	bic.w	r1, r3, #7
 8006896:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800689a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800689c:	4a92      	ldr	r2, [pc, #584]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800689e:	430b      	orrs	r3, r1
 80068a0:	6553      	str	r3, [r2, #84]	@ 0x54
 80068a2:	e003      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b4:	f002 0304 	and.w	r3, r2, #4
 80068b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80068bc:	2300      	movs	r3, #0
 80068be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80068c2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80068c6:	460b      	mov	r3, r1
 80068c8:	4313      	orrs	r3, r2
 80068ca:	d044      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80068cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068d4:	2b05      	cmp	r3, #5
 80068d6:	d825      	bhi.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80068d8:	a201      	add	r2, pc, #4	@ (adr r2, 80068e0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80068da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068de:	bf00      	nop
 80068e0:	0800692d 	.word	0x0800692d
 80068e4:	080068f9 	.word	0x080068f9
 80068e8:	0800690f 	.word	0x0800690f
 80068ec:	0800692d 	.word	0x0800692d
 80068f0:	0800692d 	.word	0x0800692d
 80068f4:	0800692d 	.word	0x0800692d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068fc:	3308      	adds	r3, #8
 80068fe:	2101      	movs	r1, #1
 8006900:	4618      	mov	r0, r3
 8006902:	f000 ff01 	bl	8007708 <RCCEx_PLL2_Config>
 8006906:	4603      	mov	r3, r0
 8006908:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800690c:	e00f      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800690e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006912:	3328      	adds	r3, #40	@ 0x28
 8006914:	2101      	movs	r1, #1
 8006916:	4618      	mov	r0, r3
 8006918:	f000 ffa8 	bl	800786c <RCCEx_PLL3_Config>
 800691c:	4603      	mov	r3, r0
 800691e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006922:	e004      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800692a:	e000      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800692c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800692e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10b      	bne.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006936:	4b6c      	ldr	r3, [pc, #432]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800693a:	f023 0107 	bic.w	r1, r3, #7
 800693e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006946:	4a68      	ldr	r2, [pc, #416]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006948:	430b      	orrs	r3, r1
 800694a:	6593      	str	r3, [r2, #88]	@ 0x58
 800694c:	e003      	b.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800694e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006952:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800695a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695e:	f002 0320 	and.w	r3, r2, #32
 8006962:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006966:	2300      	movs	r3, #0
 8006968:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800696c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006970:	460b      	mov	r3, r1
 8006972:	4313      	orrs	r3, r2
 8006974:	d055      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800697a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800697e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006982:	d033      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006984:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006988:	d82c      	bhi.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800698a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800698e:	d02f      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006990:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006994:	d826      	bhi.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006996:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800699a:	d02b      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800699c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80069a0:	d820      	bhi.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80069a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069a6:	d012      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80069a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069ac:	d81a      	bhi.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d022      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80069b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069b6:	d115      	bne.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069bc:	3308      	adds	r3, #8
 80069be:	2100      	movs	r1, #0
 80069c0:	4618      	mov	r0, r3
 80069c2:	f000 fea1 	bl	8007708 <RCCEx_PLL2_Config>
 80069c6:	4603      	mov	r3, r0
 80069c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80069cc:	e015      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d2:	3328      	adds	r3, #40	@ 0x28
 80069d4:	2102      	movs	r1, #2
 80069d6:	4618      	mov	r0, r3
 80069d8:	f000 ff48 	bl	800786c <RCCEx_PLL3_Config>
 80069dc:	4603      	mov	r3, r0
 80069de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80069e2:	e00a      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80069ea:	e006      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80069ec:	bf00      	nop
 80069ee:	e004      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80069f0:	bf00      	nop
 80069f2:	e002      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80069f4:	bf00      	nop
 80069f6:	e000      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80069f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10b      	bne.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a02:	4b39      	ldr	r3, [pc, #228]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a06:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a12:	4a35      	ldr	r2, [pc, #212]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a14:	430b      	orrs	r3, r1
 8006a16:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a18:	e003      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a1e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006a2e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006a32:	2300      	movs	r3, #0
 8006a34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a38:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	d058      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a4a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006a4e:	d033      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006a50:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006a54:	d82c      	bhi.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006a56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a5a:	d02f      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006a5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a60:	d826      	bhi.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006a62:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a66:	d02b      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006a68:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a6c:	d820      	bhi.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006a6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a72:	d012      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006a74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a78:	d81a      	bhi.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d022      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006a7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a82:	d115      	bne.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a88:	3308      	adds	r3, #8
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f000 fe3b 	bl	8007708 <RCCEx_PLL2_Config>
 8006a92:	4603      	mov	r3, r0
 8006a94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006a98:	e015      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a9e:	3328      	adds	r3, #40	@ 0x28
 8006aa0:	2102      	movs	r1, #2
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 fee2 	bl	800786c <RCCEx_PLL3_Config>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006aae:	e00a      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ab6:	e006      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006ab8:	bf00      	nop
 8006aba:	e004      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006abc:	bf00      	nop
 8006abe:	e002      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006ac0:	bf00      	nop
 8006ac2:	e000      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006ac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ac6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d10e      	bne.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006ace:	4b06      	ldr	r3, [pc, #24]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ad2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ada:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ade:	4a02      	ldr	r2, [pc, #8]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006ae0:	430b      	orrs	r3, r1
 8006ae2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ae4:	e006      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006ae6:	bf00      	nop
 8006ae8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006af0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006b00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b04:	2300      	movs	r3, #0
 8006b06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006b0a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006b0e:	460b      	mov	r3, r1
 8006b10:	4313      	orrs	r3, r2
 8006b12:	d055      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b1c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006b20:	d033      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006b22:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006b26:	d82c      	bhi.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006b28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b2c:	d02f      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006b2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b32:	d826      	bhi.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006b34:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006b38:	d02b      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006b3a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006b3e:	d820      	bhi.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006b40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b44:	d012      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006b46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b4a:	d81a      	bhi.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d022      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006b50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b54:	d115      	bne.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b5a:	3308      	adds	r3, #8
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f000 fdd2 	bl	8007708 <RCCEx_PLL2_Config>
 8006b64:	4603      	mov	r3, r0
 8006b66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006b6a:	e015      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b70:	3328      	adds	r3, #40	@ 0x28
 8006b72:	2102      	movs	r1, #2
 8006b74:	4618      	mov	r0, r3
 8006b76:	f000 fe79 	bl	800786c <RCCEx_PLL3_Config>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006b80:	e00a      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b88:	e006      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006b8a:	bf00      	nop
 8006b8c:	e004      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006b8e:	bf00      	nop
 8006b90:	e002      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006b92:	bf00      	nop
 8006b94:	e000      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006b96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d10b      	bne.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006ba0:	4ba0      	ldr	r3, [pc, #640]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ba4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006bb0:	4a9c      	ldr	r2, [pc, #624]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bb2:	430b      	orrs	r3, r1
 8006bb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8006bb6:	e003      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bbc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc8:	f002 0308 	and.w	r3, r2, #8
 8006bcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006bd6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006bda:	460b      	mov	r3, r1
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	d01e      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006be8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bec:	d10c      	bne.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bf2:	3328      	adds	r3, #40	@ 0x28
 8006bf4:	2102      	movs	r1, #2
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 fe38 	bl	800786c <RCCEx_PLL3_Config>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d002      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006c08:	4b86      	ldr	r3, [pc, #536]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c0c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c18:	4a82      	ldr	r2, [pc, #520]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c1a:	430b      	orrs	r3, r1
 8006c1c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c26:	f002 0310 	and.w	r3, r2, #16
 8006c2a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c2e:	2300      	movs	r3, #0
 8006c30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c34:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006c38:	460b      	mov	r3, r1
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	d01e      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c4a:	d10c      	bne.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c50:	3328      	adds	r3, #40	@ 0x28
 8006c52:	2102      	movs	r1, #2
 8006c54:	4618      	mov	r0, r3
 8006c56:	f000 fe09 	bl	800786c <RCCEx_PLL3_Config>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d002      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c66:	4b6f      	ldr	r3, [pc, #444]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c6a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c76:	4a6b      	ldr	r2, [pc, #428]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c78:	430b      	orrs	r3, r1
 8006c7a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c84:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006c88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006c8e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006c92:	460b      	mov	r3, r1
 8006c94:	4313      	orrs	r3, r2
 8006c96:	d03e      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006ca0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ca4:	d022      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006ca6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006caa:	d81b      	bhi.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d003      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cb4:	d00b      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006cb6:	e015      	b.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cbc:	3308      	adds	r3, #8
 8006cbe:	2100      	movs	r1, #0
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 fd21 	bl	8007708 <RCCEx_PLL2_Config>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006ccc:	e00f      	b.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd2:	3328      	adds	r3, #40	@ 0x28
 8006cd4:	2102      	movs	r1, #2
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 fdc8 	bl	800786c <RCCEx_PLL3_Config>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006ce2:	e004      	b.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006cea:	e000      	b.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006cec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10b      	bne.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006cf6:	4b4b      	ldr	r3, [pc, #300]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cfa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006d06:	4a47      	ldr	r2, [pc, #284]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d08:	430b      	orrs	r3, r1
 8006d0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d0c:	e003      	b.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d12:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006d22:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d24:	2300      	movs	r3, #0
 8006d26:	677b      	str	r3, [r7, #116]	@ 0x74
 8006d28:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	d03b      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d3e:	d01f      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006d40:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d44:	d818      	bhi.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006d46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d4a:	d003      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006d4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d50:	d007      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006d52:	e011      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d54:	4b33      	ldr	r3, [pc, #204]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d58:	4a32      	ldr	r2, [pc, #200]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006d60:	e00f      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d66:	3328      	adds	r3, #40	@ 0x28
 8006d68:	2101      	movs	r1, #1
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f000 fd7e 	bl	800786c <RCCEx_PLL3_Config>
 8006d70:	4603      	mov	r3, r0
 8006d72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006d76:	e004      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d7e:	e000      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10b      	bne.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d8a:	4b26      	ldr	r3, [pc, #152]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d8e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d9a:	4a22      	ldr	r2, [pc, #136]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d9c:	430b      	orrs	r3, r1
 8006d9e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006da0:	e003      	b.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006da6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006db6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006db8:	2300      	movs	r3, #0
 8006dba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006dbc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	d034      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d003      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dd4:	d007      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006dd6:	e011      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dd8:	4b12      	ldr	r3, [pc, #72]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ddc:	4a11      	ldr	r2, [pc, #68]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006dde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006de2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006de4:	e00e      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dea:	3308      	adds	r3, #8
 8006dec:	2102      	movs	r1, #2
 8006dee:	4618      	mov	r0, r3
 8006df0:	f000 fc8a 	bl	8007708 <RCCEx_PLL2_Config>
 8006df4:	4603      	mov	r3, r0
 8006df6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006dfa:	e003      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10d      	bne.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006e0c:	4b05      	ldr	r3, [pc, #20]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e10:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e1a:	4a02      	ldr	r2, [pc, #8]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e1c:	430b      	orrs	r3, r1
 8006e1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006e20:	e006      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006e22:	bf00      	nop
 8006e24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e38:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006e3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e3e:	2300      	movs	r3, #0
 8006e40:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e42:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006e46:	460b      	mov	r3, r1
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	d00c      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e50:	3328      	adds	r3, #40	@ 0x28
 8006e52:	2102      	movs	r1, #2
 8006e54:	4618      	mov	r0, r3
 8006e56:	f000 fd09 	bl	800786c <RCCEx_PLL3_Config>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d002      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006e72:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e74:	2300      	movs	r3, #0
 8006e76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e78:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	d036      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e8c:	d018      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006e8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e92:	d811      	bhi.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006e94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e98:	d014      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006e9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e9e:	d80b      	bhi.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d011      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006ea4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ea8:	d106      	bne.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eaa:	4bb7      	ldr	r3, [pc, #732]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eae:	4ab6      	ldr	r2, [pc, #728]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006eb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006eb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006eb6:	e008      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ebe:	e004      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006ec0:	bf00      	nop
 8006ec2:	e002      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006ec4:	bf00      	nop
 8006ec6:	e000      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10a      	bne.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ed2:	4bad      	ldr	r3, [pc, #692]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ed6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ede:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ee0:	4aa9      	ldr	r2, [pc, #676]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ee2:	430b      	orrs	r3, r1
 8006ee4:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ee6:	e003      	b.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006eec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006efc:	653b      	str	r3, [r7, #80]	@ 0x50
 8006efe:	2300      	movs	r3, #0
 8006f00:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f02:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006f06:	460b      	mov	r3, r1
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	d009      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006f0c:	4b9e      	ldr	r3, [pc, #632]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f10:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f1a:	4a9b      	ldr	r2, [pc, #620]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f1c:	430b      	orrs	r3, r1
 8006f1e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f28:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006f2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f2e:	2300      	movs	r3, #0
 8006f30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f32:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006f36:	460b      	mov	r3, r1
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	d009      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006f3c:	4b92      	ldr	r3, [pc, #584]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f40:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f4a:	4a8f      	ldr	r2, [pc, #572]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f4c:	430b      	orrs	r3, r1
 8006f4e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f58:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006f5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f5e:	2300      	movs	r3, #0
 8006f60:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f62:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006f66:	460b      	mov	r3, r1
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	d00e      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f6c:	4b86      	ldr	r3, [pc, #536]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	4a85      	ldr	r2, [pc, #532]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f72:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006f76:	6113      	str	r3, [r2, #16]
 8006f78:	4b83      	ldr	r3, [pc, #524]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f7a:	6919      	ldr	r1, [r3, #16]
 8006f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006f84:	4a80      	ldr	r2, [pc, #512]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f86:	430b      	orrs	r3, r1
 8006f88:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f92:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006f96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f98:	2300      	movs	r3, #0
 8006f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f9c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	d009      	beq.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006fa6:	4b78      	ldr	r3, [pc, #480]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006faa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fb4:	4a74      	ldr	r2, [pc, #464]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006fb6:	430b      	orrs	r3, r1
 8006fb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006fc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fc8:	2300      	movs	r3, #0
 8006fca:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fcc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	d00a      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006fd6:	4b6c      	ldr	r3, [pc, #432]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fda:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fe6:	4a68      	ldr	r2, [pc, #416]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006fe8:	430b      	orrs	r3, r1
 8006fea:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006ff8:	f003 0301 	and.w	r3, r3, #1
 8006ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ffe:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007002:	460b      	mov	r3, r1
 8007004:	4313      	orrs	r3, r2
 8007006:	d011      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800700c:	3308      	adds	r3, #8
 800700e:	2100      	movs	r1, #0
 8007010:	4618      	mov	r0, r3
 8007012:	f000 fb79 	bl	8007708 <RCCEx_PLL2_Config>
 8007016:	4603      	mov	r3, r0
 8007018:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800701c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007020:	2b00      	cmp	r3, #0
 8007022:	d003      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007024:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007028:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800702c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007034:	2100      	movs	r1, #0
 8007036:	6239      	str	r1, [r7, #32]
 8007038:	f003 0302 	and.w	r3, r3, #2
 800703c:	627b      	str	r3, [r7, #36]	@ 0x24
 800703e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007042:	460b      	mov	r3, r1
 8007044:	4313      	orrs	r3, r2
 8007046:	d011      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800704c:	3308      	adds	r3, #8
 800704e:	2101      	movs	r1, #1
 8007050:	4618      	mov	r0, r3
 8007052:	f000 fb59 	bl	8007708 <RCCEx_PLL2_Config>
 8007056:	4603      	mov	r3, r0
 8007058:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800705c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007060:	2b00      	cmp	r3, #0
 8007062:	d003      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007064:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007068:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800706c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007074:	2100      	movs	r1, #0
 8007076:	61b9      	str	r1, [r7, #24]
 8007078:	f003 0304 	and.w	r3, r3, #4
 800707c:	61fb      	str	r3, [r7, #28]
 800707e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007082:	460b      	mov	r3, r1
 8007084:	4313      	orrs	r3, r2
 8007086:	d011      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800708c:	3308      	adds	r3, #8
 800708e:	2102      	movs	r1, #2
 8007090:	4618      	mov	r0, r3
 8007092:	f000 fb39 	bl	8007708 <RCCEx_PLL2_Config>
 8007096:	4603      	mov	r3, r0
 8007098:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800709c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d003      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80070ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b4:	2100      	movs	r1, #0
 80070b6:	6139      	str	r1, [r7, #16]
 80070b8:	f003 0308 	and.w	r3, r3, #8
 80070bc:	617b      	str	r3, [r7, #20]
 80070be:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80070c2:	460b      	mov	r3, r1
 80070c4:	4313      	orrs	r3, r2
 80070c6:	d011      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070cc:	3328      	adds	r3, #40	@ 0x28
 80070ce:	2100      	movs	r1, #0
 80070d0:	4618      	mov	r0, r3
 80070d2:	f000 fbcb 	bl	800786c <RCCEx_PLL3_Config>
 80070d6:	4603      	mov	r3, r0
 80070d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80070dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d003      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80070ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f4:	2100      	movs	r1, #0
 80070f6:	60b9      	str	r1, [r7, #8]
 80070f8:	f003 0310 	and.w	r3, r3, #16
 80070fc:	60fb      	str	r3, [r7, #12]
 80070fe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007102:	460b      	mov	r3, r1
 8007104:	4313      	orrs	r3, r2
 8007106:	d011      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800710c:	3328      	adds	r3, #40	@ 0x28
 800710e:	2101      	movs	r1, #1
 8007110:	4618      	mov	r0, r3
 8007112:	f000 fbab 	bl	800786c <RCCEx_PLL3_Config>
 8007116:	4603      	mov	r3, r0
 8007118:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800711c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007120:	2b00      	cmp	r3, #0
 8007122:	d003      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007124:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007128:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800712c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007134:	2100      	movs	r1, #0
 8007136:	6039      	str	r1, [r7, #0]
 8007138:	f003 0320 	and.w	r3, r3, #32
 800713c:	607b      	str	r3, [r7, #4]
 800713e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007142:	460b      	mov	r3, r1
 8007144:	4313      	orrs	r3, r2
 8007146:	d011      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800714c:	3328      	adds	r3, #40	@ 0x28
 800714e:	2102      	movs	r1, #2
 8007150:	4618      	mov	r0, r3
 8007152:	f000 fb8b 	bl	800786c <RCCEx_PLL3_Config>
 8007156:	4603      	mov	r3, r0
 8007158:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800715c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007160:	2b00      	cmp	r3, #0
 8007162:	d003      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007164:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007168:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800716c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8007170:	2b00      	cmp	r3, #0
 8007172:	d101      	bne.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007174:	2300      	movs	r3, #0
 8007176:	e000      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
}
 800717a:	4618      	mov	r0, r3
 800717c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007180:	46bd      	mov	sp, r7
 8007182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007186:	bf00      	nop
 8007188:	58024400 	.word	0x58024400

0800718c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007190:	f7fe fe00 	bl	8005d94 <HAL_RCC_GetHCLKFreq>
 8007194:	4602      	mov	r2, r0
 8007196:	4b06      	ldr	r3, [pc, #24]	@ (80071b0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	091b      	lsrs	r3, r3, #4
 800719c:	f003 0307 	and.w	r3, r3, #7
 80071a0:	4904      	ldr	r1, [pc, #16]	@ (80071b4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80071a2:	5ccb      	ldrb	r3, [r1, r3]
 80071a4:	f003 031f 	and.w	r3, r3, #31
 80071a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	58024400 	.word	0x58024400
 80071b4:	080095a4 	.word	0x080095a4

080071b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b089      	sub	sp, #36	@ 0x24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071c0:	4ba1      	ldr	r3, [pc, #644]	@ (8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c4:	f003 0303 	and.w	r3, r3, #3
 80071c8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80071ca:	4b9f      	ldr	r3, [pc, #636]	@ (8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ce:	0b1b      	lsrs	r3, r3, #12
 80071d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071d4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80071d6:	4b9c      	ldr	r3, [pc, #624]	@ (8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071da:	091b      	lsrs	r3, r3, #4
 80071dc:	f003 0301 	and.w	r3, r3, #1
 80071e0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80071e2:	4b99      	ldr	r3, [pc, #612]	@ (8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071e6:	08db      	lsrs	r3, r3, #3
 80071e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	fb02 f303 	mul.w	r3, r2, r3
 80071f2:	ee07 3a90 	vmov	s15, r3
 80071f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	2b00      	cmp	r3, #0
 8007202:	f000 8111 	beq.w	8007428 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	2b02      	cmp	r3, #2
 800720a:	f000 8083 	beq.w	8007314 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	2b02      	cmp	r3, #2
 8007212:	f200 80a1 	bhi.w	8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d003      	beq.n	8007224 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d056      	beq.n	80072d0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007222:	e099      	b.n	8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007224:	4b88      	ldr	r3, [pc, #544]	@ (8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0320 	and.w	r3, r3, #32
 800722c:	2b00      	cmp	r3, #0
 800722e:	d02d      	beq.n	800728c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007230:	4b85      	ldr	r3, [pc, #532]	@ (8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	08db      	lsrs	r3, r3, #3
 8007236:	f003 0303 	and.w	r3, r3, #3
 800723a:	4a84      	ldr	r2, [pc, #528]	@ (800744c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800723c:	fa22 f303 	lsr.w	r3, r2, r3
 8007240:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	ee07 3a90 	vmov	s15, r3
 8007248:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	ee07 3a90 	vmov	s15, r3
 8007252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800725a:	4b7b      	ldr	r3, [pc, #492]	@ (8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800725c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800725e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007262:	ee07 3a90 	vmov	s15, r3
 8007266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800726a:	ed97 6a03 	vldr	s12, [r7, #12]
 800726e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800727a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800727e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007286:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800728a:	e087      	b.n	800739c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	ee07 3a90 	vmov	s15, r3
 8007292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007296:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007454 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800729a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800729e:	4b6a      	ldr	r3, [pc, #424]	@ (8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072a6:	ee07 3a90 	vmov	s15, r3
 80072aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80072b2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072ce:	e065      	b.n	800739c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	ee07 3a90 	vmov	s15, r3
 80072d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072da:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007458 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072e2:	4b59      	ldr	r3, [pc, #356]	@ (8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ea:	ee07 3a90 	vmov	s15, r3
 80072ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072f6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007302:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800730a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800730e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007312:	e043      	b.n	800739c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	ee07 3a90 	vmov	s15, r3
 800731a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800731e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800745c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007326:	4b48      	ldr	r3, [pc, #288]	@ (8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800732a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800732e:	ee07 3a90 	vmov	s15, r3
 8007332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007336:	ed97 6a03 	vldr	s12, [r7, #12]
 800733a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800733e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007346:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800734a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800734e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007352:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007356:	e021      	b.n	800739c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	ee07 3a90 	vmov	s15, r3
 800735e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007362:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007458 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800736a:	4b37      	ldr	r3, [pc, #220]	@ (8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800736c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800736e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007372:	ee07 3a90 	vmov	s15, r3
 8007376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800737a:	ed97 6a03 	vldr	s12, [r7, #12]
 800737e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800738a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800738e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007396:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800739a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800739c:	4b2a      	ldr	r3, [pc, #168]	@ (8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800739e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073a0:	0a5b      	lsrs	r3, r3, #9
 80073a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073a6:	ee07 3a90 	vmov	s15, r3
 80073aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80073ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073c2:	ee17 2a90 	vmov	r2, s15
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80073ca:	4b1f      	ldr	r3, [pc, #124]	@ (8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ce:	0c1b      	lsrs	r3, r3, #16
 80073d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073d4:	ee07 3a90 	vmov	s15, r3
 80073d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80073e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073f0:	ee17 2a90 	vmov	r2, s15
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80073f8:	4b13      	ldr	r3, [pc, #76]	@ (8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073fc:	0e1b      	lsrs	r3, r3, #24
 80073fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007402:	ee07 3a90 	vmov	s15, r3
 8007406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800740a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800740e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007412:	edd7 6a07 	vldr	s13, [r7, #28]
 8007416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800741a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800741e:	ee17 2a90 	vmov	r2, s15
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007426:	e008      	b.n	800743a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	609a      	str	r2, [r3, #8]
}
 800743a:	bf00      	nop
 800743c:	3724      	adds	r7, #36	@ 0x24
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	58024400 	.word	0x58024400
 800744c:	03d09000 	.word	0x03d09000
 8007450:	46000000 	.word	0x46000000
 8007454:	4c742400 	.word	0x4c742400
 8007458:	4a742400 	.word	0x4a742400
 800745c:	4af42400 	.word	0x4af42400

08007460 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007460:	b480      	push	{r7}
 8007462:	b089      	sub	sp, #36	@ 0x24
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007468:	4ba1      	ldr	r3, [pc, #644]	@ (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800746a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800746c:	f003 0303 	and.w	r3, r3, #3
 8007470:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007472:	4b9f      	ldr	r3, [pc, #636]	@ (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007476:	0d1b      	lsrs	r3, r3, #20
 8007478:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800747c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800747e:	4b9c      	ldr	r3, [pc, #624]	@ (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007482:	0a1b      	lsrs	r3, r3, #8
 8007484:	f003 0301 	and.w	r3, r3, #1
 8007488:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800748a:	4b99      	ldr	r3, [pc, #612]	@ (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800748c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800748e:	08db      	lsrs	r3, r3, #3
 8007490:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007494:	693a      	ldr	r2, [r7, #16]
 8007496:	fb02 f303 	mul.w	r3, r2, r3
 800749a:	ee07 3a90 	vmov	s15, r3
 800749e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f000 8111 	beq.w	80076d0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	f000 8083 	beq.w	80075bc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	f200 80a1 	bhi.w	8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d003      	beq.n	80074cc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d056      	beq.n	8007578 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80074ca:	e099      	b.n	8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074cc:	4b88      	ldr	r3, [pc, #544]	@ (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 0320 	and.w	r3, r3, #32
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d02d      	beq.n	8007534 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074d8:	4b85      	ldr	r3, [pc, #532]	@ (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	08db      	lsrs	r3, r3, #3
 80074de:	f003 0303 	and.w	r3, r3, #3
 80074e2:	4a84      	ldr	r2, [pc, #528]	@ (80076f4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80074e4:	fa22 f303 	lsr.w	r3, r2, r3
 80074e8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	ee07 3a90 	vmov	s15, r3
 80074f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	ee07 3a90 	vmov	s15, r3
 80074fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007502:	4b7b      	ldr	r3, [pc, #492]	@ (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800750a:	ee07 3a90 	vmov	s15, r3
 800750e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007512:	ed97 6a03 	vldr	s12, [r7, #12]
 8007516:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800751a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800751e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007522:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800752a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800752e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007532:	e087      	b.n	8007644 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	ee07 3a90 	vmov	s15, r3
 800753a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800753e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80076fc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007546:	4b6a      	ldr	r3, [pc, #424]	@ (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800754a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800754e:	ee07 3a90 	vmov	s15, r3
 8007552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007556:	ed97 6a03 	vldr	s12, [r7, #12]
 800755a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800755e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007566:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800756a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800756e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007572:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007576:	e065      	b.n	8007644 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	ee07 3a90 	vmov	s15, r3
 800757e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007582:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007700 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800758a:	4b59      	ldr	r3, [pc, #356]	@ (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800758c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800758e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007592:	ee07 3a90 	vmov	s15, r3
 8007596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800759a:	ed97 6a03 	vldr	s12, [r7, #12]
 800759e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075ba:	e043      	b.n	8007644 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	ee07 3a90 	vmov	s15, r3
 80075c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075c6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007704 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80075ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ce:	4b48      	ldr	r3, [pc, #288]	@ (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075d6:	ee07 3a90 	vmov	s15, r3
 80075da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075de:	ed97 6a03 	vldr	s12, [r7, #12]
 80075e2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075fe:	e021      	b.n	8007644 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	ee07 3a90 	vmov	s15, r3
 8007606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800760a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007700 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800760e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007612:	4b37      	ldr	r3, [pc, #220]	@ (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800761a:	ee07 3a90 	vmov	s15, r3
 800761e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007622:	ed97 6a03 	vldr	s12, [r7, #12]
 8007626:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800762a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800762e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007632:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800763a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800763e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007642:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007644:	4b2a      	ldr	r3, [pc, #168]	@ (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007648:	0a5b      	lsrs	r3, r3, #9
 800764a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800764e:	ee07 3a90 	vmov	s15, r3
 8007652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007656:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800765a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800765e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007662:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007666:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800766a:	ee17 2a90 	vmov	r2, s15
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007672:	4b1f      	ldr	r3, [pc, #124]	@ (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007676:	0c1b      	lsrs	r3, r3, #16
 8007678:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800767c:	ee07 3a90 	vmov	s15, r3
 8007680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007684:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007688:	ee37 7a87 	vadd.f32	s14, s15, s14
 800768c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007690:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007694:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007698:	ee17 2a90 	vmov	r2, s15
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80076a0:	4b13      	ldr	r3, [pc, #76]	@ (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076a4:	0e1b      	lsrs	r3, r3, #24
 80076a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076aa:	ee07 3a90 	vmov	s15, r3
 80076ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80076be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076c6:	ee17 2a90 	vmov	r2, s15
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80076ce:	e008      	b.n	80076e2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	609a      	str	r2, [r3, #8]
}
 80076e2:	bf00      	nop
 80076e4:	3724      	adds	r7, #36	@ 0x24
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	58024400 	.word	0x58024400
 80076f4:	03d09000 	.word	0x03d09000
 80076f8:	46000000 	.word	0x46000000
 80076fc:	4c742400 	.word	0x4c742400
 8007700:	4a742400 	.word	0x4a742400
 8007704:	4af42400 	.word	0x4af42400

08007708 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007712:	2300      	movs	r3, #0
 8007714:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007716:	4b53      	ldr	r3, [pc, #332]	@ (8007864 <RCCEx_PLL2_Config+0x15c>)
 8007718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800771a:	f003 0303 	and.w	r3, r3, #3
 800771e:	2b03      	cmp	r3, #3
 8007720:	d101      	bne.n	8007726 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e099      	b.n	800785a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007726:	4b4f      	ldr	r3, [pc, #316]	@ (8007864 <RCCEx_PLL2_Config+0x15c>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a4e      	ldr	r2, [pc, #312]	@ (8007864 <RCCEx_PLL2_Config+0x15c>)
 800772c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007730:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007732:	f7fa f8c7 	bl	80018c4 <HAL_GetTick>
 8007736:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007738:	e008      	b.n	800774c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800773a:	f7fa f8c3 	bl	80018c4 <HAL_GetTick>
 800773e:	4602      	mov	r2, r0
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	2b02      	cmp	r3, #2
 8007746:	d901      	bls.n	800774c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007748:	2303      	movs	r3, #3
 800774a:	e086      	b.n	800785a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800774c:	4b45      	ldr	r3, [pc, #276]	@ (8007864 <RCCEx_PLL2_Config+0x15c>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1f0      	bne.n	800773a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007758:	4b42      	ldr	r3, [pc, #264]	@ (8007864 <RCCEx_PLL2_Config+0x15c>)
 800775a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800775c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	031b      	lsls	r3, r3, #12
 8007766:	493f      	ldr	r1, [pc, #252]	@ (8007864 <RCCEx_PLL2_Config+0x15c>)
 8007768:	4313      	orrs	r3, r2
 800776a:	628b      	str	r3, [r1, #40]	@ 0x28
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	3b01      	subs	r3, #1
 8007772:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	3b01      	subs	r3, #1
 800777c:	025b      	lsls	r3, r3, #9
 800777e:	b29b      	uxth	r3, r3
 8007780:	431a      	orrs	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	3b01      	subs	r3, #1
 8007788:	041b      	lsls	r3, r3, #16
 800778a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800778e:	431a      	orrs	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	3b01      	subs	r3, #1
 8007796:	061b      	lsls	r3, r3, #24
 8007798:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800779c:	4931      	ldr	r1, [pc, #196]	@ (8007864 <RCCEx_PLL2_Config+0x15c>)
 800779e:	4313      	orrs	r3, r2
 80077a0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80077a2:	4b30      	ldr	r3, [pc, #192]	@ (8007864 <RCCEx_PLL2_Config+0x15c>)
 80077a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	492d      	ldr	r1, [pc, #180]	@ (8007864 <RCCEx_PLL2_Config+0x15c>)
 80077b0:	4313      	orrs	r3, r2
 80077b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80077b4:	4b2b      	ldr	r3, [pc, #172]	@ (8007864 <RCCEx_PLL2_Config+0x15c>)
 80077b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b8:	f023 0220 	bic.w	r2, r3, #32
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	699b      	ldr	r3, [r3, #24]
 80077c0:	4928      	ldr	r1, [pc, #160]	@ (8007864 <RCCEx_PLL2_Config+0x15c>)
 80077c2:	4313      	orrs	r3, r2
 80077c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80077c6:	4b27      	ldr	r3, [pc, #156]	@ (8007864 <RCCEx_PLL2_Config+0x15c>)
 80077c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ca:	4a26      	ldr	r2, [pc, #152]	@ (8007864 <RCCEx_PLL2_Config+0x15c>)
 80077cc:	f023 0310 	bic.w	r3, r3, #16
 80077d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80077d2:	4b24      	ldr	r3, [pc, #144]	@ (8007864 <RCCEx_PLL2_Config+0x15c>)
 80077d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077d6:	4b24      	ldr	r3, [pc, #144]	@ (8007868 <RCCEx_PLL2_Config+0x160>)
 80077d8:	4013      	ands	r3, r2
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	69d2      	ldr	r2, [r2, #28]
 80077de:	00d2      	lsls	r2, r2, #3
 80077e0:	4920      	ldr	r1, [pc, #128]	@ (8007864 <RCCEx_PLL2_Config+0x15c>)
 80077e2:	4313      	orrs	r3, r2
 80077e4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80077e6:	4b1f      	ldr	r3, [pc, #124]	@ (8007864 <RCCEx_PLL2_Config+0x15c>)
 80077e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ea:	4a1e      	ldr	r2, [pc, #120]	@ (8007864 <RCCEx_PLL2_Config+0x15c>)
 80077ec:	f043 0310 	orr.w	r3, r3, #16
 80077f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d106      	bne.n	8007806 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80077f8:	4b1a      	ldr	r3, [pc, #104]	@ (8007864 <RCCEx_PLL2_Config+0x15c>)
 80077fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077fc:	4a19      	ldr	r2, [pc, #100]	@ (8007864 <RCCEx_PLL2_Config+0x15c>)
 80077fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007802:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007804:	e00f      	b.n	8007826 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d106      	bne.n	800781a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800780c:	4b15      	ldr	r3, [pc, #84]	@ (8007864 <RCCEx_PLL2_Config+0x15c>)
 800780e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007810:	4a14      	ldr	r2, [pc, #80]	@ (8007864 <RCCEx_PLL2_Config+0x15c>)
 8007812:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007816:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007818:	e005      	b.n	8007826 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800781a:	4b12      	ldr	r3, [pc, #72]	@ (8007864 <RCCEx_PLL2_Config+0x15c>)
 800781c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800781e:	4a11      	ldr	r2, [pc, #68]	@ (8007864 <RCCEx_PLL2_Config+0x15c>)
 8007820:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007824:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007826:	4b0f      	ldr	r3, [pc, #60]	@ (8007864 <RCCEx_PLL2_Config+0x15c>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a0e      	ldr	r2, [pc, #56]	@ (8007864 <RCCEx_PLL2_Config+0x15c>)
 800782c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007830:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007832:	f7fa f847 	bl	80018c4 <HAL_GetTick>
 8007836:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007838:	e008      	b.n	800784c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800783a:	f7fa f843 	bl	80018c4 <HAL_GetTick>
 800783e:	4602      	mov	r2, r0
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	1ad3      	subs	r3, r2, r3
 8007844:	2b02      	cmp	r3, #2
 8007846:	d901      	bls.n	800784c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007848:	2303      	movs	r3, #3
 800784a:	e006      	b.n	800785a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800784c:	4b05      	ldr	r3, [pc, #20]	@ (8007864 <RCCEx_PLL2_Config+0x15c>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d0f0      	beq.n	800783a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007858:	7bfb      	ldrb	r3, [r7, #15]
}
 800785a:	4618      	mov	r0, r3
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	58024400 	.word	0x58024400
 8007868:	ffff0007 	.word	0xffff0007

0800786c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800787a:	4b53      	ldr	r3, [pc, #332]	@ (80079c8 <RCCEx_PLL3_Config+0x15c>)
 800787c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800787e:	f003 0303 	and.w	r3, r3, #3
 8007882:	2b03      	cmp	r3, #3
 8007884:	d101      	bne.n	800788a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e099      	b.n	80079be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800788a:	4b4f      	ldr	r3, [pc, #316]	@ (80079c8 <RCCEx_PLL3_Config+0x15c>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a4e      	ldr	r2, [pc, #312]	@ (80079c8 <RCCEx_PLL3_Config+0x15c>)
 8007890:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007894:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007896:	f7fa f815 	bl	80018c4 <HAL_GetTick>
 800789a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800789c:	e008      	b.n	80078b0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800789e:	f7fa f811 	bl	80018c4 <HAL_GetTick>
 80078a2:	4602      	mov	r2, r0
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d901      	bls.n	80078b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80078ac:	2303      	movs	r3, #3
 80078ae:	e086      	b.n	80079be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078b0:	4b45      	ldr	r3, [pc, #276]	@ (80079c8 <RCCEx_PLL3_Config+0x15c>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1f0      	bne.n	800789e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80078bc:	4b42      	ldr	r3, [pc, #264]	@ (80079c8 <RCCEx_PLL3_Config+0x15c>)
 80078be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	051b      	lsls	r3, r3, #20
 80078ca:	493f      	ldr	r1, [pc, #252]	@ (80079c8 <RCCEx_PLL3_Config+0x15c>)
 80078cc:	4313      	orrs	r3, r2
 80078ce:	628b      	str	r3, [r1, #40]	@ 0x28
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	3b01      	subs	r3, #1
 80078d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	3b01      	subs	r3, #1
 80078e0:	025b      	lsls	r3, r3, #9
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	431a      	orrs	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	3b01      	subs	r3, #1
 80078ec:	041b      	lsls	r3, r3, #16
 80078ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80078f2:	431a      	orrs	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	3b01      	subs	r3, #1
 80078fa:	061b      	lsls	r3, r3, #24
 80078fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007900:	4931      	ldr	r1, [pc, #196]	@ (80079c8 <RCCEx_PLL3_Config+0x15c>)
 8007902:	4313      	orrs	r3, r2
 8007904:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007906:	4b30      	ldr	r3, [pc, #192]	@ (80079c8 <RCCEx_PLL3_Config+0x15c>)
 8007908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800790a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	492d      	ldr	r1, [pc, #180]	@ (80079c8 <RCCEx_PLL3_Config+0x15c>)
 8007914:	4313      	orrs	r3, r2
 8007916:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007918:	4b2b      	ldr	r3, [pc, #172]	@ (80079c8 <RCCEx_PLL3_Config+0x15c>)
 800791a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800791c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	699b      	ldr	r3, [r3, #24]
 8007924:	4928      	ldr	r1, [pc, #160]	@ (80079c8 <RCCEx_PLL3_Config+0x15c>)
 8007926:	4313      	orrs	r3, r2
 8007928:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800792a:	4b27      	ldr	r3, [pc, #156]	@ (80079c8 <RCCEx_PLL3_Config+0x15c>)
 800792c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800792e:	4a26      	ldr	r2, [pc, #152]	@ (80079c8 <RCCEx_PLL3_Config+0x15c>)
 8007930:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007934:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007936:	4b24      	ldr	r3, [pc, #144]	@ (80079c8 <RCCEx_PLL3_Config+0x15c>)
 8007938:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800793a:	4b24      	ldr	r3, [pc, #144]	@ (80079cc <RCCEx_PLL3_Config+0x160>)
 800793c:	4013      	ands	r3, r2
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	69d2      	ldr	r2, [r2, #28]
 8007942:	00d2      	lsls	r2, r2, #3
 8007944:	4920      	ldr	r1, [pc, #128]	@ (80079c8 <RCCEx_PLL3_Config+0x15c>)
 8007946:	4313      	orrs	r3, r2
 8007948:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800794a:	4b1f      	ldr	r3, [pc, #124]	@ (80079c8 <RCCEx_PLL3_Config+0x15c>)
 800794c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800794e:	4a1e      	ldr	r2, [pc, #120]	@ (80079c8 <RCCEx_PLL3_Config+0x15c>)
 8007950:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007954:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d106      	bne.n	800796a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800795c:	4b1a      	ldr	r3, [pc, #104]	@ (80079c8 <RCCEx_PLL3_Config+0x15c>)
 800795e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007960:	4a19      	ldr	r2, [pc, #100]	@ (80079c8 <RCCEx_PLL3_Config+0x15c>)
 8007962:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007966:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007968:	e00f      	b.n	800798a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d106      	bne.n	800797e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007970:	4b15      	ldr	r3, [pc, #84]	@ (80079c8 <RCCEx_PLL3_Config+0x15c>)
 8007972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007974:	4a14      	ldr	r2, [pc, #80]	@ (80079c8 <RCCEx_PLL3_Config+0x15c>)
 8007976:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800797a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800797c:	e005      	b.n	800798a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800797e:	4b12      	ldr	r3, [pc, #72]	@ (80079c8 <RCCEx_PLL3_Config+0x15c>)
 8007980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007982:	4a11      	ldr	r2, [pc, #68]	@ (80079c8 <RCCEx_PLL3_Config+0x15c>)
 8007984:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007988:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800798a:	4b0f      	ldr	r3, [pc, #60]	@ (80079c8 <RCCEx_PLL3_Config+0x15c>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a0e      	ldr	r2, [pc, #56]	@ (80079c8 <RCCEx_PLL3_Config+0x15c>)
 8007990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007994:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007996:	f7f9 ff95 	bl	80018c4 <HAL_GetTick>
 800799a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800799c:	e008      	b.n	80079b0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800799e:	f7f9 ff91 	bl	80018c4 <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d901      	bls.n	80079b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e006      	b.n	80079be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079b0:	4b05      	ldr	r3, [pc, #20]	@ (80079c8 <RCCEx_PLL3_Config+0x15c>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d0f0      	beq.n	800799e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80079bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	58024400 	.word	0x58024400
 80079cc:	ffff0007 	.word	0xffff0007

080079d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d101      	bne.n	80079e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e042      	b.n	8007a68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d106      	bne.n	80079fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f7f9 fcaf 	bl	8001358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2224      	movs	r2, #36	@ 0x24
 80079fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f022 0201 	bic.w	r2, r2, #1
 8007a10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d002      	beq.n	8007a20 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f001 f820 	bl	8008a60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f9b1 	bl	8007d88 <UART_SetConfig>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d101      	bne.n	8007a30 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e01b      	b.n	8007a68 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	685a      	ldr	r2, [r3, #4]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007a3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	689a      	ldr	r2, [r3, #8]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007a4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f042 0201 	orr.w	r2, r2, #1
 8007a5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f001 f89f 	bl	8008ba4 <UART_CheckIdleState>
 8007a66:	4603      	mov	r3, r0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3708      	adds	r7, #8
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b08a      	sub	sp, #40	@ 0x28
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a84:	2b20      	cmp	r3, #32
 8007a86:	d167      	bne.n	8007b58 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d002      	beq.n	8007a94 <HAL_UART_Transmit_DMA+0x24>
 8007a8e:	88fb      	ldrh	r3, [r7, #6]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d101      	bne.n	8007a98 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	e060      	b.n	8007b5a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	88fa      	ldrh	r2, [r7, #6]
 8007aa2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	88fa      	ldrh	r2, [r7, #6]
 8007aaa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2221      	movs	r2, #33	@ 0x21
 8007aba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d028      	beq.n	8007b18 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007aca:	4a26      	ldr	r2, [pc, #152]	@ (8007b64 <HAL_UART_Transmit_DMA+0xf4>)
 8007acc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ad2:	4a25      	ldr	r2, [pc, #148]	@ (8007b68 <HAL_UART_Transmit_DMA+0xf8>)
 8007ad4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ada:	4a24      	ldr	r2, [pc, #144]	@ (8007b6c <HAL_UART_Transmit_DMA+0xfc>)
 8007adc:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007aee:	4619      	mov	r1, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3328      	adds	r3, #40	@ 0x28
 8007af6:	461a      	mov	r2, r3
 8007af8:	88fb      	ldrh	r3, [r7, #6]
 8007afa:	f7fa fb6b 	bl	80021d4 <HAL_DMA_Start_IT>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d009      	beq.n	8007b18 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2210      	movs	r2, #16
 8007b08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2220      	movs	r2, #32
 8007b10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e020      	b.n	8007b5a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2240      	movs	r2, #64	@ 0x40
 8007b1e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3308      	adds	r3, #8
 8007b26:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	e853 3f00 	ldrex	r3, [r3]
 8007b2e:	613b      	str	r3, [r7, #16]
   return(result);
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	3308      	adds	r3, #8
 8007b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b40:	623a      	str	r2, [r7, #32]
 8007b42:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b44:	69f9      	ldr	r1, [r7, #28]
 8007b46:	6a3a      	ldr	r2, [r7, #32]
 8007b48:	e841 2300 	strex	r3, r2, [r1]
 8007b4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1e5      	bne.n	8007b20 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007b54:	2300      	movs	r3, #0
 8007b56:	e000      	b.n	8007b5a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007b58:	2302      	movs	r3, #2
  }
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3728      	adds	r7, #40	@ 0x28
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	08009071 	.word	0x08009071
 8007b68:	08009107 	.word	0x08009107
 8007b6c:	08009289 	.word	0x08009289

08007b70 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b08a      	sub	sp, #40	@ 0x28
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b84:	2b20      	cmp	r3, #32
 8007b86:	d137      	bne.n	8007bf8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d002      	beq.n	8007b94 <HAL_UART_Receive_DMA+0x24>
 8007b8e:	88fb      	ldrh	r3, [r7, #6]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d101      	bne.n	8007b98 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	e030      	b.n	8007bfa <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a18      	ldr	r2, [pc, #96]	@ (8007c04 <HAL_UART_Receive_DMA+0x94>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d01f      	beq.n	8007be8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d018      	beq.n	8007be8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	e853 3f00 	ldrex	r3, [r3]
 8007bc2:	613b      	str	r3, [r7, #16]
   return(result);
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007bca:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd4:	623b      	str	r3, [r7, #32]
 8007bd6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd8:	69f9      	ldr	r1, [r7, #28]
 8007bda:	6a3a      	ldr	r2, [r7, #32]
 8007bdc:	e841 2300 	strex	r3, r2, [r1]
 8007be0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d1e6      	bne.n	8007bb6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007be8:	88fb      	ldrh	r3, [r7, #6]
 8007bea:	461a      	mov	r2, r3
 8007bec:	68b9      	ldr	r1, [r7, #8]
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f001 f8f0 	bl	8008dd4 <UART_Start_Receive_DMA>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	e000      	b.n	8007bfa <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007bf8:	2302      	movs	r3, #2
  }
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3728      	adds	r7, #40	@ 0x28
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	58000c00 	.word	0x58000c00

08007c08 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b090      	sub	sp, #64	@ 0x40
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c1e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c2a:	2b80      	cmp	r3, #128	@ 0x80
 8007c2c:	d139      	bne.n	8007ca2 <HAL_UART_DMAStop+0x9a>
 8007c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c30:	2b21      	cmp	r3, #33	@ 0x21
 8007c32:	d136      	bne.n	8007ca2 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	3308      	adds	r3, #8
 8007c3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3c:	6a3b      	ldr	r3, [r7, #32]
 8007c3e:	e853 3f00 	ldrex	r3, [r3]
 8007c42:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	3308      	adds	r3, #8
 8007c52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c5c:	e841 2300 	strex	r3, r2, [r1]
 8007c60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1e5      	bne.n	8007c34 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d015      	beq.n	8007c9c <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7fa fd17 	bl	80026a8 <HAL_DMA_Abort>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00d      	beq.n	8007c9c <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7fb ff57 	bl	8003b38 <HAL_DMA_GetError>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b20      	cmp	r3, #32
 8007c8e:	d105      	bne.n	8007c9c <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2210      	movs	r2, #16
 8007c94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8007c98:	2303      	movs	r3, #3
 8007c9a:	e047      	b.n	8007d2c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f001 f93f 	bl	8008f20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cac:	2b40      	cmp	r3, #64	@ 0x40
 8007cae:	d13c      	bne.n	8007d2a <HAL_UART_DMAStop+0x122>
 8007cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb2:	2b22      	cmp	r3, #34	@ 0x22
 8007cb4:	d139      	bne.n	8007d2a <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	3308      	adds	r3, #8
 8007cbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	e853 3f00 	ldrex	r3, [r3]
 8007cc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ccc:	633b      	str	r3, [r7, #48]	@ 0x30
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	3308      	adds	r3, #8
 8007cd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cd6:	61ba      	str	r2, [r7, #24]
 8007cd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cda:	6979      	ldr	r1, [r7, #20]
 8007cdc:	69ba      	ldr	r2, [r7, #24]
 8007cde:	e841 2300 	strex	r3, r2, [r1]
 8007ce2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1e5      	bne.n	8007cb6 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d017      	beq.n	8007d24 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7fa fcd4 	bl	80026a8 <HAL_DMA_Abort>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00e      	beq.n	8007d24 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7fb ff13 	bl	8003b38 <HAL_DMA_GetError>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b20      	cmp	r3, #32
 8007d16:	d105      	bne.n	8007d24 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2210      	movs	r2, #16
 8007d1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8007d20:	2303      	movs	r3, #3
 8007d22:	e003      	b.n	8007d2c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f001 f93d 	bl	8008fa4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3740      	adds	r7, #64	@ 0x40
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007d64:	bf00      	nop
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	460b      	mov	r3, r1
 8007d7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d7c:	bf00      	nop
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d8c:	b092      	sub	sp, #72	@ 0x48
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d92:	2300      	movs	r3, #0
 8007d94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	689a      	ldr	r2, [r3, #8]
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	431a      	orrs	r2, r3
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	695b      	ldr	r3, [r3, #20]
 8007da6:	431a      	orrs	r2, r3
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	69db      	ldr	r3, [r3, #28]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	4bbe      	ldr	r3, [pc, #760]	@ (80080b0 <UART_SetConfig+0x328>)
 8007db8:	4013      	ands	r3, r2
 8007dba:	697a      	ldr	r2, [r7, #20]
 8007dbc:	6812      	ldr	r2, [r2, #0]
 8007dbe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007dc0:	430b      	orrs	r3, r1
 8007dc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	68da      	ldr	r2, [r3, #12]
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	430a      	orrs	r2, r1
 8007dd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	699b      	ldr	r3, [r3, #24]
 8007dde:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4ab3      	ldr	r2, [pc, #716]	@ (80080b4 <UART_SetConfig+0x32c>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d004      	beq.n	8007df4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007df0:	4313      	orrs	r3, r2
 8007df2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	689a      	ldr	r2, [r3, #8]
 8007dfa:	4baf      	ldr	r3, [pc, #700]	@ (80080b8 <UART_SetConfig+0x330>)
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	697a      	ldr	r2, [r7, #20]
 8007e00:	6812      	ldr	r2, [r2, #0]
 8007e02:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007e04:	430b      	orrs	r3, r1
 8007e06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e0e:	f023 010f 	bic.w	r1, r3, #15
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	430a      	orrs	r2, r1
 8007e1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4aa6      	ldr	r2, [pc, #664]	@ (80080bc <UART_SetConfig+0x334>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d177      	bne.n	8007f18 <UART_SetConfig+0x190>
 8007e28:	4ba5      	ldr	r3, [pc, #660]	@ (80080c0 <UART_SetConfig+0x338>)
 8007e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e30:	2b28      	cmp	r3, #40	@ 0x28
 8007e32:	d86d      	bhi.n	8007f10 <UART_SetConfig+0x188>
 8007e34:	a201      	add	r2, pc, #4	@ (adr r2, 8007e3c <UART_SetConfig+0xb4>)
 8007e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e3a:	bf00      	nop
 8007e3c:	08007ee1 	.word	0x08007ee1
 8007e40:	08007f11 	.word	0x08007f11
 8007e44:	08007f11 	.word	0x08007f11
 8007e48:	08007f11 	.word	0x08007f11
 8007e4c:	08007f11 	.word	0x08007f11
 8007e50:	08007f11 	.word	0x08007f11
 8007e54:	08007f11 	.word	0x08007f11
 8007e58:	08007f11 	.word	0x08007f11
 8007e5c:	08007ee9 	.word	0x08007ee9
 8007e60:	08007f11 	.word	0x08007f11
 8007e64:	08007f11 	.word	0x08007f11
 8007e68:	08007f11 	.word	0x08007f11
 8007e6c:	08007f11 	.word	0x08007f11
 8007e70:	08007f11 	.word	0x08007f11
 8007e74:	08007f11 	.word	0x08007f11
 8007e78:	08007f11 	.word	0x08007f11
 8007e7c:	08007ef1 	.word	0x08007ef1
 8007e80:	08007f11 	.word	0x08007f11
 8007e84:	08007f11 	.word	0x08007f11
 8007e88:	08007f11 	.word	0x08007f11
 8007e8c:	08007f11 	.word	0x08007f11
 8007e90:	08007f11 	.word	0x08007f11
 8007e94:	08007f11 	.word	0x08007f11
 8007e98:	08007f11 	.word	0x08007f11
 8007e9c:	08007ef9 	.word	0x08007ef9
 8007ea0:	08007f11 	.word	0x08007f11
 8007ea4:	08007f11 	.word	0x08007f11
 8007ea8:	08007f11 	.word	0x08007f11
 8007eac:	08007f11 	.word	0x08007f11
 8007eb0:	08007f11 	.word	0x08007f11
 8007eb4:	08007f11 	.word	0x08007f11
 8007eb8:	08007f11 	.word	0x08007f11
 8007ebc:	08007f01 	.word	0x08007f01
 8007ec0:	08007f11 	.word	0x08007f11
 8007ec4:	08007f11 	.word	0x08007f11
 8007ec8:	08007f11 	.word	0x08007f11
 8007ecc:	08007f11 	.word	0x08007f11
 8007ed0:	08007f11 	.word	0x08007f11
 8007ed4:	08007f11 	.word	0x08007f11
 8007ed8:	08007f11 	.word	0x08007f11
 8007edc:	08007f09 	.word	0x08007f09
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ee6:	e326      	b.n	8008536 <UART_SetConfig+0x7ae>
 8007ee8:	2304      	movs	r3, #4
 8007eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eee:	e322      	b.n	8008536 <UART_SetConfig+0x7ae>
 8007ef0:	2308      	movs	r3, #8
 8007ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ef6:	e31e      	b.n	8008536 <UART_SetConfig+0x7ae>
 8007ef8:	2310      	movs	r3, #16
 8007efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007efe:	e31a      	b.n	8008536 <UART_SetConfig+0x7ae>
 8007f00:	2320      	movs	r3, #32
 8007f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f06:	e316      	b.n	8008536 <UART_SetConfig+0x7ae>
 8007f08:	2340      	movs	r3, #64	@ 0x40
 8007f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f0e:	e312      	b.n	8008536 <UART_SetConfig+0x7ae>
 8007f10:	2380      	movs	r3, #128	@ 0x80
 8007f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f16:	e30e      	b.n	8008536 <UART_SetConfig+0x7ae>
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a69      	ldr	r2, [pc, #420]	@ (80080c4 <UART_SetConfig+0x33c>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d130      	bne.n	8007f84 <UART_SetConfig+0x1fc>
 8007f22:	4b67      	ldr	r3, [pc, #412]	@ (80080c0 <UART_SetConfig+0x338>)
 8007f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f26:	f003 0307 	and.w	r3, r3, #7
 8007f2a:	2b05      	cmp	r3, #5
 8007f2c:	d826      	bhi.n	8007f7c <UART_SetConfig+0x1f4>
 8007f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f34 <UART_SetConfig+0x1ac>)
 8007f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f34:	08007f4d 	.word	0x08007f4d
 8007f38:	08007f55 	.word	0x08007f55
 8007f3c:	08007f5d 	.word	0x08007f5d
 8007f40:	08007f65 	.word	0x08007f65
 8007f44:	08007f6d 	.word	0x08007f6d
 8007f48:	08007f75 	.word	0x08007f75
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f52:	e2f0      	b.n	8008536 <UART_SetConfig+0x7ae>
 8007f54:	2304      	movs	r3, #4
 8007f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f5a:	e2ec      	b.n	8008536 <UART_SetConfig+0x7ae>
 8007f5c:	2308      	movs	r3, #8
 8007f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f62:	e2e8      	b.n	8008536 <UART_SetConfig+0x7ae>
 8007f64:	2310      	movs	r3, #16
 8007f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f6a:	e2e4      	b.n	8008536 <UART_SetConfig+0x7ae>
 8007f6c:	2320      	movs	r3, #32
 8007f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f72:	e2e0      	b.n	8008536 <UART_SetConfig+0x7ae>
 8007f74:	2340      	movs	r3, #64	@ 0x40
 8007f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f7a:	e2dc      	b.n	8008536 <UART_SetConfig+0x7ae>
 8007f7c:	2380      	movs	r3, #128	@ 0x80
 8007f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f82:	e2d8      	b.n	8008536 <UART_SetConfig+0x7ae>
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a4f      	ldr	r2, [pc, #316]	@ (80080c8 <UART_SetConfig+0x340>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d130      	bne.n	8007ff0 <UART_SetConfig+0x268>
 8007f8e:	4b4c      	ldr	r3, [pc, #304]	@ (80080c0 <UART_SetConfig+0x338>)
 8007f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f92:	f003 0307 	and.w	r3, r3, #7
 8007f96:	2b05      	cmp	r3, #5
 8007f98:	d826      	bhi.n	8007fe8 <UART_SetConfig+0x260>
 8007f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007fa0 <UART_SetConfig+0x218>)
 8007f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa0:	08007fb9 	.word	0x08007fb9
 8007fa4:	08007fc1 	.word	0x08007fc1
 8007fa8:	08007fc9 	.word	0x08007fc9
 8007fac:	08007fd1 	.word	0x08007fd1
 8007fb0:	08007fd9 	.word	0x08007fd9
 8007fb4:	08007fe1 	.word	0x08007fe1
 8007fb8:	2300      	movs	r3, #0
 8007fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fbe:	e2ba      	b.n	8008536 <UART_SetConfig+0x7ae>
 8007fc0:	2304      	movs	r3, #4
 8007fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fc6:	e2b6      	b.n	8008536 <UART_SetConfig+0x7ae>
 8007fc8:	2308      	movs	r3, #8
 8007fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fce:	e2b2      	b.n	8008536 <UART_SetConfig+0x7ae>
 8007fd0:	2310      	movs	r3, #16
 8007fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fd6:	e2ae      	b.n	8008536 <UART_SetConfig+0x7ae>
 8007fd8:	2320      	movs	r3, #32
 8007fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fde:	e2aa      	b.n	8008536 <UART_SetConfig+0x7ae>
 8007fe0:	2340      	movs	r3, #64	@ 0x40
 8007fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fe6:	e2a6      	b.n	8008536 <UART_SetConfig+0x7ae>
 8007fe8:	2380      	movs	r3, #128	@ 0x80
 8007fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fee:	e2a2      	b.n	8008536 <UART_SetConfig+0x7ae>
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a35      	ldr	r2, [pc, #212]	@ (80080cc <UART_SetConfig+0x344>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d130      	bne.n	800805c <UART_SetConfig+0x2d4>
 8007ffa:	4b31      	ldr	r3, [pc, #196]	@ (80080c0 <UART_SetConfig+0x338>)
 8007ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ffe:	f003 0307 	and.w	r3, r3, #7
 8008002:	2b05      	cmp	r3, #5
 8008004:	d826      	bhi.n	8008054 <UART_SetConfig+0x2cc>
 8008006:	a201      	add	r2, pc, #4	@ (adr r2, 800800c <UART_SetConfig+0x284>)
 8008008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800800c:	08008025 	.word	0x08008025
 8008010:	0800802d 	.word	0x0800802d
 8008014:	08008035 	.word	0x08008035
 8008018:	0800803d 	.word	0x0800803d
 800801c:	08008045 	.word	0x08008045
 8008020:	0800804d 	.word	0x0800804d
 8008024:	2300      	movs	r3, #0
 8008026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800802a:	e284      	b.n	8008536 <UART_SetConfig+0x7ae>
 800802c:	2304      	movs	r3, #4
 800802e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008032:	e280      	b.n	8008536 <UART_SetConfig+0x7ae>
 8008034:	2308      	movs	r3, #8
 8008036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800803a:	e27c      	b.n	8008536 <UART_SetConfig+0x7ae>
 800803c:	2310      	movs	r3, #16
 800803e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008042:	e278      	b.n	8008536 <UART_SetConfig+0x7ae>
 8008044:	2320      	movs	r3, #32
 8008046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800804a:	e274      	b.n	8008536 <UART_SetConfig+0x7ae>
 800804c:	2340      	movs	r3, #64	@ 0x40
 800804e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008052:	e270      	b.n	8008536 <UART_SetConfig+0x7ae>
 8008054:	2380      	movs	r3, #128	@ 0x80
 8008056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800805a:	e26c      	b.n	8008536 <UART_SetConfig+0x7ae>
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a1b      	ldr	r2, [pc, #108]	@ (80080d0 <UART_SetConfig+0x348>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d142      	bne.n	80080ec <UART_SetConfig+0x364>
 8008066:	4b16      	ldr	r3, [pc, #88]	@ (80080c0 <UART_SetConfig+0x338>)
 8008068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800806a:	f003 0307 	and.w	r3, r3, #7
 800806e:	2b05      	cmp	r3, #5
 8008070:	d838      	bhi.n	80080e4 <UART_SetConfig+0x35c>
 8008072:	a201      	add	r2, pc, #4	@ (adr r2, 8008078 <UART_SetConfig+0x2f0>)
 8008074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008078:	08008091 	.word	0x08008091
 800807c:	08008099 	.word	0x08008099
 8008080:	080080a1 	.word	0x080080a1
 8008084:	080080a9 	.word	0x080080a9
 8008088:	080080d5 	.word	0x080080d5
 800808c:	080080dd 	.word	0x080080dd
 8008090:	2300      	movs	r3, #0
 8008092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008096:	e24e      	b.n	8008536 <UART_SetConfig+0x7ae>
 8008098:	2304      	movs	r3, #4
 800809a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800809e:	e24a      	b.n	8008536 <UART_SetConfig+0x7ae>
 80080a0:	2308      	movs	r3, #8
 80080a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080a6:	e246      	b.n	8008536 <UART_SetConfig+0x7ae>
 80080a8:	2310      	movs	r3, #16
 80080aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ae:	e242      	b.n	8008536 <UART_SetConfig+0x7ae>
 80080b0:	cfff69f3 	.word	0xcfff69f3
 80080b4:	58000c00 	.word	0x58000c00
 80080b8:	11fff4ff 	.word	0x11fff4ff
 80080bc:	40011000 	.word	0x40011000
 80080c0:	58024400 	.word	0x58024400
 80080c4:	40004400 	.word	0x40004400
 80080c8:	40004800 	.word	0x40004800
 80080cc:	40004c00 	.word	0x40004c00
 80080d0:	40005000 	.word	0x40005000
 80080d4:	2320      	movs	r3, #32
 80080d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080da:	e22c      	b.n	8008536 <UART_SetConfig+0x7ae>
 80080dc:	2340      	movs	r3, #64	@ 0x40
 80080de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080e2:	e228      	b.n	8008536 <UART_SetConfig+0x7ae>
 80080e4:	2380      	movs	r3, #128	@ 0x80
 80080e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ea:	e224      	b.n	8008536 <UART_SetConfig+0x7ae>
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4ab1      	ldr	r2, [pc, #708]	@ (80083b8 <UART_SetConfig+0x630>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d176      	bne.n	80081e4 <UART_SetConfig+0x45c>
 80080f6:	4bb1      	ldr	r3, [pc, #708]	@ (80083bc <UART_SetConfig+0x634>)
 80080f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80080fe:	2b28      	cmp	r3, #40	@ 0x28
 8008100:	d86c      	bhi.n	80081dc <UART_SetConfig+0x454>
 8008102:	a201      	add	r2, pc, #4	@ (adr r2, 8008108 <UART_SetConfig+0x380>)
 8008104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008108:	080081ad 	.word	0x080081ad
 800810c:	080081dd 	.word	0x080081dd
 8008110:	080081dd 	.word	0x080081dd
 8008114:	080081dd 	.word	0x080081dd
 8008118:	080081dd 	.word	0x080081dd
 800811c:	080081dd 	.word	0x080081dd
 8008120:	080081dd 	.word	0x080081dd
 8008124:	080081dd 	.word	0x080081dd
 8008128:	080081b5 	.word	0x080081b5
 800812c:	080081dd 	.word	0x080081dd
 8008130:	080081dd 	.word	0x080081dd
 8008134:	080081dd 	.word	0x080081dd
 8008138:	080081dd 	.word	0x080081dd
 800813c:	080081dd 	.word	0x080081dd
 8008140:	080081dd 	.word	0x080081dd
 8008144:	080081dd 	.word	0x080081dd
 8008148:	080081bd 	.word	0x080081bd
 800814c:	080081dd 	.word	0x080081dd
 8008150:	080081dd 	.word	0x080081dd
 8008154:	080081dd 	.word	0x080081dd
 8008158:	080081dd 	.word	0x080081dd
 800815c:	080081dd 	.word	0x080081dd
 8008160:	080081dd 	.word	0x080081dd
 8008164:	080081dd 	.word	0x080081dd
 8008168:	080081c5 	.word	0x080081c5
 800816c:	080081dd 	.word	0x080081dd
 8008170:	080081dd 	.word	0x080081dd
 8008174:	080081dd 	.word	0x080081dd
 8008178:	080081dd 	.word	0x080081dd
 800817c:	080081dd 	.word	0x080081dd
 8008180:	080081dd 	.word	0x080081dd
 8008184:	080081dd 	.word	0x080081dd
 8008188:	080081cd 	.word	0x080081cd
 800818c:	080081dd 	.word	0x080081dd
 8008190:	080081dd 	.word	0x080081dd
 8008194:	080081dd 	.word	0x080081dd
 8008198:	080081dd 	.word	0x080081dd
 800819c:	080081dd 	.word	0x080081dd
 80081a0:	080081dd 	.word	0x080081dd
 80081a4:	080081dd 	.word	0x080081dd
 80081a8:	080081d5 	.word	0x080081d5
 80081ac:	2301      	movs	r3, #1
 80081ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081b2:	e1c0      	b.n	8008536 <UART_SetConfig+0x7ae>
 80081b4:	2304      	movs	r3, #4
 80081b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ba:	e1bc      	b.n	8008536 <UART_SetConfig+0x7ae>
 80081bc:	2308      	movs	r3, #8
 80081be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081c2:	e1b8      	b.n	8008536 <UART_SetConfig+0x7ae>
 80081c4:	2310      	movs	r3, #16
 80081c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ca:	e1b4      	b.n	8008536 <UART_SetConfig+0x7ae>
 80081cc:	2320      	movs	r3, #32
 80081ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081d2:	e1b0      	b.n	8008536 <UART_SetConfig+0x7ae>
 80081d4:	2340      	movs	r3, #64	@ 0x40
 80081d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081da:	e1ac      	b.n	8008536 <UART_SetConfig+0x7ae>
 80081dc:	2380      	movs	r3, #128	@ 0x80
 80081de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081e2:	e1a8      	b.n	8008536 <UART_SetConfig+0x7ae>
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a75      	ldr	r2, [pc, #468]	@ (80083c0 <UART_SetConfig+0x638>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d130      	bne.n	8008250 <UART_SetConfig+0x4c8>
 80081ee:	4b73      	ldr	r3, [pc, #460]	@ (80083bc <UART_SetConfig+0x634>)
 80081f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081f2:	f003 0307 	and.w	r3, r3, #7
 80081f6:	2b05      	cmp	r3, #5
 80081f8:	d826      	bhi.n	8008248 <UART_SetConfig+0x4c0>
 80081fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008200 <UART_SetConfig+0x478>)
 80081fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008200:	08008219 	.word	0x08008219
 8008204:	08008221 	.word	0x08008221
 8008208:	08008229 	.word	0x08008229
 800820c:	08008231 	.word	0x08008231
 8008210:	08008239 	.word	0x08008239
 8008214:	08008241 	.word	0x08008241
 8008218:	2300      	movs	r3, #0
 800821a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800821e:	e18a      	b.n	8008536 <UART_SetConfig+0x7ae>
 8008220:	2304      	movs	r3, #4
 8008222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008226:	e186      	b.n	8008536 <UART_SetConfig+0x7ae>
 8008228:	2308      	movs	r3, #8
 800822a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800822e:	e182      	b.n	8008536 <UART_SetConfig+0x7ae>
 8008230:	2310      	movs	r3, #16
 8008232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008236:	e17e      	b.n	8008536 <UART_SetConfig+0x7ae>
 8008238:	2320      	movs	r3, #32
 800823a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800823e:	e17a      	b.n	8008536 <UART_SetConfig+0x7ae>
 8008240:	2340      	movs	r3, #64	@ 0x40
 8008242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008246:	e176      	b.n	8008536 <UART_SetConfig+0x7ae>
 8008248:	2380      	movs	r3, #128	@ 0x80
 800824a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800824e:	e172      	b.n	8008536 <UART_SetConfig+0x7ae>
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a5b      	ldr	r2, [pc, #364]	@ (80083c4 <UART_SetConfig+0x63c>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d130      	bne.n	80082bc <UART_SetConfig+0x534>
 800825a:	4b58      	ldr	r3, [pc, #352]	@ (80083bc <UART_SetConfig+0x634>)
 800825c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800825e:	f003 0307 	and.w	r3, r3, #7
 8008262:	2b05      	cmp	r3, #5
 8008264:	d826      	bhi.n	80082b4 <UART_SetConfig+0x52c>
 8008266:	a201      	add	r2, pc, #4	@ (adr r2, 800826c <UART_SetConfig+0x4e4>)
 8008268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826c:	08008285 	.word	0x08008285
 8008270:	0800828d 	.word	0x0800828d
 8008274:	08008295 	.word	0x08008295
 8008278:	0800829d 	.word	0x0800829d
 800827c:	080082a5 	.word	0x080082a5
 8008280:	080082ad 	.word	0x080082ad
 8008284:	2300      	movs	r3, #0
 8008286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800828a:	e154      	b.n	8008536 <UART_SetConfig+0x7ae>
 800828c:	2304      	movs	r3, #4
 800828e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008292:	e150      	b.n	8008536 <UART_SetConfig+0x7ae>
 8008294:	2308      	movs	r3, #8
 8008296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800829a:	e14c      	b.n	8008536 <UART_SetConfig+0x7ae>
 800829c:	2310      	movs	r3, #16
 800829e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082a2:	e148      	b.n	8008536 <UART_SetConfig+0x7ae>
 80082a4:	2320      	movs	r3, #32
 80082a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082aa:	e144      	b.n	8008536 <UART_SetConfig+0x7ae>
 80082ac:	2340      	movs	r3, #64	@ 0x40
 80082ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082b2:	e140      	b.n	8008536 <UART_SetConfig+0x7ae>
 80082b4:	2380      	movs	r3, #128	@ 0x80
 80082b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ba:	e13c      	b.n	8008536 <UART_SetConfig+0x7ae>
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a41      	ldr	r2, [pc, #260]	@ (80083c8 <UART_SetConfig+0x640>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	f040 8082 	bne.w	80083cc <UART_SetConfig+0x644>
 80082c8:	4b3c      	ldr	r3, [pc, #240]	@ (80083bc <UART_SetConfig+0x634>)
 80082ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80082d0:	2b28      	cmp	r3, #40	@ 0x28
 80082d2:	d86d      	bhi.n	80083b0 <UART_SetConfig+0x628>
 80082d4:	a201      	add	r2, pc, #4	@ (adr r2, 80082dc <UART_SetConfig+0x554>)
 80082d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082da:	bf00      	nop
 80082dc:	08008381 	.word	0x08008381
 80082e0:	080083b1 	.word	0x080083b1
 80082e4:	080083b1 	.word	0x080083b1
 80082e8:	080083b1 	.word	0x080083b1
 80082ec:	080083b1 	.word	0x080083b1
 80082f0:	080083b1 	.word	0x080083b1
 80082f4:	080083b1 	.word	0x080083b1
 80082f8:	080083b1 	.word	0x080083b1
 80082fc:	08008389 	.word	0x08008389
 8008300:	080083b1 	.word	0x080083b1
 8008304:	080083b1 	.word	0x080083b1
 8008308:	080083b1 	.word	0x080083b1
 800830c:	080083b1 	.word	0x080083b1
 8008310:	080083b1 	.word	0x080083b1
 8008314:	080083b1 	.word	0x080083b1
 8008318:	080083b1 	.word	0x080083b1
 800831c:	08008391 	.word	0x08008391
 8008320:	080083b1 	.word	0x080083b1
 8008324:	080083b1 	.word	0x080083b1
 8008328:	080083b1 	.word	0x080083b1
 800832c:	080083b1 	.word	0x080083b1
 8008330:	080083b1 	.word	0x080083b1
 8008334:	080083b1 	.word	0x080083b1
 8008338:	080083b1 	.word	0x080083b1
 800833c:	08008399 	.word	0x08008399
 8008340:	080083b1 	.word	0x080083b1
 8008344:	080083b1 	.word	0x080083b1
 8008348:	080083b1 	.word	0x080083b1
 800834c:	080083b1 	.word	0x080083b1
 8008350:	080083b1 	.word	0x080083b1
 8008354:	080083b1 	.word	0x080083b1
 8008358:	080083b1 	.word	0x080083b1
 800835c:	080083a1 	.word	0x080083a1
 8008360:	080083b1 	.word	0x080083b1
 8008364:	080083b1 	.word	0x080083b1
 8008368:	080083b1 	.word	0x080083b1
 800836c:	080083b1 	.word	0x080083b1
 8008370:	080083b1 	.word	0x080083b1
 8008374:	080083b1 	.word	0x080083b1
 8008378:	080083b1 	.word	0x080083b1
 800837c:	080083a9 	.word	0x080083a9
 8008380:	2301      	movs	r3, #1
 8008382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008386:	e0d6      	b.n	8008536 <UART_SetConfig+0x7ae>
 8008388:	2304      	movs	r3, #4
 800838a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800838e:	e0d2      	b.n	8008536 <UART_SetConfig+0x7ae>
 8008390:	2308      	movs	r3, #8
 8008392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008396:	e0ce      	b.n	8008536 <UART_SetConfig+0x7ae>
 8008398:	2310      	movs	r3, #16
 800839a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800839e:	e0ca      	b.n	8008536 <UART_SetConfig+0x7ae>
 80083a0:	2320      	movs	r3, #32
 80083a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083a6:	e0c6      	b.n	8008536 <UART_SetConfig+0x7ae>
 80083a8:	2340      	movs	r3, #64	@ 0x40
 80083aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ae:	e0c2      	b.n	8008536 <UART_SetConfig+0x7ae>
 80083b0:	2380      	movs	r3, #128	@ 0x80
 80083b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083b6:	e0be      	b.n	8008536 <UART_SetConfig+0x7ae>
 80083b8:	40011400 	.word	0x40011400
 80083bc:	58024400 	.word	0x58024400
 80083c0:	40007800 	.word	0x40007800
 80083c4:	40007c00 	.word	0x40007c00
 80083c8:	40011800 	.word	0x40011800
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4aad      	ldr	r2, [pc, #692]	@ (8008688 <UART_SetConfig+0x900>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d176      	bne.n	80084c4 <UART_SetConfig+0x73c>
 80083d6:	4bad      	ldr	r3, [pc, #692]	@ (800868c <UART_SetConfig+0x904>)
 80083d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80083de:	2b28      	cmp	r3, #40	@ 0x28
 80083e0:	d86c      	bhi.n	80084bc <UART_SetConfig+0x734>
 80083e2:	a201      	add	r2, pc, #4	@ (adr r2, 80083e8 <UART_SetConfig+0x660>)
 80083e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e8:	0800848d 	.word	0x0800848d
 80083ec:	080084bd 	.word	0x080084bd
 80083f0:	080084bd 	.word	0x080084bd
 80083f4:	080084bd 	.word	0x080084bd
 80083f8:	080084bd 	.word	0x080084bd
 80083fc:	080084bd 	.word	0x080084bd
 8008400:	080084bd 	.word	0x080084bd
 8008404:	080084bd 	.word	0x080084bd
 8008408:	08008495 	.word	0x08008495
 800840c:	080084bd 	.word	0x080084bd
 8008410:	080084bd 	.word	0x080084bd
 8008414:	080084bd 	.word	0x080084bd
 8008418:	080084bd 	.word	0x080084bd
 800841c:	080084bd 	.word	0x080084bd
 8008420:	080084bd 	.word	0x080084bd
 8008424:	080084bd 	.word	0x080084bd
 8008428:	0800849d 	.word	0x0800849d
 800842c:	080084bd 	.word	0x080084bd
 8008430:	080084bd 	.word	0x080084bd
 8008434:	080084bd 	.word	0x080084bd
 8008438:	080084bd 	.word	0x080084bd
 800843c:	080084bd 	.word	0x080084bd
 8008440:	080084bd 	.word	0x080084bd
 8008444:	080084bd 	.word	0x080084bd
 8008448:	080084a5 	.word	0x080084a5
 800844c:	080084bd 	.word	0x080084bd
 8008450:	080084bd 	.word	0x080084bd
 8008454:	080084bd 	.word	0x080084bd
 8008458:	080084bd 	.word	0x080084bd
 800845c:	080084bd 	.word	0x080084bd
 8008460:	080084bd 	.word	0x080084bd
 8008464:	080084bd 	.word	0x080084bd
 8008468:	080084ad 	.word	0x080084ad
 800846c:	080084bd 	.word	0x080084bd
 8008470:	080084bd 	.word	0x080084bd
 8008474:	080084bd 	.word	0x080084bd
 8008478:	080084bd 	.word	0x080084bd
 800847c:	080084bd 	.word	0x080084bd
 8008480:	080084bd 	.word	0x080084bd
 8008484:	080084bd 	.word	0x080084bd
 8008488:	080084b5 	.word	0x080084b5
 800848c:	2301      	movs	r3, #1
 800848e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008492:	e050      	b.n	8008536 <UART_SetConfig+0x7ae>
 8008494:	2304      	movs	r3, #4
 8008496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800849a:	e04c      	b.n	8008536 <UART_SetConfig+0x7ae>
 800849c:	2308      	movs	r3, #8
 800849e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084a2:	e048      	b.n	8008536 <UART_SetConfig+0x7ae>
 80084a4:	2310      	movs	r3, #16
 80084a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084aa:	e044      	b.n	8008536 <UART_SetConfig+0x7ae>
 80084ac:	2320      	movs	r3, #32
 80084ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084b2:	e040      	b.n	8008536 <UART_SetConfig+0x7ae>
 80084b4:	2340      	movs	r3, #64	@ 0x40
 80084b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ba:	e03c      	b.n	8008536 <UART_SetConfig+0x7ae>
 80084bc:	2380      	movs	r3, #128	@ 0x80
 80084be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084c2:	e038      	b.n	8008536 <UART_SetConfig+0x7ae>
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a71      	ldr	r2, [pc, #452]	@ (8008690 <UART_SetConfig+0x908>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d130      	bne.n	8008530 <UART_SetConfig+0x7a8>
 80084ce:	4b6f      	ldr	r3, [pc, #444]	@ (800868c <UART_SetConfig+0x904>)
 80084d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084d2:	f003 0307 	and.w	r3, r3, #7
 80084d6:	2b05      	cmp	r3, #5
 80084d8:	d826      	bhi.n	8008528 <UART_SetConfig+0x7a0>
 80084da:	a201      	add	r2, pc, #4	@ (adr r2, 80084e0 <UART_SetConfig+0x758>)
 80084dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e0:	080084f9 	.word	0x080084f9
 80084e4:	08008501 	.word	0x08008501
 80084e8:	08008509 	.word	0x08008509
 80084ec:	08008511 	.word	0x08008511
 80084f0:	08008519 	.word	0x08008519
 80084f4:	08008521 	.word	0x08008521
 80084f8:	2302      	movs	r3, #2
 80084fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084fe:	e01a      	b.n	8008536 <UART_SetConfig+0x7ae>
 8008500:	2304      	movs	r3, #4
 8008502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008506:	e016      	b.n	8008536 <UART_SetConfig+0x7ae>
 8008508:	2308      	movs	r3, #8
 800850a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800850e:	e012      	b.n	8008536 <UART_SetConfig+0x7ae>
 8008510:	2310      	movs	r3, #16
 8008512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008516:	e00e      	b.n	8008536 <UART_SetConfig+0x7ae>
 8008518:	2320      	movs	r3, #32
 800851a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800851e:	e00a      	b.n	8008536 <UART_SetConfig+0x7ae>
 8008520:	2340      	movs	r3, #64	@ 0x40
 8008522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008526:	e006      	b.n	8008536 <UART_SetConfig+0x7ae>
 8008528:	2380      	movs	r3, #128	@ 0x80
 800852a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800852e:	e002      	b.n	8008536 <UART_SetConfig+0x7ae>
 8008530:	2380      	movs	r3, #128	@ 0x80
 8008532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a55      	ldr	r2, [pc, #340]	@ (8008690 <UART_SetConfig+0x908>)
 800853c:	4293      	cmp	r3, r2
 800853e:	f040 80f8 	bne.w	8008732 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008542:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008546:	2b20      	cmp	r3, #32
 8008548:	dc46      	bgt.n	80085d8 <UART_SetConfig+0x850>
 800854a:	2b02      	cmp	r3, #2
 800854c:	db75      	blt.n	800863a <UART_SetConfig+0x8b2>
 800854e:	3b02      	subs	r3, #2
 8008550:	2b1e      	cmp	r3, #30
 8008552:	d872      	bhi.n	800863a <UART_SetConfig+0x8b2>
 8008554:	a201      	add	r2, pc, #4	@ (adr r2, 800855c <UART_SetConfig+0x7d4>)
 8008556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855a:	bf00      	nop
 800855c:	080085df 	.word	0x080085df
 8008560:	0800863b 	.word	0x0800863b
 8008564:	080085e7 	.word	0x080085e7
 8008568:	0800863b 	.word	0x0800863b
 800856c:	0800863b 	.word	0x0800863b
 8008570:	0800863b 	.word	0x0800863b
 8008574:	080085f7 	.word	0x080085f7
 8008578:	0800863b 	.word	0x0800863b
 800857c:	0800863b 	.word	0x0800863b
 8008580:	0800863b 	.word	0x0800863b
 8008584:	0800863b 	.word	0x0800863b
 8008588:	0800863b 	.word	0x0800863b
 800858c:	0800863b 	.word	0x0800863b
 8008590:	0800863b 	.word	0x0800863b
 8008594:	08008607 	.word	0x08008607
 8008598:	0800863b 	.word	0x0800863b
 800859c:	0800863b 	.word	0x0800863b
 80085a0:	0800863b 	.word	0x0800863b
 80085a4:	0800863b 	.word	0x0800863b
 80085a8:	0800863b 	.word	0x0800863b
 80085ac:	0800863b 	.word	0x0800863b
 80085b0:	0800863b 	.word	0x0800863b
 80085b4:	0800863b 	.word	0x0800863b
 80085b8:	0800863b 	.word	0x0800863b
 80085bc:	0800863b 	.word	0x0800863b
 80085c0:	0800863b 	.word	0x0800863b
 80085c4:	0800863b 	.word	0x0800863b
 80085c8:	0800863b 	.word	0x0800863b
 80085cc:	0800863b 	.word	0x0800863b
 80085d0:	0800863b 	.word	0x0800863b
 80085d4:	0800862d 	.word	0x0800862d
 80085d8:	2b40      	cmp	r3, #64	@ 0x40
 80085da:	d02a      	beq.n	8008632 <UART_SetConfig+0x8aa>
 80085dc:	e02d      	b.n	800863a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80085de:	f7fe fdd5 	bl	800718c <HAL_RCCEx_GetD3PCLK1Freq>
 80085e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80085e4:	e02f      	b.n	8008646 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7fe fde4 	bl	80071b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80085f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085f4:	e027      	b.n	8008646 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085f6:	f107 0318 	add.w	r3, r7, #24
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7fe ff30 	bl	8007460 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008604:	e01f      	b.n	8008646 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008606:	4b21      	ldr	r3, [pc, #132]	@ (800868c <UART_SetConfig+0x904>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f003 0320 	and.w	r3, r3, #32
 800860e:	2b00      	cmp	r3, #0
 8008610:	d009      	beq.n	8008626 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008612:	4b1e      	ldr	r3, [pc, #120]	@ (800868c <UART_SetConfig+0x904>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	08db      	lsrs	r3, r3, #3
 8008618:	f003 0303 	and.w	r3, r3, #3
 800861c:	4a1d      	ldr	r2, [pc, #116]	@ (8008694 <UART_SetConfig+0x90c>)
 800861e:	fa22 f303 	lsr.w	r3, r2, r3
 8008622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008624:	e00f      	b.n	8008646 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008626:	4b1b      	ldr	r3, [pc, #108]	@ (8008694 <UART_SetConfig+0x90c>)
 8008628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800862a:	e00c      	b.n	8008646 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800862c:	4b1a      	ldr	r3, [pc, #104]	@ (8008698 <UART_SetConfig+0x910>)
 800862e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008630:	e009      	b.n	8008646 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008632:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008638:	e005      	b.n	8008646 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800863a:	2300      	movs	r3, #0
 800863c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008644:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008648:	2b00      	cmp	r3, #0
 800864a:	f000 81ee 	beq.w	8008a2a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008652:	4a12      	ldr	r2, [pc, #72]	@ (800869c <UART_SetConfig+0x914>)
 8008654:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008658:	461a      	mov	r2, r3
 800865a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800865c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008660:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	685a      	ldr	r2, [r3, #4]
 8008666:	4613      	mov	r3, r2
 8008668:	005b      	lsls	r3, r3, #1
 800866a:	4413      	add	r3, r2
 800866c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800866e:	429a      	cmp	r2, r3
 8008670:	d305      	bcc.n	800867e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008678:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800867a:	429a      	cmp	r2, r3
 800867c:	d910      	bls.n	80086a0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008684:	e1d1      	b.n	8008a2a <UART_SetConfig+0xca2>
 8008686:	bf00      	nop
 8008688:	40011c00 	.word	0x40011c00
 800868c:	58024400 	.word	0x58024400
 8008690:	58000c00 	.word	0x58000c00
 8008694:	03d09000 	.word	0x03d09000
 8008698:	003d0900 	.word	0x003d0900
 800869c:	080095bc 	.word	0x080095bc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086a2:	2200      	movs	r2, #0
 80086a4:	60bb      	str	r3, [r7, #8]
 80086a6:	60fa      	str	r2, [r7, #12]
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ac:	4ac0      	ldr	r2, [pc, #768]	@ (80089b0 <UART_SetConfig+0xc28>)
 80086ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	2200      	movs	r2, #0
 80086b6:	603b      	str	r3, [r7, #0]
 80086b8:	607a      	str	r2, [r7, #4]
 80086ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80086c2:	f7f7 fe23 	bl	800030c <__aeabi_uldivmod>
 80086c6:	4602      	mov	r2, r0
 80086c8:	460b      	mov	r3, r1
 80086ca:	4610      	mov	r0, r2
 80086cc:	4619      	mov	r1, r3
 80086ce:	f04f 0200 	mov.w	r2, #0
 80086d2:	f04f 0300 	mov.w	r3, #0
 80086d6:	020b      	lsls	r3, r1, #8
 80086d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80086dc:	0202      	lsls	r2, r0, #8
 80086de:	6979      	ldr	r1, [r7, #20]
 80086e0:	6849      	ldr	r1, [r1, #4]
 80086e2:	0849      	lsrs	r1, r1, #1
 80086e4:	2000      	movs	r0, #0
 80086e6:	460c      	mov	r4, r1
 80086e8:	4605      	mov	r5, r0
 80086ea:	eb12 0804 	adds.w	r8, r2, r4
 80086ee:	eb43 0905 	adc.w	r9, r3, r5
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	469a      	mov	sl, r3
 80086fa:	4693      	mov	fp, r2
 80086fc:	4652      	mov	r2, sl
 80086fe:	465b      	mov	r3, fp
 8008700:	4640      	mov	r0, r8
 8008702:	4649      	mov	r1, r9
 8008704:	f7f7 fe02 	bl	800030c <__aeabi_uldivmod>
 8008708:	4602      	mov	r2, r0
 800870a:	460b      	mov	r3, r1
 800870c:	4613      	mov	r3, r2
 800870e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008712:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008716:	d308      	bcc.n	800872a <UART_SetConfig+0x9a2>
 8008718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800871a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800871e:	d204      	bcs.n	800872a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008726:	60da      	str	r2, [r3, #12]
 8008728:	e17f      	b.n	8008a2a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008730:	e17b      	b.n	8008a2a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	69db      	ldr	r3, [r3, #28]
 8008736:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800873a:	f040 80bd 	bne.w	80088b8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800873e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008742:	2b20      	cmp	r3, #32
 8008744:	dc48      	bgt.n	80087d8 <UART_SetConfig+0xa50>
 8008746:	2b00      	cmp	r3, #0
 8008748:	db7b      	blt.n	8008842 <UART_SetConfig+0xaba>
 800874a:	2b20      	cmp	r3, #32
 800874c:	d879      	bhi.n	8008842 <UART_SetConfig+0xaba>
 800874e:	a201      	add	r2, pc, #4	@ (adr r2, 8008754 <UART_SetConfig+0x9cc>)
 8008750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008754:	080087df 	.word	0x080087df
 8008758:	080087e7 	.word	0x080087e7
 800875c:	08008843 	.word	0x08008843
 8008760:	08008843 	.word	0x08008843
 8008764:	080087ef 	.word	0x080087ef
 8008768:	08008843 	.word	0x08008843
 800876c:	08008843 	.word	0x08008843
 8008770:	08008843 	.word	0x08008843
 8008774:	080087ff 	.word	0x080087ff
 8008778:	08008843 	.word	0x08008843
 800877c:	08008843 	.word	0x08008843
 8008780:	08008843 	.word	0x08008843
 8008784:	08008843 	.word	0x08008843
 8008788:	08008843 	.word	0x08008843
 800878c:	08008843 	.word	0x08008843
 8008790:	08008843 	.word	0x08008843
 8008794:	0800880f 	.word	0x0800880f
 8008798:	08008843 	.word	0x08008843
 800879c:	08008843 	.word	0x08008843
 80087a0:	08008843 	.word	0x08008843
 80087a4:	08008843 	.word	0x08008843
 80087a8:	08008843 	.word	0x08008843
 80087ac:	08008843 	.word	0x08008843
 80087b0:	08008843 	.word	0x08008843
 80087b4:	08008843 	.word	0x08008843
 80087b8:	08008843 	.word	0x08008843
 80087bc:	08008843 	.word	0x08008843
 80087c0:	08008843 	.word	0x08008843
 80087c4:	08008843 	.word	0x08008843
 80087c8:	08008843 	.word	0x08008843
 80087cc:	08008843 	.word	0x08008843
 80087d0:	08008843 	.word	0x08008843
 80087d4:	08008835 	.word	0x08008835
 80087d8:	2b40      	cmp	r3, #64	@ 0x40
 80087da:	d02e      	beq.n	800883a <UART_SetConfig+0xab2>
 80087dc:	e031      	b.n	8008842 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087de:	f7fd fb09 	bl	8005df4 <HAL_RCC_GetPCLK1Freq>
 80087e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80087e4:	e033      	b.n	800884e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087e6:	f7fd fb1b 	bl	8005e20 <HAL_RCC_GetPCLK2Freq>
 80087ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80087ec:	e02f      	b.n	800884e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7fe fce0 	bl	80071b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80087f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087fc:	e027      	b.n	800884e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087fe:	f107 0318 	add.w	r3, r7, #24
 8008802:	4618      	mov	r0, r3
 8008804:	f7fe fe2c 	bl	8007460 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800880c:	e01f      	b.n	800884e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800880e:	4b69      	ldr	r3, [pc, #420]	@ (80089b4 <UART_SetConfig+0xc2c>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f003 0320 	and.w	r3, r3, #32
 8008816:	2b00      	cmp	r3, #0
 8008818:	d009      	beq.n	800882e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800881a:	4b66      	ldr	r3, [pc, #408]	@ (80089b4 <UART_SetConfig+0xc2c>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	08db      	lsrs	r3, r3, #3
 8008820:	f003 0303 	and.w	r3, r3, #3
 8008824:	4a64      	ldr	r2, [pc, #400]	@ (80089b8 <UART_SetConfig+0xc30>)
 8008826:	fa22 f303 	lsr.w	r3, r2, r3
 800882a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800882c:	e00f      	b.n	800884e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800882e:	4b62      	ldr	r3, [pc, #392]	@ (80089b8 <UART_SetConfig+0xc30>)
 8008830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008832:	e00c      	b.n	800884e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008834:	4b61      	ldr	r3, [pc, #388]	@ (80089bc <UART_SetConfig+0xc34>)
 8008836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008838:	e009      	b.n	800884e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800883a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800883e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008840:	e005      	b.n	800884e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008842:	2300      	movs	r3, #0
 8008844:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800884c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800884e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008850:	2b00      	cmp	r3, #0
 8008852:	f000 80ea 	beq.w	8008a2a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800885a:	4a55      	ldr	r2, [pc, #340]	@ (80089b0 <UART_SetConfig+0xc28>)
 800885c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008860:	461a      	mov	r2, r3
 8008862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008864:	fbb3 f3f2 	udiv	r3, r3, r2
 8008868:	005a      	lsls	r2, r3, #1
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	085b      	lsrs	r3, r3, #1
 8008870:	441a      	add	r2, r3
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	fbb2 f3f3 	udiv	r3, r2, r3
 800887a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800887c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800887e:	2b0f      	cmp	r3, #15
 8008880:	d916      	bls.n	80088b0 <UART_SetConfig+0xb28>
 8008882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008884:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008888:	d212      	bcs.n	80088b0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800888a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800888c:	b29b      	uxth	r3, r3
 800888e:	f023 030f 	bic.w	r3, r3, #15
 8008892:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008896:	085b      	lsrs	r3, r3, #1
 8008898:	b29b      	uxth	r3, r3
 800889a:	f003 0307 	and.w	r3, r3, #7
 800889e:	b29a      	uxth	r2, r3
 80088a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80088a2:	4313      	orrs	r3, r2
 80088a4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80088ac:	60da      	str	r2, [r3, #12]
 80088ae:	e0bc      	b.n	8008a2a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80088b6:	e0b8      	b.n	8008a2a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80088b8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80088bc:	2b20      	cmp	r3, #32
 80088be:	dc4b      	bgt.n	8008958 <UART_SetConfig+0xbd0>
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	f2c0 8087 	blt.w	80089d4 <UART_SetConfig+0xc4c>
 80088c6:	2b20      	cmp	r3, #32
 80088c8:	f200 8084 	bhi.w	80089d4 <UART_SetConfig+0xc4c>
 80088cc:	a201      	add	r2, pc, #4	@ (adr r2, 80088d4 <UART_SetConfig+0xb4c>)
 80088ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d2:	bf00      	nop
 80088d4:	0800895f 	.word	0x0800895f
 80088d8:	08008967 	.word	0x08008967
 80088dc:	080089d5 	.word	0x080089d5
 80088e0:	080089d5 	.word	0x080089d5
 80088e4:	0800896f 	.word	0x0800896f
 80088e8:	080089d5 	.word	0x080089d5
 80088ec:	080089d5 	.word	0x080089d5
 80088f0:	080089d5 	.word	0x080089d5
 80088f4:	0800897f 	.word	0x0800897f
 80088f8:	080089d5 	.word	0x080089d5
 80088fc:	080089d5 	.word	0x080089d5
 8008900:	080089d5 	.word	0x080089d5
 8008904:	080089d5 	.word	0x080089d5
 8008908:	080089d5 	.word	0x080089d5
 800890c:	080089d5 	.word	0x080089d5
 8008910:	080089d5 	.word	0x080089d5
 8008914:	0800898f 	.word	0x0800898f
 8008918:	080089d5 	.word	0x080089d5
 800891c:	080089d5 	.word	0x080089d5
 8008920:	080089d5 	.word	0x080089d5
 8008924:	080089d5 	.word	0x080089d5
 8008928:	080089d5 	.word	0x080089d5
 800892c:	080089d5 	.word	0x080089d5
 8008930:	080089d5 	.word	0x080089d5
 8008934:	080089d5 	.word	0x080089d5
 8008938:	080089d5 	.word	0x080089d5
 800893c:	080089d5 	.word	0x080089d5
 8008940:	080089d5 	.word	0x080089d5
 8008944:	080089d5 	.word	0x080089d5
 8008948:	080089d5 	.word	0x080089d5
 800894c:	080089d5 	.word	0x080089d5
 8008950:	080089d5 	.word	0x080089d5
 8008954:	080089c7 	.word	0x080089c7
 8008958:	2b40      	cmp	r3, #64	@ 0x40
 800895a:	d037      	beq.n	80089cc <UART_SetConfig+0xc44>
 800895c:	e03a      	b.n	80089d4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800895e:	f7fd fa49 	bl	8005df4 <HAL_RCC_GetPCLK1Freq>
 8008962:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008964:	e03c      	b.n	80089e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008966:	f7fd fa5b 	bl	8005e20 <HAL_RCC_GetPCLK2Freq>
 800896a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800896c:	e038      	b.n	80089e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800896e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008972:	4618      	mov	r0, r3
 8008974:	f7fe fc20 	bl	80071b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800897a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800897c:	e030      	b.n	80089e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800897e:	f107 0318 	add.w	r3, r7, #24
 8008982:	4618      	mov	r0, r3
 8008984:	f7fe fd6c 	bl	8007460 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800898c:	e028      	b.n	80089e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800898e:	4b09      	ldr	r3, [pc, #36]	@ (80089b4 <UART_SetConfig+0xc2c>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f003 0320 	and.w	r3, r3, #32
 8008996:	2b00      	cmp	r3, #0
 8008998:	d012      	beq.n	80089c0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800899a:	4b06      	ldr	r3, [pc, #24]	@ (80089b4 <UART_SetConfig+0xc2c>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	08db      	lsrs	r3, r3, #3
 80089a0:	f003 0303 	and.w	r3, r3, #3
 80089a4:	4a04      	ldr	r2, [pc, #16]	@ (80089b8 <UART_SetConfig+0xc30>)
 80089a6:	fa22 f303 	lsr.w	r3, r2, r3
 80089aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80089ac:	e018      	b.n	80089e0 <UART_SetConfig+0xc58>
 80089ae:	bf00      	nop
 80089b0:	080095bc 	.word	0x080095bc
 80089b4:	58024400 	.word	0x58024400
 80089b8:	03d09000 	.word	0x03d09000
 80089bc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80089c0:	4b24      	ldr	r3, [pc, #144]	@ (8008a54 <UART_SetConfig+0xccc>)
 80089c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089c4:	e00c      	b.n	80089e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80089c6:	4b24      	ldr	r3, [pc, #144]	@ (8008a58 <UART_SetConfig+0xcd0>)
 80089c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089ca:	e009      	b.n	80089e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089d2:	e005      	b.n	80089e0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80089d4:	2300      	movs	r3, #0
 80089d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80089de:	bf00      	nop
    }

    if (pclk != 0U)
 80089e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d021      	beq.n	8008a2a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ea:	4a1c      	ldr	r2, [pc, #112]	@ (8008a5c <UART_SetConfig+0xcd4>)
 80089ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089f0:	461a      	mov	r2, r3
 80089f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089f4:	fbb3 f2f2 	udiv	r2, r3, r2
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	085b      	lsrs	r3, r3, #1
 80089fe:	441a      	add	r2, r3
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a08:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a0c:	2b0f      	cmp	r3, #15
 8008a0e:	d909      	bls.n	8008a24 <UART_SetConfig+0xc9c>
 8008a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a16:	d205      	bcs.n	8008a24 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a1a:	b29a      	uxth	r2, r3
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	60da      	str	r2, [r3, #12]
 8008a22:	e002      	b.n	8008a2a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	2201      	movs	r2, #1
 8008a36:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	2200      	movs	r2, #0
 8008a44:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008a46:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3748      	adds	r7, #72	@ 0x48
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a54:	03d09000 	.word	0x03d09000
 8008a58:	003d0900 	.word	0x003d0900
 8008a5c:	080095bc 	.word	0x080095bc

08008a60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a6c:	f003 0308 	and.w	r3, r3, #8
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d00a      	beq.n	8008a8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	430a      	orrs	r2, r1
 8008a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a8e:	f003 0301 	and.w	r3, r3, #1
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00a      	beq.n	8008aac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	430a      	orrs	r2, r1
 8008aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ab0:	f003 0302 	and.w	r3, r3, #2
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d00a      	beq.n	8008ace <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	430a      	orrs	r2, r1
 8008acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ad2:	f003 0304 	and.w	r3, r3, #4
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00a      	beq.n	8008af0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	430a      	orrs	r2, r1
 8008aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008af4:	f003 0310 	and.w	r3, r3, #16
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d00a      	beq.n	8008b12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	430a      	orrs	r2, r1
 8008b10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b16:	f003 0320 	and.w	r3, r3, #32
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00a      	beq.n	8008b34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	430a      	orrs	r2, r1
 8008b32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d01a      	beq.n	8008b76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	430a      	orrs	r2, r1
 8008b54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b5e:	d10a      	bne.n	8008b76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	430a      	orrs	r2, r1
 8008b74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00a      	beq.n	8008b98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	430a      	orrs	r2, r1
 8008b96:	605a      	str	r2, [r3, #4]
  }
}
 8008b98:	bf00      	nop
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b098      	sub	sp, #96	@ 0x60
 8008ba8:	af02      	add	r7, sp, #8
 8008baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008bb4:	f7f8 fe86 	bl	80018c4 <HAL_GetTick>
 8008bb8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f003 0308 	and.w	r3, r3, #8
 8008bc4:	2b08      	cmp	r3, #8
 8008bc6:	d12f      	bne.n	8008c28 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bc8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008bcc:	9300      	str	r3, [sp, #0]
 8008bce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 f88e 	bl	8008cf8 <UART_WaitOnFlagUntilTimeout>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d022      	beq.n	8008c28 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bea:	e853 3f00 	ldrex	r3, [r3]
 8008bee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bf6:	653b      	str	r3, [r7, #80]	@ 0x50
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c00:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c02:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c08:	e841 2300 	strex	r3, r2, [r1]
 8008c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1e6      	bne.n	8008be2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2220      	movs	r2, #32
 8008c18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c24:	2303      	movs	r3, #3
 8008c26:	e063      	b.n	8008cf0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f003 0304 	and.w	r3, r3, #4
 8008c32:	2b04      	cmp	r3, #4
 8008c34:	d149      	bne.n	8008cca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c36:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008c3a:	9300      	str	r3, [sp, #0]
 8008c3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 f857 	bl	8008cf8 <UART_WaitOnFlagUntilTimeout>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d03c      	beq.n	8008cca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c58:	e853 3f00 	ldrex	r3, [r3]
 8008c5c:	623b      	str	r3, [r7, #32]
   return(result);
 8008c5e:	6a3b      	ldr	r3, [r7, #32]
 8008c60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c70:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c76:	e841 2300 	strex	r3, r2, [r1]
 8008c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d1e6      	bne.n	8008c50 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	3308      	adds	r3, #8
 8008c88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	e853 3f00 	ldrex	r3, [r3]
 8008c90:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f023 0301 	bic.w	r3, r3, #1
 8008c98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	3308      	adds	r3, #8
 8008ca0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ca2:	61fa      	str	r2, [r7, #28]
 8008ca4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca6:	69b9      	ldr	r1, [r7, #24]
 8008ca8:	69fa      	ldr	r2, [r7, #28]
 8008caa:	e841 2300 	strex	r3, r2, [r1]
 8008cae:	617b      	str	r3, [r7, #20]
   return(result);
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d1e5      	bne.n	8008c82 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2220      	movs	r2, #32
 8008cba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cc6:	2303      	movs	r3, #3
 8008cc8:	e012      	b.n	8008cf0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2220      	movs	r2, #32
 8008cce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2220      	movs	r2, #32
 8008cd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008cee:	2300      	movs	r3, #0
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3758      	adds	r7, #88	@ 0x58
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	603b      	str	r3, [r7, #0]
 8008d04:	4613      	mov	r3, r2
 8008d06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d08:	e04f      	b.n	8008daa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d10:	d04b      	beq.n	8008daa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d12:	f7f8 fdd7 	bl	80018c4 <HAL_GetTick>
 8008d16:	4602      	mov	r2, r0
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	1ad3      	subs	r3, r2, r3
 8008d1c:	69ba      	ldr	r2, [r7, #24]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d302      	bcc.n	8008d28 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d22:	69bb      	ldr	r3, [r7, #24]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d101      	bne.n	8008d2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008d28:	2303      	movs	r3, #3
 8008d2a:	e04e      	b.n	8008dca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f003 0304 	and.w	r3, r3, #4
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d037      	beq.n	8008daa <UART_WaitOnFlagUntilTimeout+0xb2>
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	2b80      	cmp	r3, #128	@ 0x80
 8008d3e:	d034      	beq.n	8008daa <UART_WaitOnFlagUntilTimeout+0xb2>
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	2b40      	cmp	r3, #64	@ 0x40
 8008d44:	d031      	beq.n	8008daa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	69db      	ldr	r3, [r3, #28]
 8008d4c:	f003 0308 	and.w	r3, r3, #8
 8008d50:	2b08      	cmp	r3, #8
 8008d52:	d110      	bne.n	8008d76 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2208      	movs	r2, #8
 8008d5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	f000 f921 	bl	8008fa4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2208      	movs	r2, #8
 8008d66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e029      	b.n	8008dca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	69db      	ldr	r3, [r3, #28]
 8008d7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d84:	d111      	bne.n	8008daa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008d8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f000 f907 	bl	8008fa4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2220      	movs	r2, #32
 8008d9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2200      	movs	r2, #0
 8008da2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008da6:	2303      	movs	r3, #3
 8008da8:	e00f      	b.n	8008dca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	69da      	ldr	r2, [r3, #28]
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	4013      	ands	r3, r2
 8008db4:	68ba      	ldr	r2, [r7, #8]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	bf0c      	ite	eq
 8008dba:	2301      	moveq	r3, #1
 8008dbc:	2300      	movne	r3, #0
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	79fb      	ldrb	r3, [r7, #7]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d0a0      	beq.n	8008d0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
	...

08008dd4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b096      	sub	sp, #88	@ 0x58
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	4613      	mov	r3, r2
 8008de0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	68ba      	ldr	r2, [r7, #8]
 8008de6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	88fa      	ldrh	r2, [r7, #6]
 8008dec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2222      	movs	r2, #34	@ 0x22
 8008dfc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d02d      	beq.n	8008e66 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e10:	4a40      	ldr	r2, [pc, #256]	@ (8008f14 <UART_Start_Receive_DMA+0x140>)
 8008e12:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e1a:	4a3f      	ldr	r2, [pc, #252]	@ (8008f18 <UART_Start_Receive_DMA+0x144>)
 8008e1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e24:	4a3d      	ldr	r2, [pc, #244]	@ (8008f1c <UART_Start_Receive_DMA+0x148>)
 8008e26:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e2e:	2200      	movs	r2, #0
 8008e30:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	3324      	adds	r3, #36	@ 0x24
 8008e3e:	4619      	mov	r1, r3
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e44:	461a      	mov	r2, r3
 8008e46:	88fb      	ldrh	r3, [r7, #6]
 8008e48:	f7f9 f9c4 	bl	80021d4 <HAL_DMA_Start_IT>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d009      	beq.n	8008e66 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2210      	movs	r2, #16
 8008e56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2220      	movs	r2, #32
 8008e5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	e051      	b.n	8008f0a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d018      	beq.n	8008ea0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e76:	e853 3f00 	ldrex	r3, [r3]
 8008e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e82:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	461a      	mov	r2, r3
 8008e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e8e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e90:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008e92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e94:	e841 2300 	strex	r3, r2, [r1]
 8008e98:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008e9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d1e6      	bne.n	8008e6e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	3308      	adds	r3, #8
 8008ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eaa:	e853 3f00 	ldrex	r3, [r3]
 8008eae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb2:	f043 0301 	orr.w	r3, r3, #1
 8008eb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	3308      	adds	r3, #8
 8008ebe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008ec0:	637a      	str	r2, [r7, #52]	@ 0x34
 8008ec2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008ec6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ec8:	e841 2300 	strex	r3, r2, [r1]
 8008ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1e5      	bne.n	8008ea0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	3308      	adds	r3, #8
 8008eda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	e853 3f00 	ldrex	r3, [r3]
 8008ee2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	3308      	adds	r3, #8
 8008ef2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008ef4:	623a      	str	r2, [r7, #32]
 8008ef6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef8:	69f9      	ldr	r1, [r7, #28]
 8008efa:	6a3a      	ldr	r2, [r7, #32]
 8008efc:	e841 2300 	strex	r3, r2, [r1]
 8008f00:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d1e5      	bne.n	8008ed4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3758      	adds	r7, #88	@ 0x58
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	08009123 	.word	0x08009123
 8008f18:	0800924b 	.word	0x0800924b
 8008f1c:	08009289 	.word	0x08009289

08008f20 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b08f      	sub	sp, #60	@ 0x3c
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2e:	6a3b      	ldr	r3, [r7, #32]
 8008f30:	e853 3f00 	ldrex	r3, [r3]
 8008f34:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f36:	69fb      	ldr	r3, [r7, #28]
 8008f38:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008f3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	461a      	mov	r2, r3
 8008f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f48:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f4e:	e841 2300 	strex	r3, r2, [r1]
 8008f52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d1e6      	bne.n	8008f28 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	3308      	adds	r3, #8
 8008f60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	e853 3f00 	ldrex	r3, [r3]
 8008f68:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008f70:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	3308      	adds	r3, #8
 8008f78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f7a:	61ba      	str	r2, [r7, #24]
 8008f7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7e:	6979      	ldr	r1, [r7, #20]
 8008f80:	69ba      	ldr	r2, [r7, #24]
 8008f82:	e841 2300 	strex	r3, r2, [r1]
 8008f86:	613b      	str	r3, [r7, #16]
   return(result);
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d1e5      	bne.n	8008f5a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2220      	movs	r2, #32
 8008f92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008f96:	bf00      	nop
 8008f98:	373c      	adds	r7, #60	@ 0x3c
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr
	...

08008fa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b095      	sub	sp, #84	@ 0x54
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fb4:	e853 3f00 	ldrex	r3, [r3]
 8008fb8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fca:	643b      	str	r3, [r7, #64]	@ 0x40
 8008fcc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008fd0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008fd2:	e841 2300 	strex	r3, r2, [r1]
 8008fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d1e6      	bne.n	8008fac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	3308      	adds	r3, #8
 8008fe4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe6:	6a3b      	ldr	r3, [r7, #32]
 8008fe8:	e853 3f00 	ldrex	r3, [r3]
 8008fec:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fee:	69fa      	ldr	r2, [r7, #28]
 8008ff0:	4b1e      	ldr	r3, [pc, #120]	@ (800906c <UART_EndRxTransfer+0xc8>)
 8008ff2:	4013      	ands	r3, r2
 8008ff4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	3308      	adds	r3, #8
 8008ffc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ffe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009000:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009002:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009004:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009006:	e841 2300 	strex	r3, r2, [r1]
 800900a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800900c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800900e:	2b00      	cmp	r3, #0
 8009010:	d1e5      	bne.n	8008fde <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009016:	2b01      	cmp	r3, #1
 8009018:	d118      	bne.n	800904c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	e853 3f00 	ldrex	r3, [r3]
 8009026:	60bb      	str	r3, [r7, #8]
   return(result);
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	f023 0310 	bic.w	r3, r3, #16
 800902e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	461a      	mov	r2, r3
 8009036:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009038:	61bb      	str	r3, [r7, #24]
 800903a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903c:	6979      	ldr	r1, [r7, #20]
 800903e:	69ba      	ldr	r2, [r7, #24]
 8009040:	e841 2300 	strex	r3, r2, [r1]
 8009044:	613b      	str	r3, [r7, #16]
   return(result);
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d1e6      	bne.n	800901a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2220      	movs	r2, #32
 8009050:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009060:	bf00      	nop
 8009062:	3754      	adds	r7, #84	@ 0x54
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr
 800906c:	effffffe 	.word	0xeffffffe

08009070 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b090      	sub	sp, #64	@ 0x40
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800907c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	69db      	ldr	r3, [r3, #28]
 8009082:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009086:	d037      	beq.n	80090f8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8009088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800908a:	2200      	movs	r2, #0
 800908c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	3308      	adds	r3, #8
 8009096:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800909a:	e853 3f00 	ldrex	r3, [r3]
 800909e:	623b      	str	r3, [r7, #32]
   return(result);
 80090a0:	6a3b      	ldr	r3, [r7, #32]
 80090a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80090a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	3308      	adds	r3, #8
 80090ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80090b0:	633a      	str	r2, [r7, #48]	@ 0x30
 80090b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80090b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090b8:	e841 2300 	strex	r3, r2, [r1]
 80090bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80090be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1e5      	bne.n	8009090 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	e853 3f00 	ldrex	r3, [r3]
 80090d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80090da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	461a      	mov	r2, r3
 80090e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090e2:	61fb      	str	r3, [r7, #28]
 80090e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e6:	69b9      	ldr	r1, [r7, #24]
 80090e8:	69fa      	ldr	r2, [r7, #28]
 80090ea:	e841 2300 	strex	r3, r2, [r1]
 80090ee:	617b      	str	r3, [r7, #20]
   return(result);
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d1e6      	bne.n	80090c4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80090f6:	e002      	b.n	80090fe <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80090f8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80090fa:	f7f7 fb73 	bl	80007e4 <HAL_UART_TxCpltCallback>
}
 80090fe:	bf00      	nop
 8009100:	3740      	adds	r7, #64	@ 0x40
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b084      	sub	sp, #16
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009112:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f7fe fe0d 	bl	8007d34 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800911a:	bf00      	nop
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009122:	b580      	push	{r7, lr}
 8009124:	b09c      	sub	sp, #112	@ 0x70
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800912e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	69db      	ldr	r3, [r3, #28]
 8009134:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009138:	d071      	beq.n	800921e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800913a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800913c:	2200      	movs	r2, #0
 800913e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009142:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009148:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800914a:	e853 3f00 	ldrex	r3, [r3]
 800914e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009150:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009152:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009156:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009158:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	461a      	mov	r2, r3
 800915e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009160:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009162:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009164:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009166:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009168:	e841 2300 	strex	r3, r2, [r1]
 800916c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800916e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009170:	2b00      	cmp	r3, #0
 8009172:	d1e6      	bne.n	8009142 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009174:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	3308      	adds	r3, #8
 800917a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800917e:	e853 3f00 	ldrex	r3, [r3]
 8009182:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009186:	f023 0301 	bic.w	r3, r3, #1
 800918a:	667b      	str	r3, [r7, #100]	@ 0x64
 800918c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	3308      	adds	r3, #8
 8009192:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009194:	647a      	str	r2, [r7, #68]	@ 0x44
 8009196:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009198:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800919a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800919c:	e841 2300 	strex	r3, r2, [r1]
 80091a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1e5      	bne.n	8009174 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	3308      	adds	r3, #8
 80091ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b2:	e853 3f00 	ldrex	r3, [r3]
 80091b6:	623b      	str	r3, [r7, #32]
   return(result);
 80091b8:	6a3b      	ldr	r3, [r7, #32]
 80091ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091be:	663b      	str	r3, [r7, #96]	@ 0x60
 80091c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	3308      	adds	r3, #8
 80091c6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80091c8:	633a      	str	r2, [r7, #48]	@ 0x30
 80091ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091d0:	e841 2300 	strex	r3, r2, [r1]
 80091d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1e5      	bne.n	80091a8 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80091dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091de:	2220      	movs	r2, #32
 80091e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d118      	bne.n	800921e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	e853 3f00 	ldrex	r3, [r3]
 80091f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f023 0310 	bic.w	r3, r3, #16
 8009200:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009202:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	461a      	mov	r2, r3
 8009208:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800920a:	61fb      	str	r3, [r7, #28]
 800920c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920e:	69b9      	ldr	r1, [r7, #24]
 8009210:	69fa      	ldr	r2, [r7, #28]
 8009212:	e841 2300 	strex	r3, r2, [r1]
 8009216:	617b      	str	r3, [r7, #20]
   return(result);
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d1e6      	bne.n	80091ec <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800921e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009220:	2200      	movs	r2, #0
 8009222:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009224:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009226:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009228:	2b01      	cmp	r3, #1
 800922a:	d107      	bne.n	800923c <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800922c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800922e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009232:	4619      	mov	r1, r3
 8009234:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009236:	f7fe fd9b 	bl	8007d70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800923a:	e002      	b.n	8009242 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800923c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800923e:	f7f7 fafd 	bl	800083c <HAL_UART_RxCpltCallback>
}
 8009242:	bf00      	nop
 8009244:	3770      	adds	r7, #112	@ 0x70
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}

0800924a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800924a:	b580      	push	{r7, lr}
 800924c:	b084      	sub	sp, #16
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009256:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2201      	movs	r2, #1
 800925c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009262:	2b01      	cmp	r3, #1
 8009264:	d109      	bne.n	800927a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800926c:	085b      	lsrs	r3, r3, #1
 800926e:	b29b      	uxth	r3, r3
 8009270:	4619      	mov	r1, r3
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f7fe fd7c 	bl	8007d70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009278:	e002      	b.n	8009280 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f7fe fd64 	bl	8007d48 <HAL_UART_RxHalfCpltCallback>
}
 8009280:	bf00      	nop
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b086      	sub	sp, #24
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009294:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800929c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092a4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092b0:	2b80      	cmp	r3, #128	@ 0x80
 80092b2:	d109      	bne.n	80092c8 <UART_DMAError+0x40>
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	2b21      	cmp	r3, #33	@ 0x21
 80092b8:	d106      	bne.n	80092c8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	2200      	movs	r2, #0
 80092be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80092c2:	6978      	ldr	r0, [r7, #20]
 80092c4:	f7ff fe2c 	bl	8008f20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	689b      	ldr	r3, [r3, #8]
 80092ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092d2:	2b40      	cmp	r3, #64	@ 0x40
 80092d4:	d109      	bne.n	80092ea <UART_DMAError+0x62>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2b22      	cmp	r3, #34	@ 0x22
 80092da:	d106      	bne.n	80092ea <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	2200      	movs	r2, #0
 80092e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80092e4:	6978      	ldr	r0, [r7, #20]
 80092e6:	f7ff fe5d 	bl	8008fa4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092f0:	f043 0210 	orr.w	r2, r3, #16
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092fa:	6978      	ldr	r0, [r7, #20]
 80092fc:	f7fe fd2e 	bl	8007d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009300:	bf00      	nop
 8009302:	3718      	adds	r7, #24
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009308:	b480      	push	{r7}
 800930a:	b085      	sub	sp, #20
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009316:	2b01      	cmp	r3, #1
 8009318:	d101      	bne.n	800931e <HAL_UARTEx_DisableFifoMode+0x16>
 800931a:	2302      	movs	r3, #2
 800931c:	e027      	b.n	800936e <HAL_UARTEx_DisableFifoMode+0x66>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2201      	movs	r2, #1
 8009322:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2224      	movs	r2, #36	@ 0x24
 800932a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f022 0201 	bic.w	r2, r2, #1
 8009344:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800934c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2200      	movs	r2, #0
 8009352:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2220      	movs	r2, #32
 8009360:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3714      	adds	r7, #20
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr

0800937a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b084      	sub	sp, #16
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
 8009382:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800938a:	2b01      	cmp	r3, #1
 800938c:	d101      	bne.n	8009392 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800938e:	2302      	movs	r3, #2
 8009390:	e02d      	b.n	80093ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2201      	movs	r2, #1
 8009396:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2224      	movs	r2, #36	@ 0x24
 800939e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f022 0201 	bic.w	r2, r2, #1
 80093b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	683a      	ldr	r2, [r7, #0]
 80093ca:	430a      	orrs	r2, r1
 80093cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f850 	bl	8009474 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	68fa      	ldr	r2, [r7, #12]
 80093da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2220      	movs	r2, #32
 80093e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80093ec:	2300      	movs	r3, #0
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b084      	sub	sp, #16
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
 80093fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009406:	2b01      	cmp	r3, #1
 8009408:	d101      	bne.n	800940e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800940a:	2302      	movs	r3, #2
 800940c:	e02d      	b.n	800946a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2201      	movs	r2, #1
 8009412:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2224      	movs	r2, #36	@ 0x24
 800941a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f022 0201 	bic.w	r2, r2, #1
 8009434:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	683a      	ldr	r2, [r7, #0]
 8009446:	430a      	orrs	r2, r1
 8009448:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 f812 	bl	8009474 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2220      	movs	r2, #32
 800945c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009468:	2300      	movs	r3, #0
}
 800946a:	4618      	mov	r0, r3
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
	...

08009474 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009480:	2b00      	cmp	r3, #0
 8009482:	d108      	bne.n	8009496 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2201      	movs	r2, #1
 8009488:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2201      	movs	r2, #1
 8009490:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009494:	e031      	b.n	80094fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009496:	2310      	movs	r3, #16
 8009498:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800949a:	2310      	movs	r3, #16
 800949c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	0e5b      	lsrs	r3, r3, #25
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	f003 0307 	and.w	r3, r3, #7
 80094ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	0f5b      	lsrs	r3, r3, #29
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	f003 0307 	and.w	r3, r3, #7
 80094bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094be:	7bbb      	ldrb	r3, [r7, #14]
 80094c0:	7b3a      	ldrb	r2, [r7, #12]
 80094c2:	4911      	ldr	r1, [pc, #68]	@ (8009508 <UARTEx_SetNbDataToProcess+0x94>)
 80094c4:	5c8a      	ldrb	r2, [r1, r2]
 80094c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80094ca:	7b3a      	ldrb	r2, [r7, #12]
 80094cc:	490f      	ldr	r1, [pc, #60]	@ (800950c <UARTEx_SetNbDataToProcess+0x98>)
 80094ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80094d4:	b29a      	uxth	r2, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094dc:	7bfb      	ldrb	r3, [r7, #15]
 80094de:	7b7a      	ldrb	r2, [r7, #13]
 80094e0:	4909      	ldr	r1, [pc, #36]	@ (8009508 <UARTEx_SetNbDataToProcess+0x94>)
 80094e2:	5c8a      	ldrb	r2, [r1, r2]
 80094e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80094e8:	7b7a      	ldrb	r2, [r7, #13]
 80094ea:	4908      	ldr	r1, [pc, #32]	@ (800950c <UARTEx_SetNbDataToProcess+0x98>)
 80094ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80094fa:	bf00      	nop
 80094fc:	3714      	adds	r7, #20
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr
 8009506:	bf00      	nop
 8009508:	080095d4 	.word	0x080095d4
 800950c:	080095dc 	.word	0x080095dc

08009510 <memset>:
 8009510:	4402      	add	r2, r0
 8009512:	4603      	mov	r3, r0
 8009514:	4293      	cmp	r3, r2
 8009516:	d100      	bne.n	800951a <memset+0xa>
 8009518:	4770      	bx	lr
 800951a:	f803 1b01 	strb.w	r1, [r3], #1
 800951e:	e7f9      	b.n	8009514 <memset+0x4>

08009520 <__libc_init_array>:
 8009520:	b570      	push	{r4, r5, r6, lr}
 8009522:	4d0d      	ldr	r5, [pc, #52]	@ (8009558 <__libc_init_array+0x38>)
 8009524:	4c0d      	ldr	r4, [pc, #52]	@ (800955c <__libc_init_array+0x3c>)
 8009526:	1b64      	subs	r4, r4, r5
 8009528:	10a4      	asrs	r4, r4, #2
 800952a:	2600      	movs	r6, #0
 800952c:	42a6      	cmp	r6, r4
 800952e:	d109      	bne.n	8009544 <__libc_init_array+0x24>
 8009530:	4d0b      	ldr	r5, [pc, #44]	@ (8009560 <__libc_init_array+0x40>)
 8009532:	4c0c      	ldr	r4, [pc, #48]	@ (8009564 <__libc_init_array+0x44>)
 8009534:	f000 f826 	bl	8009584 <_init>
 8009538:	1b64      	subs	r4, r4, r5
 800953a:	10a4      	asrs	r4, r4, #2
 800953c:	2600      	movs	r6, #0
 800953e:	42a6      	cmp	r6, r4
 8009540:	d105      	bne.n	800954e <__libc_init_array+0x2e>
 8009542:	bd70      	pop	{r4, r5, r6, pc}
 8009544:	f855 3b04 	ldr.w	r3, [r5], #4
 8009548:	4798      	blx	r3
 800954a:	3601      	adds	r6, #1
 800954c:	e7ee      	b.n	800952c <__libc_init_array+0xc>
 800954e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009552:	4798      	blx	r3
 8009554:	3601      	adds	r6, #1
 8009556:	e7f2      	b.n	800953e <__libc_init_array+0x1e>
 8009558:	080095ec 	.word	0x080095ec
 800955c:	080095ec 	.word	0x080095ec
 8009560:	080095ec 	.word	0x080095ec
 8009564:	080095f0 	.word	0x080095f0

08009568 <memcpy>:
 8009568:	440a      	add	r2, r1
 800956a:	4291      	cmp	r1, r2
 800956c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009570:	d100      	bne.n	8009574 <memcpy+0xc>
 8009572:	4770      	bx	lr
 8009574:	b510      	push	{r4, lr}
 8009576:	f811 4b01 	ldrb.w	r4, [r1], #1
 800957a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800957e:	4291      	cmp	r1, r2
 8009580:	d1f9      	bne.n	8009576 <memcpy+0xe>
 8009582:	bd10      	pop	{r4, pc}

08009584 <_init>:
 8009584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009586:	bf00      	nop
 8009588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800958a:	bc08      	pop	{r3}
 800958c:	469e      	mov	lr, r3
 800958e:	4770      	bx	lr

08009590 <_fini>:
 8009590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009592:	bf00      	nop
 8009594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009596:	bc08      	pop	{r3}
 8009598:	469e      	mov	lr, r3
 800959a:	4770      	bx	lr
